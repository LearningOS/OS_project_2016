
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:
.text
.globl kern_entry
kern_entry:
    # reload temperate gdt (second time) to remap all physical memory
    # virtual_addr 0~4G=linear_addr&physical_addr -KERNBASE~4G-KERNBASE 
    lgdt REALLOC(__gdtdesc)
c0100000:	0f 01 15 18 10 13 00 	lgdtl  0x131018
    movl $KERNEL_DS, %eax
c0100007:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c010000c:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c010000e:	8e c0                	mov    %eax,%es
    movw %ax, %ss
c0100010:	8e d0                	mov    %eax,%ss

    ljmp $KERNEL_CS, $relocated
c0100012:	ea 19 00 10 c0 08 00 	ljmp   $0x8,$0xc0100019

c0100019 <relocated>:

relocated:

    # set ebp, esp
    movl $0x0, %ebp
c0100019:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010001e:	bc 00 10 13 c0       	mov    $0xc0131000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c0100023:	e8 02 00 00 00       	call   c010002a <kern_init>

c0100028 <spin>:

# should never get here
spin:
    jmp spin
c0100028:	eb fe                	jmp    c0100028 <spin>

c010002a <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c010002a:	55                   	push   %ebp
c010002b:	89 e5                	mov    %esp,%ebp
c010002d:	83 ec 28             	sub    $0x28,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c0100030:	ba c4 56 1c c0       	mov    $0xc01c56c4,%edx
c0100035:	b8 f9 23 1c c0       	mov    $0xc01c23f9,%eax
c010003a:	29 c2                	sub    %eax,%edx
c010003c:	89 d0                	mov    %edx,%eax
c010003e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100042:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0100049:	00 
c010004a:	c7 04 24 f9 23 1c c0 	movl   $0xc01c23f9,(%esp)
c0100051:	e8 10 d9 00 00       	call   c010d966 <memset>

    cons_init();                // init the console
c0100056:	e8 7e 16 00 00       	call   c01016d9 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c010005b:	c7 45 f4 00 db 10 c0 	movl   $0xc010db00,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100062:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100065:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100069:	c7 04 24 1c db 10 c0 	movl   $0xc010db1c,(%esp)
c0100070:	e8 e3 02 00 00       	call   c0100358 <cprintf>

    print_kerninfo();
c0100075:	e8 0a 09 00 00       	call   c0100984 <print_kerninfo>

    grade_backtrace();
c010007a:	e8 a2 00 00 00       	call   c0100121 <grade_backtrace>

    pmm_init();                 // init physical memory management
c010007f:	e8 cd 59 00 00       	call   c0105a51 <pmm_init>

    pic_init();                 // init interrupt controller
c0100084:	e8 2e 20 00 00       	call   c01020b7 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100089:	e8 a6 21 00 00       	call   c0102234 <idt_init>

    vmm_init();                 // init virtual memory management
c010008e:	e8 99 89 00 00       	call   c0108a2c <vmm_init>
    sched_init();               // init scheduler
c0100093:	e8 0c c7 00 00       	call   c010c7a4 <sched_init>
    proc_init();                // init process table
c0100098:	e8 f3 bf 00 00       	call   c010c090 <proc_init>
    
    ide_init();                 // init ide devices
c010009d:	e8 68 17 00 00       	call   c010180a <ide_init>
    swap_init();                // init swap
c01000a2:	e8 7e 70 00 00       	call   c0107125 <swap_init>

    clock_init();               // init clock interrupt
c01000a7:	e8 e3 0d 00 00       	call   c0100e8f <clock_init>
    intr_enable();              // enable irq interrupt
c01000ac:	e8 74 1f 00 00       	call   c0102025 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000b1:	e8 99 c1 00 00       	call   c010c24f <cpu_idle>

c01000b6 <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000b6:	55                   	push   %ebp
c01000b7:	89 e5                	mov    %esp,%ebp
c01000b9:	83 ec 18             	sub    $0x18,%esp
    mon_backtrace(0, NULL, NULL);
c01000bc:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01000c3:	00 
c01000c4:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01000cb:	00 
c01000cc:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c01000d3:	e8 e9 0c 00 00       	call   c0100dc1 <mon_backtrace>
}
c01000d8:	c9                   	leave  
c01000d9:	c3                   	ret    

c01000da <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000da:	55                   	push   %ebp
c01000db:	89 e5                	mov    %esp,%ebp
c01000dd:	53                   	push   %ebx
c01000de:	83 ec 14             	sub    $0x14,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000e1:	8d 5d 0c             	lea    0xc(%ebp),%ebx
c01000e4:	8b 4d 0c             	mov    0xc(%ebp),%ecx
c01000e7:	8d 55 08             	lea    0x8(%ebp),%edx
c01000ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01000ed:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c01000f1:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01000f5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01000f9:	89 04 24             	mov    %eax,(%esp)
c01000fc:	e8 b5 ff ff ff       	call   c01000b6 <grade_backtrace2>
}
c0100101:	83 c4 14             	add    $0x14,%esp
c0100104:	5b                   	pop    %ebx
c0100105:	5d                   	pop    %ebp
c0100106:	c3                   	ret    

c0100107 <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c0100107:	55                   	push   %ebp
c0100108:	89 e5                	mov    %esp,%ebp
c010010a:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace1(arg0, arg2);
c010010d:	8b 45 10             	mov    0x10(%ebp),%eax
c0100110:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100114:	8b 45 08             	mov    0x8(%ebp),%eax
c0100117:	89 04 24             	mov    %eax,(%esp)
c010011a:	e8 bb ff ff ff       	call   c01000da <grade_backtrace1>
}
c010011f:	c9                   	leave  
c0100120:	c3                   	ret    

c0100121 <grade_backtrace>:

void
grade_backtrace(void) {
c0100121:	55                   	push   %ebp
c0100122:	89 e5                	mov    %esp,%ebp
c0100124:	83 ec 18             	sub    $0x18,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100127:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c010012c:	c7 44 24 08 00 00 ff 	movl   $0xffff0000,0x8(%esp)
c0100133:	ff 
c0100134:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100138:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010013f:	e8 c3 ff ff ff       	call   c0100107 <grade_backtrace0>
}
c0100144:	c9                   	leave  
c0100145:	c3                   	ret    

c0100146 <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c0100146:	55                   	push   %ebp
c0100147:	89 e5                	mov    %esp,%ebp
c0100149:	83 ec 28             	sub    $0x28,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c010014c:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c010014f:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100152:	8c 45 f2             	mov    %es,-0xe(%ebp)
c0100155:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c0100158:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010015c:	0f b7 c0             	movzwl %ax,%eax
c010015f:	83 e0 03             	and    $0x3,%eax
c0100162:	89 c2                	mov    %eax,%edx
c0100164:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
c0100169:	89 54 24 08          	mov    %edx,0x8(%esp)
c010016d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100171:	c7 04 24 21 db 10 c0 	movl   $0xc010db21,(%esp)
c0100178:	e8 db 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  cs = %x\n", round, reg1);
c010017d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100181:	0f b7 d0             	movzwl %ax,%edx
c0100184:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
c0100189:	89 54 24 08          	mov    %edx,0x8(%esp)
c010018d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100191:	c7 04 24 2f db 10 c0 	movl   $0xc010db2f,(%esp)
c0100198:	e8 bb 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  ds = %x\n", round, reg2);
c010019d:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01001a1:	0f b7 d0             	movzwl %ax,%edx
c01001a4:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
c01001a9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001ad:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001b1:	c7 04 24 3d db 10 c0 	movl   $0xc010db3d,(%esp)
c01001b8:	e8 9b 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  es = %x\n", round, reg3);
c01001bd:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001c1:	0f b7 d0             	movzwl %ax,%edx
c01001c4:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
c01001c9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001cd:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001d1:	c7 04 24 4b db 10 c0 	movl   $0xc010db4b,(%esp)
c01001d8:	e8 7b 01 00 00       	call   c0100358 <cprintf>
    cprintf("%d:  ss = %x\n", round, reg4);
c01001dd:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001e1:	0f b7 d0             	movzwl %ax,%edx
c01001e4:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
c01001e9:	89 54 24 08          	mov    %edx,0x8(%esp)
c01001ed:	89 44 24 04          	mov    %eax,0x4(%esp)
c01001f1:	c7 04 24 59 db 10 c0 	movl   $0xc010db59,(%esp)
c01001f8:	e8 5b 01 00 00       	call   c0100358 <cprintf>
    round ++;
c01001fd:	a1 00 24 1c c0       	mov    0xc01c2400,%eax
c0100202:	83 c0 01             	add    $0x1,%eax
c0100205:	a3 00 24 1c c0       	mov    %eax,0xc01c2400
}
c010020a:	c9                   	leave  
c010020b:	c3                   	ret    

c010020c <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c010020c:	55                   	push   %ebp
c010020d:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c010020f:	5d                   	pop    %ebp
c0100210:	c3                   	ret    

c0100211 <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c0100211:	55                   	push   %ebp
c0100212:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100214:	5d                   	pop    %ebp
c0100215:	c3                   	ret    

c0100216 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100216:	55                   	push   %ebp
c0100217:	89 e5                	mov    %esp,%ebp
c0100219:	83 ec 18             	sub    $0x18,%esp
    lab1_print_cur_status();
c010021c:	e8 25 ff ff ff       	call   c0100146 <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100221:	c7 04 24 68 db 10 c0 	movl   $0xc010db68,(%esp)
c0100228:	e8 2b 01 00 00       	call   c0100358 <cprintf>
    lab1_switch_to_user();
c010022d:	e8 da ff ff ff       	call   c010020c <lab1_switch_to_user>
    lab1_print_cur_status();
c0100232:	e8 0f ff ff ff       	call   c0100146 <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c0100237:	c7 04 24 88 db 10 c0 	movl   $0xc010db88,(%esp)
c010023e:	e8 15 01 00 00       	call   c0100358 <cprintf>
    lab1_switch_to_kernel();
c0100243:	e8 c9 ff ff ff       	call   c0100211 <lab1_switch_to_kernel>
    lab1_print_cur_status();
c0100248:	e8 f9 fe ff ff       	call   c0100146 <lab1_print_cur_status>
}
c010024d:	c9                   	leave  
c010024e:	c3                   	ret    

c010024f <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c010024f:	55                   	push   %ebp
c0100250:	89 e5                	mov    %esp,%ebp
c0100252:	83 ec 28             	sub    $0x28,%esp
    if (prompt != NULL) {
c0100255:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100259:	74 13                	je     c010026e <readline+0x1f>
        cprintf("%s", prompt);
c010025b:	8b 45 08             	mov    0x8(%ebp),%eax
c010025e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100262:	c7 04 24 a7 db 10 c0 	movl   $0xc010dba7,(%esp)
c0100269:	e8 ea 00 00 00       	call   c0100358 <cprintf>
    }
    int i = 0, c;
c010026e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c0100275:	e8 66 01 00 00       	call   c01003e0 <getchar>
c010027a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c010027d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100281:	79 07                	jns    c010028a <readline+0x3b>
            return NULL;
c0100283:	b8 00 00 00 00       	mov    $0x0,%eax
c0100288:	eb 79                	jmp    c0100303 <readline+0xb4>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c010028a:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c010028e:	7e 28                	jle    c01002b8 <readline+0x69>
c0100290:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c0100297:	7f 1f                	jg     c01002b8 <readline+0x69>
            cputchar(c);
c0100299:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010029c:	89 04 24             	mov    %eax,(%esp)
c010029f:	e8 da 00 00 00       	call   c010037e <cputchar>
            buf[i ++] = c;
c01002a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002a7:	8d 50 01             	lea    0x1(%eax),%edx
c01002aa:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01002ad:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01002b0:	88 90 20 24 1c c0    	mov    %dl,-0x3fe3dbe0(%eax)
c01002b6:	eb 46                	jmp    c01002fe <readline+0xaf>
        }
        else if (c == '\b' && i > 0) {
c01002b8:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c01002bc:	75 17                	jne    c01002d5 <readline+0x86>
c01002be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01002c2:	7e 11                	jle    c01002d5 <readline+0x86>
            cputchar(c);
c01002c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002c7:	89 04 24             	mov    %eax,(%esp)
c01002ca:	e8 af 00 00 00       	call   c010037e <cputchar>
            i --;
c01002cf:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01002d3:	eb 29                	jmp    c01002fe <readline+0xaf>
        }
        else if (c == '\n' || c == '\r') {
c01002d5:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01002d9:	74 06                	je     c01002e1 <readline+0x92>
c01002db:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01002df:	75 1d                	jne    c01002fe <readline+0xaf>
            cputchar(c);
c01002e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002e4:	89 04 24             	mov    %eax,(%esp)
c01002e7:	e8 92 00 00 00       	call   c010037e <cputchar>
            buf[i] = '\0';
c01002ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01002ef:	05 20 24 1c c0       	add    $0xc01c2420,%eax
c01002f4:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01002f7:	b8 20 24 1c c0       	mov    $0xc01c2420,%eax
c01002fc:	eb 05                	jmp    c0100303 <readline+0xb4>
        }
    }
c01002fe:	e9 72 ff ff ff       	jmp    c0100275 <readline+0x26>
}
c0100303:	c9                   	leave  
c0100304:	c3                   	ret    

c0100305 <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c0100305:	55                   	push   %ebp
c0100306:	89 e5                	mov    %esp,%ebp
c0100308:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c010030b:	8b 45 08             	mov    0x8(%ebp),%eax
c010030e:	89 04 24             	mov    %eax,(%esp)
c0100311:	e8 ef 13 00 00       	call   c0101705 <cons_putc>
    (*cnt) ++;
c0100316:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100319:	8b 00                	mov    (%eax),%eax
c010031b:	8d 50 01             	lea    0x1(%eax),%edx
c010031e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100321:	89 10                	mov    %edx,(%eax)
}
c0100323:	c9                   	leave  
c0100324:	c3                   	ret    

c0100325 <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c0100325:	55                   	push   %ebp
c0100326:	89 e5                	mov    %esp,%ebp
c0100328:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c010032b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, &cnt, fmt, ap);
c0100332:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100335:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0100339:	8b 45 08             	mov    0x8(%ebp),%eax
c010033c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100340:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100343:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100347:	c7 04 24 05 03 10 c0 	movl   $0xc0100305,(%esp)
c010034e:	e8 54 cd 00 00       	call   c010d0a7 <vprintfmt>
    return cnt;
c0100353:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100356:	c9                   	leave  
c0100357:	c3                   	ret    

c0100358 <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c0100358:	55                   	push   %ebp
c0100359:	89 e5                	mov    %esp,%ebp
c010035b:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010035e:	8d 45 0c             	lea    0xc(%ebp),%eax
c0100361:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c0100364:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100367:	89 44 24 04          	mov    %eax,0x4(%esp)
c010036b:	8b 45 08             	mov    0x8(%ebp),%eax
c010036e:	89 04 24             	mov    %eax,(%esp)
c0100371:	e8 af ff ff ff       	call   c0100325 <vcprintf>
c0100376:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0100379:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010037c:	c9                   	leave  
c010037d:	c3                   	ret    

c010037e <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c010037e:	55                   	push   %ebp
c010037f:	89 e5                	mov    %esp,%ebp
c0100381:	83 ec 18             	sub    $0x18,%esp
    cons_putc(c);
c0100384:	8b 45 08             	mov    0x8(%ebp),%eax
c0100387:	89 04 24             	mov    %eax,(%esp)
c010038a:	e8 76 13 00 00       	call   c0101705 <cons_putc>
}
c010038f:	c9                   	leave  
c0100390:	c3                   	ret    

c0100391 <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c0100391:	55                   	push   %ebp
c0100392:	89 e5                	mov    %esp,%ebp
c0100394:	83 ec 28             	sub    $0x28,%esp
    int cnt = 0;
c0100397:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c010039e:	eb 13                	jmp    c01003b3 <cputs+0x22>
        cputch(c, &cnt);
c01003a0:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003a4:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003a7:	89 54 24 04          	mov    %edx,0x4(%esp)
c01003ab:	89 04 24             	mov    %eax,(%esp)
c01003ae:	e8 52 ff ff ff       	call   c0100305 <cputch>
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01003b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01003b6:	8d 50 01             	lea    0x1(%eax),%edx
c01003b9:	89 55 08             	mov    %edx,0x8(%ebp)
c01003bc:	0f b6 00             	movzbl (%eax),%eax
c01003bf:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003c2:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003c6:	75 d8                	jne    c01003a0 <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01003c8:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01003cb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01003cf:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01003d6:	e8 2a ff ff ff       	call   c0100305 <cputch>
    return cnt;
c01003db:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01003de:	c9                   	leave  
c01003df:	c3                   	ret    

c01003e0 <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c01003e0:	55                   	push   %ebp
c01003e1:	89 e5                	mov    %esp,%ebp
c01003e3:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c01003e6:	e8 56 13 00 00       	call   c0101741 <cons_getc>
c01003eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01003ee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01003f2:	74 f2                	je     c01003e6 <getchar+0x6>
        /* do nothing */;
    return c;
c01003f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01003f7:	c9                   	leave  
c01003f8:	c3                   	ret    

c01003f9 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01003f9:	55                   	push   %ebp
c01003fa:	89 e5                	mov    %esp,%ebp
c01003fc:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01003ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100402:	8b 00                	mov    (%eax),%eax
c0100404:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100407:	8b 45 10             	mov    0x10(%ebp),%eax
c010040a:	8b 00                	mov    (%eax),%eax
c010040c:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010040f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c0100416:	e9 d2 00 00 00       	jmp    c01004ed <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c010041b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010041e:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100421:	01 d0                	add    %edx,%eax
c0100423:	89 c2                	mov    %eax,%edx
c0100425:	c1 ea 1f             	shr    $0x1f,%edx
c0100428:	01 d0                	add    %edx,%eax
c010042a:	d1 f8                	sar    %eax
c010042c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010042f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100432:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c0100435:	eb 04                	jmp    c010043b <stab_binsearch+0x42>
            m --;
c0100437:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c010043b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010043e:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100441:	7c 1f                	jl     c0100462 <stab_binsearch+0x69>
c0100443:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100446:	89 d0                	mov    %edx,%eax
c0100448:	01 c0                	add    %eax,%eax
c010044a:	01 d0                	add    %edx,%eax
c010044c:	c1 e0 02             	shl    $0x2,%eax
c010044f:	89 c2                	mov    %eax,%edx
c0100451:	8b 45 08             	mov    0x8(%ebp),%eax
c0100454:	01 d0                	add    %edx,%eax
c0100456:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010045a:	0f b6 c0             	movzbl %al,%eax
c010045d:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100460:	75 d5                	jne    c0100437 <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0100462:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100465:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100468:	7d 0b                	jge    c0100475 <stab_binsearch+0x7c>
            l = true_m + 1;
c010046a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010046d:	83 c0 01             	add    $0x1,%eax
c0100470:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c0100473:	eb 78                	jmp    c01004ed <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c0100475:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010047c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010047f:	89 d0                	mov    %edx,%eax
c0100481:	01 c0                	add    %eax,%eax
c0100483:	01 d0                	add    %edx,%eax
c0100485:	c1 e0 02             	shl    $0x2,%eax
c0100488:	89 c2                	mov    %eax,%edx
c010048a:	8b 45 08             	mov    0x8(%ebp),%eax
c010048d:	01 d0                	add    %edx,%eax
c010048f:	8b 40 08             	mov    0x8(%eax),%eax
c0100492:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100495:	73 13                	jae    c01004aa <stab_binsearch+0xb1>
            *region_left = m;
c0100497:	8b 45 0c             	mov    0xc(%ebp),%eax
c010049a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010049d:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c010049f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01004a2:	83 c0 01             	add    $0x1,%eax
c01004a5:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01004a8:	eb 43                	jmp    c01004ed <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c01004aa:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004ad:	89 d0                	mov    %edx,%eax
c01004af:	01 c0                	add    %eax,%eax
c01004b1:	01 d0                	add    %edx,%eax
c01004b3:	c1 e0 02             	shl    $0x2,%eax
c01004b6:	89 c2                	mov    %eax,%edx
c01004b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01004bb:	01 d0                	add    %edx,%eax
c01004bd:	8b 40 08             	mov    0x8(%eax),%eax
c01004c0:	3b 45 18             	cmp    0x18(%ebp),%eax
c01004c3:	76 16                	jbe    c01004db <stab_binsearch+0xe2>
            *region_right = m - 1;
c01004c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004c8:	8d 50 ff             	lea    -0x1(%eax),%edx
c01004cb:	8b 45 10             	mov    0x10(%ebp),%eax
c01004ce:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c01004d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004d3:	83 e8 01             	sub    $0x1,%eax
c01004d6:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01004d9:	eb 12                	jmp    c01004ed <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c01004db:	8b 45 0c             	mov    0xc(%ebp),%eax
c01004de:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01004e1:	89 10                	mov    %edx,(%eax)
            l = m;
c01004e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01004e6:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01004e9:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01004ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01004f0:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01004f3:	0f 8e 22 ff ff ff    	jle    c010041b <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01004f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01004fd:	75 0f                	jne    c010050e <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01004ff:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100502:	8b 00                	mov    (%eax),%eax
c0100504:	8d 50 ff             	lea    -0x1(%eax),%edx
c0100507:	8b 45 10             	mov    0x10(%ebp),%eax
c010050a:	89 10                	mov    %edx,(%eax)
c010050c:	eb 3f                	jmp    c010054d <stab_binsearch+0x154>
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c010050e:	8b 45 10             	mov    0x10(%ebp),%eax
c0100511:	8b 00                	mov    (%eax),%eax
c0100513:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c0100516:	eb 04                	jmp    c010051c <stab_binsearch+0x123>
c0100518:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c010051c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010051f:	8b 00                	mov    (%eax),%eax
c0100521:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100524:	7d 1f                	jge    c0100545 <stab_binsearch+0x14c>
c0100526:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0100529:	89 d0                	mov    %edx,%eax
c010052b:	01 c0                	add    %eax,%eax
c010052d:	01 d0                	add    %edx,%eax
c010052f:	c1 e0 02             	shl    $0x2,%eax
c0100532:	89 c2                	mov    %eax,%edx
c0100534:	8b 45 08             	mov    0x8(%ebp),%eax
c0100537:	01 d0                	add    %edx,%eax
c0100539:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010053d:	0f b6 c0             	movzbl %al,%eax
c0100540:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100543:	75 d3                	jne    c0100518 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c0100545:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100548:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010054b:	89 10                	mov    %edx,(%eax)
    }
}
c010054d:	c9                   	leave  
c010054e:	c3                   	ret    

c010054f <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c010054f:	55                   	push   %ebp
c0100550:	89 e5                	mov    %esp,%ebp
c0100552:	83 ec 58             	sub    $0x58,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100555:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100558:	c7 00 ac db 10 c0    	movl   $0xc010dbac,(%eax)
    info->eip_line = 0;
c010055e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100561:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100568:	8b 45 0c             	mov    0xc(%ebp),%eax
c010056b:	c7 40 08 ac db 10 c0 	movl   $0xc010dbac,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100572:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100575:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c010057c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010057f:	8b 55 08             	mov    0x8(%ebp),%edx
c0100582:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100585:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100588:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c010058f:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0100596:	76 21                	jbe    c01005b9 <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100598:	c7 45 f4 e0 07 11 c0 	movl   $0xc01107e0,-0xc(%ebp)
        stab_end = __STAB_END__;
c010059f:	c7 45 f0 18 80 12 c0 	movl   $0xc0128018,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c01005a6:	c7 45 ec 19 80 12 c0 	movl   $0xc0128019,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c01005ad:	c7 45 e8 31 ef 12 c0 	movl   $0xc012ef31,-0x18(%ebp)
c01005b4:	e9 ea 00 00 00       	jmp    c01006a3 <debuginfo_eip+0x154>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c01005b9:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c01005c0:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c01005c5:	85 c0                	test   %eax,%eax
c01005c7:	74 11                	je     c01005da <debuginfo_eip+0x8b>
c01005c9:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c01005ce:	8b 40 18             	mov    0x18(%eax),%eax
c01005d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01005d4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01005d8:	75 0a                	jne    c01005e4 <debuginfo_eip+0x95>
            return -1;
c01005da:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01005df:	e9 9e 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01005e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01005e7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01005ee:	00 
c01005ef:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
c01005f6:	00 
c01005f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01005fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01005fe:	89 04 24             	mov    %eax,(%esp)
c0100601:	e8 26 8d 00 00       	call   c010932c <user_mem_check>
c0100606:	85 c0                	test   %eax,%eax
c0100608:	75 0a                	jne    c0100614 <debuginfo_eip+0xc5>
            return -1;
c010060a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010060f:	e9 6e 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }

        stabs = usd->stabs;
c0100614:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100617:	8b 00                	mov    (%eax),%eax
c0100619:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c010061c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010061f:	8b 40 04             	mov    0x4(%eax),%eax
c0100622:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c0100625:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100628:	8b 40 08             	mov    0x8(%eax),%eax
c010062b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c010062e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0100631:	8b 40 0c             	mov    0xc(%eax),%eax
c0100634:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c0100637:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010063a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010063d:	29 c2                	sub    %eax,%edx
c010063f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100642:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100649:	00 
c010064a:	89 54 24 08          	mov    %edx,0x8(%esp)
c010064e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100652:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0100655:	89 04 24             	mov    %eax,(%esp)
c0100658:	e8 cf 8c 00 00       	call   c010932c <user_mem_check>
c010065d:	85 c0                	test   %eax,%eax
c010065f:	75 0a                	jne    c010066b <debuginfo_eip+0x11c>
            return -1;
c0100661:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100666:	e9 17 03 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c010066b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010066e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100671:	29 c2                	sub    %eax,%edx
c0100673:	89 d0                	mov    %edx,%eax
c0100675:	89 c2                	mov    %eax,%edx
c0100677:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010067a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0100681:	00 
c0100682:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100686:	89 44 24 04          	mov    %eax,0x4(%esp)
c010068a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010068d:	89 04 24             	mov    %eax,(%esp)
c0100690:	e8 97 8c 00 00       	call   c010932c <user_mem_check>
c0100695:	85 c0                	test   %eax,%eax
c0100697:	75 0a                	jne    c01006a3 <debuginfo_eip+0x154>
            return -1;
c0100699:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010069e:	e9 df 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c01006a3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006a6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01006a9:	76 0d                	jbe    c01006b8 <debuginfo_eip+0x169>
c01006ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01006ae:	83 e8 01             	sub    $0x1,%eax
c01006b1:	0f b6 00             	movzbl (%eax),%eax
c01006b4:	84 c0                	test   %al,%al
c01006b6:	74 0a                	je     c01006c2 <debuginfo_eip+0x173>
        return -1;
c01006b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01006bd:	e9 c0 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c01006c2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01006c9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01006cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01006cf:	29 c2                	sub    %eax,%edx
c01006d1:	89 d0                	mov    %edx,%eax
c01006d3:	c1 f8 02             	sar    $0x2,%eax
c01006d6:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c01006dc:	83 e8 01             	sub    $0x1,%eax
c01006df:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c01006e2:	8b 45 08             	mov    0x8(%ebp),%eax
c01006e5:	89 44 24 10          	mov    %eax,0x10(%esp)
c01006e9:	c7 44 24 0c 64 00 00 	movl   $0x64,0xc(%esp)
c01006f0:	00 
c01006f1:	8d 45 d8             	lea    -0x28(%ebp),%eax
c01006f4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01006f8:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01006fb:	89 44 24 04          	mov    %eax,0x4(%esp)
c01006ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100702:	89 04 24             	mov    %eax,(%esp)
c0100705:	e8 ef fc ff ff       	call   c01003f9 <stab_binsearch>
    if (lfile == 0)
c010070a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010070d:	85 c0                	test   %eax,%eax
c010070f:	75 0a                	jne    c010071b <debuginfo_eip+0x1cc>
        return -1;
c0100711:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100716:	e9 67 02 00 00       	jmp    c0100982 <debuginfo_eip+0x433>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c010071b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010071e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0100721:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0100724:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c0100727:	8b 45 08             	mov    0x8(%ebp),%eax
c010072a:	89 44 24 10          	mov    %eax,0x10(%esp)
c010072e:	c7 44 24 0c 24 00 00 	movl   $0x24,0xc(%esp)
c0100735:	00 
c0100736:	8d 45 d0             	lea    -0x30(%ebp),%eax
c0100739:	89 44 24 08          	mov    %eax,0x8(%esp)
c010073d:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0100740:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100744:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100747:	89 04 24             	mov    %eax,(%esp)
c010074a:	e8 aa fc ff ff       	call   c01003f9 <stab_binsearch>

    if (lfun <= rfun) {
c010074f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100752:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100755:	39 c2                	cmp    %eax,%edx
c0100757:	7f 7c                	jg     c01007d5 <debuginfo_eip+0x286>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c0100759:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010075c:	89 c2                	mov    %eax,%edx
c010075e:	89 d0                	mov    %edx,%eax
c0100760:	01 c0                	add    %eax,%eax
c0100762:	01 d0                	add    %edx,%eax
c0100764:	c1 e0 02             	shl    $0x2,%eax
c0100767:	89 c2                	mov    %eax,%edx
c0100769:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010076c:	01 d0                	add    %edx,%eax
c010076e:	8b 10                	mov    (%eax),%edx
c0100770:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100773:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100776:	29 c1                	sub    %eax,%ecx
c0100778:	89 c8                	mov    %ecx,%eax
c010077a:	39 c2                	cmp    %eax,%edx
c010077c:	73 22                	jae    c01007a0 <debuginfo_eip+0x251>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c010077e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100781:	89 c2                	mov    %eax,%edx
c0100783:	89 d0                	mov    %edx,%eax
c0100785:	01 c0                	add    %eax,%eax
c0100787:	01 d0                	add    %edx,%eax
c0100789:	c1 e0 02             	shl    $0x2,%eax
c010078c:	89 c2                	mov    %eax,%edx
c010078e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100791:	01 d0                	add    %edx,%eax
c0100793:	8b 10                	mov    (%eax),%edx
c0100795:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100798:	01 c2                	add    %eax,%edx
c010079a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010079d:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c01007a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007a3:	89 c2                	mov    %eax,%edx
c01007a5:	89 d0                	mov    %edx,%eax
c01007a7:	01 c0                	add    %eax,%eax
c01007a9:	01 d0                	add    %edx,%eax
c01007ab:	c1 e0 02             	shl    $0x2,%eax
c01007ae:	89 c2                	mov    %eax,%edx
c01007b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007b3:	01 d0                	add    %edx,%eax
c01007b5:	8b 50 08             	mov    0x8(%eax),%edx
c01007b8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007bb:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c01007be:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007c1:	8b 40 10             	mov    0x10(%eax),%eax
c01007c4:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c01007c7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01007ca:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c01007cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01007d0:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01007d3:	eb 15                	jmp    c01007ea <debuginfo_eip+0x29b>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c01007d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007d8:	8b 55 08             	mov    0x8(%ebp),%edx
c01007db:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c01007de:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01007e1:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c01007e4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01007e7:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c01007ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c01007ed:	8b 40 08             	mov    0x8(%eax),%eax
c01007f0:	c7 44 24 04 3a 00 00 	movl   $0x3a,0x4(%esp)
c01007f7:	00 
c01007f8:	89 04 24             	mov    %eax,(%esp)
c01007fb:	e8 da cf 00 00       	call   c010d7da <strfind>
c0100800:	89 c2                	mov    %eax,%edx
c0100802:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100805:	8b 40 08             	mov    0x8(%eax),%eax
c0100808:	29 c2                	sub    %eax,%edx
c010080a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010080d:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c0100810:	8b 45 08             	mov    0x8(%ebp),%eax
c0100813:	89 44 24 10          	mov    %eax,0x10(%esp)
c0100817:	c7 44 24 0c 44 00 00 	movl   $0x44,0xc(%esp)
c010081e:	00 
c010081f:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0100822:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100826:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0100829:	89 44 24 04          	mov    %eax,0x4(%esp)
c010082d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100830:	89 04 24             	mov    %eax,(%esp)
c0100833:	e8 c1 fb ff ff       	call   c01003f9 <stab_binsearch>
    if (lline <= rline) {
c0100838:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010083b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010083e:	39 c2                	cmp    %eax,%edx
c0100840:	7f 24                	jg     c0100866 <debuginfo_eip+0x317>
        info->eip_line = stabs[rline].n_desc;
c0100842:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0100845:	89 c2                	mov    %eax,%edx
c0100847:	89 d0                	mov    %edx,%eax
c0100849:	01 c0                	add    %eax,%eax
c010084b:	01 d0                	add    %edx,%eax
c010084d:	c1 e0 02             	shl    $0x2,%eax
c0100850:	89 c2                	mov    %eax,%edx
c0100852:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100855:	01 d0                	add    %edx,%eax
c0100857:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c010085b:	0f b7 d0             	movzwl %ax,%edx
c010085e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100861:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100864:	eb 13                	jmp    c0100879 <debuginfo_eip+0x32a>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c0100866:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010086b:	e9 12 01 00 00       	jmp    c0100982 <debuginfo_eip+0x433>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c0100870:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100873:	83 e8 01             	sub    $0x1,%eax
c0100876:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c0100879:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010087c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010087f:	39 c2                	cmp    %eax,%edx
c0100881:	7c 56                	jl     c01008d9 <debuginfo_eip+0x38a>
           && stabs[lline].n_type != N_SOL
c0100883:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100886:	89 c2                	mov    %eax,%edx
c0100888:	89 d0                	mov    %edx,%eax
c010088a:	01 c0                	add    %eax,%eax
c010088c:	01 d0                	add    %edx,%eax
c010088e:	c1 e0 02             	shl    $0x2,%eax
c0100891:	89 c2                	mov    %eax,%edx
c0100893:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100896:	01 d0                	add    %edx,%eax
c0100898:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010089c:	3c 84                	cmp    $0x84,%al
c010089e:	74 39                	je     c01008d9 <debuginfo_eip+0x38a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c01008a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008a3:	89 c2                	mov    %eax,%edx
c01008a5:	89 d0                	mov    %edx,%eax
c01008a7:	01 c0                	add    %eax,%eax
c01008a9:	01 d0                	add    %edx,%eax
c01008ab:	c1 e0 02             	shl    $0x2,%eax
c01008ae:	89 c2                	mov    %eax,%edx
c01008b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008b3:	01 d0                	add    %edx,%eax
c01008b5:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01008b9:	3c 64                	cmp    $0x64,%al
c01008bb:	75 b3                	jne    c0100870 <debuginfo_eip+0x321>
c01008bd:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008c0:	89 c2                	mov    %eax,%edx
c01008c2:	89 d0                	mov    %edx,%eax
c01008c4:	01 c0                	add    %eax,%eax
c01008c6:	01 d0                	add    %edx,%eax
c01008c8:	c1 e0 02             	shl    $0x2,%eax
c01008cb:	89 c2                	mov    %eax,%edx
c01008cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008d0:	01 d0                	add    %edx,%eax
c01008d2:	8b 40 08             	mov    0x8(%eax),%eax
c01008d5:	85 c0                	test   %eax,%eax
c01008d7:	74 97                	je     c0100870 <debuginfo_eip+0x321>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c01008d9:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01008dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008df:	39 c2                	cmp    %eax,%edx
c01008e1:	7c 46                	jl     c0100929 <debuginfo_eip+0x3da>
c01008e3:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01008e6:	89 c2                	mov    %eax,%edx
c01008e8:	89 d0                	mov    %edx,%eax
c01008ea:	01 c0                	add    %eax,%eax
c01008ec:	01 d0                	add    %edx,%eax
c01008ee:	c1 e0 02             	shl    $0x2,%eax
c01008f1:	89 c2                	mov    %eax,%edx
c01008f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008f6:	01 d0                	add    %edx,%eax
c01008f8:	8b 10                	mov    (%eax),%edx
c01008fa:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01008fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100900:	29 c1                	sub    %eax,%ecx
c0100902:	89 c8                	mov    %ecx,%eax
c0100904:	39 c2                	cmp    %eax,%edx
c0100906:	73 21                	jae    c0100929 <debuginfo_eip+0x3da>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0100908:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010090b:	89 c2                	mov    %eax,%edx
c010090d:	89 d0                	mov    %edx,%eax
c010090f:	01 c0                	add    %eax,%eax
c0100911:	01 d0                	add    %edx,%eax
c0100913:	c1 e0 02             	shl    $0x2,%eax
c0100916:	89 c2                	mov    %eax,%edx
c0100918:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010091b:	01 d0                	add    %edx,%eax
c010091d:	8b 10                	mov    (%eax),%edx
c010091f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100922:	01 c2                	add    %eax,%edx
c0100924:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100927:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100929:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010092c:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010092f:	39 c2                	cmp    %eax,%edx
c0100931:	7d 4a                	jge    c010097d <debuginfo_eip+0x42e>
        for (lline = lfun + 1;
c0100933:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100936:	83 c0 01             	add    $0x1,%eax
c0100939:	89 45 cc             	mov    %eax,-0x34(%ebp)
c010093c:	eb 18                	jmp    c0100956 <debuginfo_eip+0x407>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c010093e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100941:	8b 40 14             	mov    0x14(%eax),%eax
c0100944:	8d 50 01             	lea    0x1(%eax),%edx
c0100947:	8b 45 0c             	mov    0xc(%ebp),%eax
c010094a:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c010094d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100950:	83 c0 01             	add    $0x1,%eax
c0100953:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100956:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100959:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c010095c:	39 c2                	cmp    %eax,%edx
c010095e:	7d 1d                	jge    c010097d <debuginfo_eip+0x42e>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100960:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100963:	89 c2                	mov    %eax,%edx
c0100965:	89 d0                	mov    %edx,%eax
c0100967:	01 c0                	add    %eax,%eax
c0100969:	01 d0                	add    %edx,%eax
c010096b:	c1 e0 02             	shl    $0x2,%eax
c010096e:	89 c2                	mov    %eax,%edx
c0100970:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100973:	01 d0                	add    %edx,%eax
c0100975:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100979:	3c a0                	cmp    $0xa0,%al
c010097b:	74 c1                	je     c010093e <debuginfo_eip+0x3ef>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c010097d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100982:	c9                   	leave  
c0100983:	c3                   	ret    

c0100984 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100984:	55                   	push   %ebp
c0100985:	89 e5                	mov    %esp,%ebp
c0100987:	83 ec 18             	sub    $0x18,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c010098a:	c7 04 24 b6 db 10 c0 	movl   $0xc010dbb6,(%esp)
c0100991:	e8 c2 f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100996:	c7 44 24 04 2a 00 10 	movl   $0xc010002a,0x4(%esp)
c010099d:	c0 
c010099e:	c7 04 24 cf db 10 c0 	movl   $0xc010dbcf,(%esp)
c01009a5:	e8 ae f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  etext  0x%08x (phys)\n", etext);
c01009aa:	c7 44 24 04 ef da 10 	movl   $0xc010daef,0x4(%esp)
c01009b1:	c0 
c01009b2:	c7 04 24 e7 db 10 c0 	movl   $0xc010dbe7,(%esp)
c01009b9:	e8 9a f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  edata  0x%08x (phys)\n", edata);
c01009be:	c7 44 24 04 f9 23 1c 	movl   $0xc01c23f9,0x4(%esp)
c01009c5:	c0 
c01009c6:	c7 04 24 ff db 10 c0 	movl   $0xc010dbff,(%esp)
c01009cd:	e8 86 f9 ff ff       	call   c0100358 <cprintf>
    cprintf("  end    0x%08x (phys)\n", end);
c01009d2:	c7 44 24 04 c4 56 1c 	movl   $0xc01c56c4,0x4(%esp)
c01009d9:	c0 
c01009da:	c7 04 24 17 dc 10 c0 	movl   $0xc010dc17,(%esp)
c01009e1:	e8 72 f9 ff ff       	call   c0100358 <cprintf>
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c01009e6:	b8 c4 56 1c c0       	mov    $0xc01c56c4,%eax
c01009eb:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c01009f1:	b8 2a 00 10 c0       	mov    $0xc010002a,%eax
c01009f6:	29 c2                	sub    %eax,%edx
c01009f8:	89 d0                	mov    %edx,%eax
c01009fa:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100a00:	85 c0                	test   %eax,%eax
c0100a02:	0f 48 c2             	cmovs  %edx,%eax
c0100a05:	c1 f8 0a             	sar    $0xa,%eax
c0100a08:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a0c:	c7 04 24 30 dc 10 c0 	movl   $0xc010dc30,(%esp)
c0100a13:	e8 40 f9 ff ff       	call   c0100358 <cprintf>
}
c0100a18:	c9                   	leave  
c0100a19:	c3                   	ret    

c0100a1a <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100a1a:	55                   	push   %ebp
c0100a1b:	89 e5                	mov    %esp,%ebp
c0100a1d:	81 ec 48 01 00 00    	sub    $0x148,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100a23:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100a26:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a2d:	89 04 24             	mov    %eax,(%esp)
c0100a30:	e8 1a fb ff ff       	call   c010054f <debuginfo_eip>
c0100a35:	85 c0                	test   %eax,%eax
c0100a37:	74 15                	je     c0100a4e <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100a39:	8b 45 08             	mov    0x8(%ebp),%eax
c0100a3c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100a40:	c7 04 24 5a dc 10 c0 	movl   $0xc010dc5a,(%esp)
c0100a47:	e8 0c f9 ff ff       	call   c0100358 <cprintf>
c0100a4c:	eb 6d                	jmp    c0100abb <print_debuginfo+0xa1>
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a4e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100a55:	eb 1c                	jmp    c0100a73 <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100a57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100a5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a5d:	01 d0                	add    %edx,%eax
c0100a5f:	0f b6 00             	movzbl (%eax),%eax
c0100a62:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100a68:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100a6b:	01 ca                	add    %ecx,%edx
c0100a6d:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100a6f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100a73:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100a76:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100a79:	7f dc                	jg     c0100a57 <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100a7b:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100a81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a84:	01 d0                	add    %edx,%eax
c0100a86:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100a89:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100a8c:	8b 55 08             	mov    0x8(%ebp),%edx
c0100a8f:	89 d1                	mov    %edx,%ecx
c0100a91:	29 c1                	sub    %eax,%ecx
c0100a93:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100a96:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100a99:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0100a9d:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100aa3:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0100aa7:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100aab:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100aaf:	c7 04 24 76 dc 10 c0 	movl   $0xc010dc76,(%esp)
c0100ab6:	e8 9d f8 ff ff       	call   c0100358 <cprintf>
                fnname, eip - info.eip_fn_addr);
    }
}
c0100abb:	c9                   	leave  
c0100abc:	c3                   	ret    

c0100abd <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100abd:	55                   	push   %ebp
c0100abe:	89 e5                	mov    %esp,%ebp
c0100ac0:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100ac3:	8b 45 04             	mov    0x4(%ebp),%eax
c0100ac6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100ac9:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100acc:	c9                   	leave  
c0100acd:	c3                   	ret    

c0100ace <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100ace:	55                   	push   %ebp
c0100acf:	89 e5                	mov    %esp,%ebp
c0100ad1:	83 ec 38             	sub    $0x38,%esp
}

static inline uint32_t
read_ebp(void) {
    uint32_t ebp;
    asm volatile ("movl %%ebp, %0" : "=r" (ebp));
c0100ad4:	89 e8                	mov    %ebp,%eax
c0100ad6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return ebp;
c0100ad9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */

  uint32_t ebp = read_ebp();
c0100adc:	89 45 f4             	mov    %eax,-0xc(%ebp)
  uint32_t eip = read_eip();
c0100adf:	e8 d9 ff ff ff       	call   c0100abd <read_eip>
c0100ae4:	89 45 f0             	mov    %eax,-0x10(%ebp)

  int i = 0, j;
c0100ae7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
  for (; i<STACKFRAME_DEPTH; ++i) {
c0100aee:	e9 87 00 00 00       	jmp    c0100b7a <print_stackframe+0xac>
      cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
c0100af3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100af6:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100afa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100afd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b01:	c7 04 24 88 dc 10 c0 	movl   $0xc010dc88,(%esp)
c0100b08:	e8 4b f8 ff ff       	call   c0100358 <cprintf>
      for (j=2; j<6; ++j)
c0100b0d:	c7 45 e8 02 00 00 00 	movl   $0x2,-0x18(%ebp)
c0100b14:	eb 25                	jmp    c0100b3b <print_stackframe+0x6d>
          cprintf("0x%08x ", ((uint32_t *) ebp)[j]);
c0100b16:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100b19:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100b20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b23:	01 d0                	add    %edx,%eax
c0100b25:	8b 00                	mov    (%eax),%eax
c0100b27:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100b2b:	c7 04 24 a4 dc 10 c0 	movl   $0xc010dca4,(%esp)
c0100b32:	e8 21 f8 ff ff       	call   c0100358 <cprintf>
  uint32_t eip = read_eip();

  int i = 0, j;
  for (; i<STACKFRAME_DEPTH; ++i) {
      cprintf("ebp:0x%08x eip:0x%08x args:", ebp, eip);
      for (j=2; j<6; ++j)
c0100b37:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
c0100b3b:	83 7d e8 05          	cmpl   $0x5,-0x18(%ebp)
c0100b3f:	7e d5                	jle    c0100b16 <print_stackframe+0x48>
          cprintf("0x%08x ", ((uint32_t *) ebp)[j]);
      cprintf("\n");
c0100b41:	c7 04 24 ac dc 10 c0 	movl   $0xc010dcac,(%esp)
c0100b48:	e8 0b f8 ff ff       	call   c0100358 <cprintf>
      print_debuginfo(eip - 1);
c0100b4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100b50:	83 e8 01             	sub    $0x1,%eax
c0100b53:	89 04 24             	mov    %eax,(%esp)
c0100b56:	e8 bf fe ff ff       	call   c0100a1a <print_debuginfo>
      eip = ((uint32_t *) ebp)[1];
c0100b5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b5e:	83 c0 04             	add    $0x4,%eax
c0100b61:	8b 00                	mov    (%eax),%eax
c0100b63:	89 45 f0             	mov    %eax,-0x10(%ebp)
      ebp = *((uint32_t *) ebp);
c0100b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100b69:	8b 00                	mov    (%eax),%eax
c0100b6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
      if (!ebp) break;
c0100b6e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100b72:	75 02                	jne    c0100b76 <print_stackframe+0xa8>
c0100b74:	eb 0e                	jmp    c0100b84 <print_stackframe+0xb6>

  uint32_t ebp = read_ebp();
  uint32_t eip = read_eip();

  int i = 0, j;
  for (; i<STACKFRAME_DEPTH; ++i) {
c0100b76:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0100b7a:	83 7d ec 13          	cmpl   $0x13,-0x14(%ebp)
c0100b7e:	0f 8e 6f ff ff ff    	jle    c0100af3 <print_stackframe+0x25>
      eip = ((uint32_t *) ebp)[1];
      ebp = *((uint32_t *) ebp);
      if (!ebp) break;
  }

}
c0100b84:	c9                   	leave  
c0100b85:	c3                   	ret    

c0100b86 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100b86:	55                   	push   %ebp
c0100b87:	89 e5                	mov    %esp,%ebp
c0100b89:	83 ec 28             	sub    $0x28,%esp
    int argc = 0;
c0100b8c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100b93:	eb 0c                	jmp    c0100ba1 <parse+0x1b>
            *buf ++ = '\0';
c0100b95:	8b 45 08             	mov    0x8(%ebp),%eax
c0100b98:	8d 50 01             	lea    0x1(%eax),%edx
c0100b9b:	89 55 08             	mov    %edx,0x8(%ebp)
c0100b9e:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100ba1:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ba4:	0f b6 00             	movzbl (%eax),%eax
c0100ba7:	84 c0                	test   %al,%al
c0100ba9:	74 1d                	je     c0100bc8 <parse+0x42>
c0100bab:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bae:	0f b6 00             	movzbl (%eax),%eax
c0100bb1:	0f be c0             	movsbl %al,%eax
c0100bb4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100bb8:	c7 04 24 30 dd 10 c0 	movl   $0xc010dd30,(%esp)
c0100bbf:	e8 e3 cb 00 00       	call   c010d7a7 <strchr>
c0100bc4:	85 c0                	test   %eax,%eax
c0100bc6:	75 cd                	jne    c0100b95 <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100bc8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100bcb:	0f b6 00             	movzbl (%eax),%eax
c0100bce:	84 c0                	test   %al,%al
c0100bd0:	75 02                	jne    c0100bd4 <parse+0x4e>
            break;
c0100bd2:	eb 67                	jmp    c0100c3b <parse+0xb5>
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100bd4:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100bd8:	75 14                	jne    c0100bee <parse+0x68>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100bda:	c7 44 24 04 10 00 00 	movl   $0x10,0x4(%esp)
c0100be1:	00 
c0100be2:	c7 04 24 35 dd 10 c0 	movl   $0xc010dd35,(%esp)
c0100be9:	e8 6a f7 ff ff       	call   c0100358 <cprintf>
        }
        argv[argc ++] = buf;
c0100bee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bf1:	8d 50 01             	lea    0x1(%eax),%edx
c0100bf4:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100bf7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100bfe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100c01:	01 c2                	add    %eax,%edx
c0100c03:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c06:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c08:	eb 04                	jmp    c0100c0e <parse+0x88>
            buf ++;
c0100c0a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100c0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c11:	0f b6 00             	movzbl (%eax),%eax
c0100c14:	84 c0                	test   %al,%al
c0100c16:	74 1d                	je     c0100c35 <parse+0xaf>
c0100c18:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c1b:	0f b6 00             	movzbl (%eax),%eax
c0100c1e:	0f be c0             	movsbl %al,%eax
c0100c21:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c25:	c7 04 24 30 dd 10 c0 	movl   $0xc010dd30,(%esp)
c0100c2c:	e8 76 cb 00 00       	call   c010d7a7 <strchr>
c0100c31:	85 c0                	test   %eax,%eax
c0100c33:	74 d5                	je     c0100c0a <parse+0x84>
            buf ++;
        }
    }
c0100c35:	90                   	nop
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c36:	e9 66 ff ff ff       	jmp    c0100ba1 <parse+0x1b>
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100c3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100c3e:	c9                   	leave  
c0100c3f:	c3                   	ret    

c0100c40 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100c40:	55                   	push   %ebp
c0100c41:	89 e5                	mov    %esp,%ebp
c0100c43:	83 ec 68             	sub    $0x68,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100c46:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100c49:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100c4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c50:	89 04 24             	mov    %eax,(%esp)
c0100c53:	e8 2e ff ff ff       	call   c0100b86 <parse>
c0100c58:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100c5b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100c5f:	75 0a                	jne    c0100c6b <runcmd+0x2b>
        return 0;
c0100c61:	b8 00 00 00 00       	mov    $0x0,%eax
c0100c66:	e9 85 00 00 00       	jmp    c0100cf0 <runcmd+0xb0>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100c6b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100c72:	eb 5c                	jmp    c0100cd0 <runcmd+0x90>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100c74:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100c77:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100c7a:	89 d0                	mov    %edx,%eax
c0100c7c:	01 c0                	add    %eax,%eax
c0100c7e:	01 d0                	add    %edx,%eax
c0100c80:	c1 e0 02             	shl    $0x2,%eax
c0100c83:	05 20 10 13 c0       	add    $0xc0131020,%eax
c0100c88:	8b 00                	mov    (%eax),%eax
c0100c8a:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0100c8e:	89 04 24             	mov    %eax,(%esp)
c0100c91:	e8 72 ca 00 00       	call   c010d708 <strcmp>
c0100c96:	85 c0                	test   %eax,%eax
c0100c98:	75 32                	jne    c0100ccc <runcmd+0x8c>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100c9a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100c9d:	89 d0                	mov    %edx,%eax
c0100c9f:	01 c0                	add    %eax,%eax
c0100ca1:	01 d0                	add    %edx,%eax
c0100ca3:	c1 e0 02             	shl    $0x2,%eax
c0100ca6:	05 20 10 13 c0       	add    $0xc0131020,%eax
c0100cab:	8b 40 08             	mov    0x8(%eax),%eax
c0100cae:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100cb1:	8d 4a ff             	lea    -0x1(%edx),%ecx
c0100cb4:	8b 55 0c             	mov    0xc(%ebp),%edx
c0100cb7:	89 54 24 08          	mov    %edx,0x8(%esp)
c0100cbb:	8d 55 b0             	lea    -0x50(%ebp),%edx
c0100cbe:	83 c2 04             	add    $0x4,%edx
c0100cc1:	89 54 24 04          	mov    %edx,0x4(%esp)
c0100cc5:	89 0c 24             	mov    %ecx,(%esp)
c0100cc8:	ff d0                	call   *%eax
c0100cca:	eb 24                	jmp    c0100cf0 <runcmd+0xb0>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100ccc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100cd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cd3:	83 f8 02             	cmp    $0x2,%eax
c0100cd6:	76 9c                	jbe    c0100c74 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100cd8:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100cdb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100cdf:	c7 04 24 53 dd 10 c0 	movl   $0xc010dd53,(%esp)
c0100ce6:	e8 6d f6 ff ff       	call   c0100358 <cprintf>
    return 0;
c0100ceb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100cf0:	c9                   	leave  
c0100cf1:	c3                   	ret    

c0100cf2 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100cf2:	55                   	push   %ebp
c0100cf3:	89 e5                	mov    %esp,%ebp
c0100cf5:	83 ec 28             	sub    $0x28,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100cf8:	c7 04 24 6c dd 10 c0 	movl   $0xc010dd6c,(%esp)
c0100cff:	e8 54 f6 ff ff       	call   c0100358 <cprintf>
    cprintf("Type 'help' for a list of commands.\n");
c0100d04:	c7 04 24 94 dd 10 c0 	movl   $0xc010dd94,(%esp)
c0100d0b:	e8 48 f6 ff ff       	call   c0100358 <cprintf>

    if (tf != NULL) {
c0100d10:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100d14:	74 0b                	je     c0100d21 <kmonitor+0x2f>
        print_trapframe(tf);
c0100d16:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d19:	89 04 24             	mov    %eax,(%esp)
c0100d1c:	e8 cd 16 00 00       	call   c01023ee <print_trapframe>
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100d21:	c7 04 24 b9 dd 10 c0 	movl   $0xc010ddb9,(%esp)
c0100d28:	e8 22 f5 ff ff       	call   c010024f <readline>
c0100d2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100d30:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100d34:	74 18                	je     c0100d4e <kmonitor+0x5c>
            if (runcmd(buf, tf) < 0) {
c0100d36:	8b 45 08             	mov    0x8(%ebp),%eax
c0100d39:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d40:	89 04 24             	mov    %eax,(%esp)
c0100d43:	e8 f8 fe ff ff       	call   c0100c40 <runcmd>
c0100d48:	85 c0                	test   %eax,%eax
c0100d4a:	79 02                	jns    c0100d4e <kmonitor+0x5c>
                break;
c0100d4c:	eb 02                	jmp    c0100d50 <kmonitor+0x5e>
            }
        }
    }
c0100d4e:	eb d1                	jmp    c0100d21 <kmonitor+0x2f>
}
c0100d50:	c9                   	leave  
c0100d51:	c3                   	ret    

c0100d52 <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100d52:	55                   	push   %ebp
c0100d53:	89 e5                	mov    %esp,%ebp
c0100d55:	83 ec 28             	sub    $0x28,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d58:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d5f:	eb 3f                	jmp    c0100da0 <mon_help+0x4e>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100d61:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d64:	89 d0                	mov    %edx,%eax
c0100d66:	01 c0                	add    %eax,%eax
c0100d68:	01 d0                	add    %edx,%eax
c0100d6a:	c1 e0 02             	shl    $0x2,%eax
c0100d6d:	05 20 10 13 c0       	add    $0xc0131020,%eax
c0100d72:	8b 48 04             	mov    0x4(%eax),%ecx
c0100d75:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d78:	89 d0                	mov    %edx,%eax
c0100d7a:	01 c0                	add    %eax,%eax
c0100d7c:	01 d0                	add    %edx,%eax
c0100d7e:	c1 e0 02             	shl    $0x2,%eax
c0100d81:	05 20 10 13 c0       	add    $0xc0131020,%eax
c0100d86:	8b 00                	mov    (%eax),%eax
c0100d88:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0100d8c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100d90:	c7 04 24 bd dd 10 c0 	movl   $0xc010ddbd,(%esp)
c0100d97:	e8 bc f5 ff ff       	call   c0100358 <cprintf>

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d9c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100da0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100da3:	83 f8 02             	cmp    $0x2,%eax
c0100da6:	76 b9                	jbe    c0100d61 <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100da8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dad:	c9                   	leave  
c0100dae:	c3                   	ret    

c0100daf <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100daf:	55                   	push   %ebp
c0100db0:	89 e5                	mov    %esp,%ebp
c0100db2:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100db5:	e8 ca fb ff ff       	call   c0100984 <print_kerninfo>
    return 0;
c0100dba:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dbf:	c9                   	leave  
c0100dc0:	c3                   	ret    

c0100dc1 <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100dc1:	55                   	push   %ebp
c0100dc2:	89 e5                	mov    %esp,%ebp
c0100dc4:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100dc7:	e8 02 fd ff ff       	call   c0100ace <print_stackframe>
    return 0;
c0100dcc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100dd1:	c9                   	leave  
c0100dd2:	c3                   	ret    

c0100dd3 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c0100dd3:	55                   	push   %ebp
c0100dd4:	89 e5                	mov    %esp,%ebp
c0100dd6:	83 ec 28             	sub    $0x28,%esp
    if (is_panic) {
c0100dd9:	a1 20 28 1c c0       	mov    0xc01c2820,%eax
c0100dde:	85 c0                	test   %eax,%eax
c0100de0:	74 02                	je     c0100de4 <__panic+0x11>
        goto panic_dead;
c0100de2:	eb 48                	jmp    c0100e2c <__panic+0x59>
    }
    is_panic = 1;
c0100de4:	c7 05 20 28 1c c0 01 	movl   $0x1,0xc01c2820
c0100deb:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c0100dee:	8d 45 14             	lea    0x14(%ebp),%eax
c0100df1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100df4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100df7:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100dfb:	8b 45 08             	mov    0x8(%ebp),%eax
c0100dfe:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e02:	c7 04 24 c6 dd 10 c0 	movl   $0xc010ddc6,(%esp)
c0100e09:	e8 4a f5 ff ff       	call   c0100358 <cprintf>
    vcprintf(fmt, ap);
c0100e0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e11:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e15:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e18:	89 04 24             	mov    %eax,(%esp)
c0100e1b:	e8 05 f5 ff ff       	call   c0100325 <vcprintf>
    cprintf("\n");
c0100e20:	c7 04 24 e2 dd 10 c0 	movl   $0xc010dde2,(%esp)
c0100e27:	e8 2c f5 ff ff       	call   c0100358 <cprintf>
    va_end(ap);

panic_dead:
    intr_disable();
c0100e2c:	e8 fa 11 00 00       	call   c010202b <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100e31:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100e38:	e8 b5 fe ff ff       	call   c0100cf2 <kmonitor>
    }
c0100e3d:	eb f2                	jmp    c0100e31 <__panic+0x5e>

c0100e3f <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100e3f:	55                   	push   %ebp
c0100e40:	89 e5                	mov    %esp,%ebp
c0100e42:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    va_start(ap, fmt);
c0100e45:	8d 45 14             	lea    0x14(%ebp),%eax
c0100e48:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100e4b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100e4e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0100e52:	8b 45 08             	mov    0x8(%ebp),%eax
c0100e55:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e59:	c7 04 24 e4 dd 10 c0 	movl   $0xc010dde4,(%esp)
c0100e60:	e8 f3 f4 ff ff       	call   c0100358 <cprintf>
    vcprintf(fmt, ap);
c0100e65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e68:	89 44 24 04          	mov    %eax,0x4(%esp)
c0100e6c:	8b 45 10             	mov    0x10(%ebp),%eax
c0100e6f:	89 04 24             	mov    %eax,(%esp)
c0100e72:	e8 ae f4 ff ff       	call   c0100325 <vcprintf>
    cprintf("\n");
c0100e77:	c7 04 24 e2 dd 10 c0 	movl   $0xc010dde2,(%esp)
c0100e7e:	e8 d5 f4 ff ff       	call   c0100358 <cprintf>
    va_end(ap);
}
c0100e83:	c9                   	leave  
c0100e84:	c3                   	ret    

c0100e85 <is_kernel_panic>:

bool
is_kernel_panic(void) {
c0100e85:	55                   	push   %ebp
c0100e86:	89 e5                	mov    %esp,%ebp
    return is_panic;
c0100e88:	a1 20 28 1c c0       	mov    0xc01c2820,%eax
}
c0100e8d:	5d                   	pop    %ebp
c0100e8e:	c3                   	ret    

c0100e8f <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c0100e8f:	55                   	push   %ebp
c0100e90:	89 e5                	mov    %esp,%ebp
c0100e92:	83 ec 28             	sub    $0x28,%esp
c0100e95:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c0100e9b:	c6 45 f5 34          	movb   $0x34,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100e9f:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0100ea3:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0100ea7:	ee                   	out    %al,(%dx)
c0100ea8:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c0100eae:	c6 45 f1 9c          	movb   $0x9c,-0xf(%ebp)
c0100eb2:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100eb6:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100eba:	ee                   	out    %al,(%dx)
c0100ebb:	66 c7 45 ee 40 00    	movw   $0x40,-0x12(%ebp)
c0100ec1:	c6 45 ed 2e          	movb   $0x2e,-0x13(%ebp)
c0100ec5:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0100ec9:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0100ecd:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0100ece:	c7 05 d8 54 1c c0 00 	movl   $0x0,0xc01c54d8
c0100ed5:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0100ed8:	c7 04 24 02 de 10 c0 	movl   $0xc010de02,(%esp)
c0100edf:	e8 74 f4 ff ff       	call   c0100358 <cprintf>
    pic_enable(IRQ_TIMER);
c0100ee4:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0100eeb:	e8 99 11 00 00       	call   c0102089 <pic_enable>
}
c0100ef0:	c9                   	leave  
c0100ef1:	c3                   	ret    

c0100ef2 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0100ef2:	55                   	push   %ebp
c0100ef3:	89 e5                	mov    %esp,%ebp
c0100ef5:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0100ef8:	9c                   	pushf  
c0100ef9:	58                   	pop    %eax
c0100efa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0100efd:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0100f00:	25 00 02 00 00       	and    $0x200,%eax
c0100f05:	85 c0                	test   %eax,%eax
c0100f07:	74 0c                	je     c0100f15 <__intr_save+0x23>
        intr_disable();
c0100f09:	e8 1d 11 00 00       	call   c010202b <intr_disable>
        return 1;
c0100f0e:	b8 01 00 00 00       	mov    $0x1,%eax
c0100f13:	eb 05                	jmp    c0100f1a <__intr_save+0x28>
    }
    return 0;
c0100f15:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100f1a:	c9                   	leave  
c0100f1b:	c3                   	ret    

c0100f1c <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0100f1c:	55                   	push   %ebp
c0100f1d:	89 e5                	mov    %esp,%ebp
c0100f1f:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0100f22:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100f26:	74 05                	je     c0100f2d <__intr_restore+0x11>
        intr_enable();
c0100f28:	e8 f8 10 00 00       	call   c0102025 <intr_enable>
    }
}
c0100f2d:	c9                   	leave  
c0100f2e:	c3                   	ret    

c0100f2f <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0100f2f:	55                   	push   %ebp
c0100f30:	89 e5                	mov    %esp,%ebp
c0100f32:	83 ec 10             	sub    $0x10,%esp
c0100f35:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100f3b:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0100f3f:	89 c2                	mov    %eax,%edx
c0100f41:	ec                   	in     (%dx),%al
c0100f42:	88 45 fd             	mov    %al,-0x3(%ebp)
c0100f45:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c0100f4b:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0100f4f:	89 c2                	mov    %eax,%edx
c0100f51:	ec                   	in     (%dx),%al
c0100f52:	88 45 f9             	mov    %al,-0x7(%ebp)
c0100f55:	66 c7 45 f6 84 00    	movw   $0x84,-0xa(%ebp)
c0100f5b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f5f:	89 c2                	mov    %eax,%edx
c0100f61:	ec                   	in     (%dx),%al
c0100f62:	88 45 f5             	mov    %al,-0xb(%ebp)
c0100f65:	66 c7 45 f2 84 00    	movw   $0x84,-0xe(%ebp)
c0100f6b:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0100f6f:	89 c2                	mov    %eax,%edx
c0100f71:	ec                   	in     (%dx),%al
c0100f72:	88 45 f1             	mov    %al,-0xf(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c0100f75:	c9                   	leave  
c0100f76:	c3                   	ret    

c0100f77 <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c0100f77:	55                   	push   %ebp
c0100f78:	89 e5                	mov    %esp,%ebp
c0100f7a:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c0100f7d:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c0100f84:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100f87:	0f b7 00             	movzwl (%eax),%eax
c0100f8a:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c0100f8e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100f91:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c0100f96:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100f99:	0f b7 00             	movzwl (%eax),%eax
c0100f9c:	66 3d 5a a5          	cmp    $0xa55a,%ax
c0100fa0:	74 12                	je     c0100fb4 <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c0100fa2:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c0100fa9:	66 c7 05 46 28 1c c0 	movw   $0x3b4,0xc01c2846
c0100fb0:	b4 03 
c0100fb2:	eb 13                	jmp    c0100fc7 <cga_init+0x50>
    } else {
        *cp = was;
c0100fb4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100fb7:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0100fbb:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c0100fbe:	66 c7 05 46 28 1c c0 	movw   $0x3d4,0xc01c2846
c0100fc5:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c0100fc7:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
c0100fce:	0f b7 c0             	movzwl %ax,%eax
c0100fd1:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0100fd5:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100fd9:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0100fdd:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0100fe1:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0100fe2:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
c0100fe9:	83 c0 01             	add    $0x1,%eax
c0100fec:	0f b7 c0             	movzwl %ax,%eax
c0100fef:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100ff3:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c0100ff7:	89 c2                	mov    %eax,%edx
c0100ff9:	ec                   	in     (%dx),%al
c0100ffa:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0100ffd:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101001:	0f b6 c0             	movzbl %al,%eax
c0101004:	c1 e0 08             	shl    $0x8,%eax
c0101007:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c010100a:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
c0101011:	0f b7 c0             	movzwl %ax,%eax
c0101014:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101018:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010101c:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101020:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101024:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c0101025:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
c010102c:	83 c0 01             	add    $0x1,%eax
c010102f:	0f b7 c0             	movzwl %ax,%eax
c0101032:	66 89 45 e6          	mov    %ax,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101036:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c010103a:	89 c2                	mov    %eax,%edx
c010103c:	ec                   	in     (%dx),%al
c010103d:	88 45 e5             	mov    %al,-0x1b(%ebp)
    return data;
c0101040:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101044:	0f b6 c0             	movzbl %al,%eax
c0101047:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c010104a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010104d:	a3 40 28 1c c0       	mov    %eax,0xc01c2840
    crt_pos = pos;
c0101052:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101055:	66 a3 44 28 1c c0    	mov    %ax,0xc01c2844
}
c010105b:	c9                   	leave  
c010105c:	c3                   	ret    

c010105d <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c010105d:	55                   	push   %ebp
c010105e:	89 e5                	mov    %esp,%ebp
c0101060:	83 ec 48             	sub    $0x48,%esp
c0101063:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c0101069:	c6 45 f5 00          	movb   $0x0,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010106d:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c0101071:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101075:	ee                   	out    %al,(%dx)
c0101076:	66 c7 45 f2 fb 03    	movw   $0x3fb,-0xe(%ebp)
c010107c:	c6 45 f1 80          	movb   $0x80,-0xf(%ebp)
c0101080:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101084:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101088:	ee                   	out    %al,(%dx)
c0101089:	66 c7 45 ee f8 03    	movw   $0x3f8,-0x12(%ebp)
c010108f:	c6 45 ed 0c          	movb   $0xc,-0x13(%ebp)
c0101093:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101097:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010109b:	ee                   	out    %al,(%dx)
c010109c:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c01010a2:	c6 45 e9 00          	movb   $0x0,-0x17(%ebp)
c01010a6:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c01010aa:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c01010ae:	ee                   	out    %al,(%dx)
c01010af:	66 c7 45 e6 fb 03    	movw   $0x3fb,-0x1a(%ebp)
c01010b5:	c6 45 e5 03          	movb   $0x3,-0x1b(%ebp)
c01010b9:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01010bd:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01010c1:	ee                   	out    %al,(%dx)
c01010c2:	66 c7 45 e2 fc 03    	movw   $0x3fc,-0x1e(%ebp)
c01010c8:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
c01010cc:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c01010d0:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01010d4:	ee                   	out    %al,(%dx)
c01010d5:	66 c7 45 de f9 03    	movw   $0x3f9,-0x22(%ebp)
c01010db:	c6 45 dd 01          	movb   $0x1,-0x23(%ebp)
c01010df:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01010e3:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c01010e7:	ee                   	out    %al,(%dx)
c01010e8:	66 c7 45 da fd 03    	movw   $0x3fd,-0x26(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01010ee:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
c01010f2:	89 c2                	mov    %eax,%edx
c01010f4:	ec                   	in     (%dx),%al
c01010f5:	88 45 d9             	mov    %al,-0x27(%ebp)
    return data;
c01010f8:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c01010fc:	3c ff                	cmp    $0xff,%al
c01010fe:	0f 95 c0             	setne  %al
c0101101:	0f b6 c0             	movzbl %al,%eax
c0101104:	a3 48 28 1c c0       	mov    %eax,0xc01c2848
c0101109:	66 c7 45 d6 fa 03    	movw   $0x3fa,-0x2a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010110f:	0f b7 45 d6          	movzwl -0x2a(%ebp),%eax
c0101113:	89 c2                	mov    %eax,%edx
c0101115:	ec                   	in     (%dx),%al
c0101116:	88 45 d5             	mov    %al,-0x2b(%ebp)
c0101119:	66 c7 45 d2 f8 03    	movw   $0x3f8,-0x2e(%ebp)
c010111f:	0f b7 45 d2          	movzwl -0x2e(%ebp),%eax
c0101123:	89 c2                	mov    %eax,%edx
c0101125:	ec                   	in     (%dx),%al
c0101126:	88 45 d1             	mov    %al,-0x2f(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c0101129:	a1 48 28 1c c0       	mov    0xc01c2848,%eax
c010112e:	85 c0                	test   %eax,%eax
c0101130:	74 0c                	je     c010113e <serial_init+0xe1>
        pic_enable(IRQ_COM1);
c0101132:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c0101139:	e8 4b 0f 00 00       	call   c0102089 <pic_enable>
    }
}
c010113e:	c9                   	leave  
c010113f:	c3                   	ret    

c0101140 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c0101140:	55                   	push   %ebp
c0101141:	89 e5                	mov    %esp,%ebp
c0101143:	83 ec 20             	sub    $0x20,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101146:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c010114d:	eb 09                	jmp    c0101158 <lpt_putc_sub+0x18>
        delay();
c010114f:	e8 db fd ff ff       	call   c0100f2f <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c0101154:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101158:	66 c7 45 fa 79 03    	movw   $0x379,-0x6(%ebp)
c010115e:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101162:	89 c2                	mov    %eax,%edx
c0101164:	ec                   	in     (%dx),%al
c0101165:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0101168:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c010116c:	84 c0                	test   %al,%al
c010116e:	78 09                	js     c0101179 <lpt_putc_sub+0x39>
c0101170:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101177:	7e d6                	jle    c010114f <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c0101179:	8b 45 08             	mov    0x8(%ebp),%eax
c010117c:	0f b6 c0             	movzbl %al,%eax
c010117f:	66 c7 45 f6 78 03    	movw   $0x378,-0xa(%ebp)
c0101185:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101188:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010118c:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101190:	ee                   	out    %al,(%dx)
c0101191:	66 c7 45 f2 7a 03    	movw   $0x37a,-0xe(%ebp)
c0101197:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c010119b:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010119f:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01011a3:	ee                   	out    %al,(%dx)
c01011a4:	66 c7 45 ee 7a 03    	movw   $0x37a,-0x12(%ebp)
c01011aa:	c6 45 ed 08          	movb   $0x8,-0x13(%ebp)
c01011ae:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c01011b2:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c01011b6:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c01011b7:	c9                   	leave  
c01011b8:	c3                   	ret    

c01011b9 <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c01011b9:	55                   	push   %ebp
c01011ba:	89 e5                	mov    %esp,%ebp
c01011bc:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c01011bf:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c01011c3:	74 0d                	je     c01011d2 <lpt_putc+0x19>
        lpt_putc_sub(c);
c01011c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01011c8:	89 04 24             	mov    %eax,(%esp)
c01011cb:	e8 70 ff ff ff       	call   c0101140 <lpt_putc_sub>
c01011d0:	eb 24                	jmp    c01011f6 <lpt_putc+0x3d>
    }
    else {
        lpt_putc_sub('\b');
c01011d2:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01011d9:	e8 62 ff ff ff       	call   c0101140 <lpt_putc_sub>
        lpt_putc_sub(' ');
c01011de:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c01011e5:	e8 56 ff ff ff       	call   c0101140 <lpt_putc_sub>
        lpt_putc_sub('\b');
c01011ea:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c01011f1:	e8 4a ff ff ff       	call   c0101140 <lpt_putc_sub>
    }
}
c01011f6:	c9                   	leave  
c01011f7:	c3                   	ret    

c01011f8 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c01011f8:	55                   	push   %ebp
c01011f9:	89 e5                	mov    %esp,%ebp
c01011fb:	53                   	push   %ebx
c01011fc:	83 ec 34             	sub    $0x34,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c01011ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0101202:	b0 00                	mov    $0x0,%al
c0101204:	85 c0                	test   %eax,%eax
c0101206:	75 07                	jne    c010120f <cga_putc+0x17>
        c |= 0x0700;
c0101208:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c010120f:	8b 45 08             	mov    0x8(%ebp),%eax
c0101212:	0f b6 c0             	movzbl %al,%eax
c0101215:	83 f8 0a             	cmp    $0xa,%eax
c0101218:	74 4c                	je     c0101266 <cga_putc+0x6e>
c010121a:	83 f8 0d             	cmp    $0xd,%eax
c010121d:	74 57                	je     c0101276 <cga_putc+0x7e>
c010121f:	83 f8 08             	cmp    $0x8,%eax
c0101222:	0f 85 88 00 00 00    	jne    c01012b0 <cga_putc+0xb8>
    case '\b':
        if (crt_pos > 0) {
c0101228:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c010122f:	66 85 c0             	test   %ax,%ax
c0101232:	74 30                	je     c0101264 <cga_putc+0x6c>
            crt_pos --;
c0101234:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c010123b:	83 e8 01             	sub    $0x1,%eax
c010123e:	66 a3 44 28 1c c0    	mov    %ax,0xc01c2844
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0101244:	a1 40 28 1c c0       	mov    0xc01c2840,%eax
c0101249:	0f b7 15 44 28 1c c0 	movzwl 0xc01c2844,%edx
c0101250:	0f b7 d2             	movzwl %dx,%edx
c0101253:	01 d2                	add    %edx,%edx
c0101255:	01 c2                	add    %eax,%edx
c0101257:	8b 45 08             	mov    0x8(%ebp),%eax
c010125a:	b0 00                	mov    $0x0,%al
c010125c:	83 c8 20             	or     $0x20,%eax
c010125f:	66 89 02             	mov    %ax,(%edx)
        }
        break;
c0101262:	eb 72                	jmp    c01012d6 <cga_putc+0xde>
c0101264:	eb 70                	jmp    c01012d6 <cga_putc+0xde>
    case '\n':
        crt_pos += CRT_COLS;
c0101266:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c010126d:	83 c0 50             	add    $0x50,%eax
c0101270:	66 a3 44 28 1c c0    	mov    %ax,0xc01c2844
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0101276:	0f b7 1d 44 28 1c c0 	movzwl 0xc01c2844,%ebx
c010127d:	0f b7 0d 44 28 1c c0 	movzwl 0xc01c2844,%ecx
c0101284:	0f b7 c1             	movzwl %cx,%eax
c0101287:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c010128d:	c1 e8 10             	shr    $0x10,%eax
c0101290:	89 c2                	mov    %eax,%edx
c0101292:	66 c1 ea 06          	shr    $0x6,%dx
c0101296:	89 d0                	mov    %edx,%eax
c0101298:	c1 e0 02             	shl    $0x2,%eax
c010129b:	01 d0                	add    %edx,%eax
c010129d:	c1 e0 04             	shl    $0x4,%eax
c01012a0:	29 c1                	sub    %eax,%ecx
c01012a2:	89 ca                	mov    %ecx,%edx
c01012a4:	89 d8                	mov    %ebx,%eax
c01012a6:	29 d0                	sub    %edx,%eax
c01012a8:	66 a3 44 28 1c c0    	mov    %ax,0xc01c2844
        break;
c01012ae:	eb 26                	jmp    c01012d6 <cga_putc+0xde>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c01012b0:	8b 0d 40 28 1c c0    	mov    0xc01c2840,%ecx
c01012b6:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c01012bd:	8d 50 01             	lea    0x1(%eax),%edx
c01012c0:	66 89 15 44 28 1c c0 	mov    %dx,0xc01c2844
c01012c7:	0f b7 c0             	movzwl %ax,%eax
c01012ca:	01 c0                	add    %eax,%eax
c01012cc:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c01012cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01012d2:	66 89 02             	mov    %ax,(%edx)
        break;
c01012d5:	90                   	nop
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c01012d6:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c01012dd:	66 3d cf 07          	cmp    $0x7cf,%ax
c01012e1:	76 5b                	jbe    c010133e <cga_putc+0x146>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c01012e3:	a1 40 28 1c c0       	mov    0xc01c2840,%eax
c01012e8:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c01012ee:	a1 40 28 1c c0       	mov    0xc01c2840,%eax
c01012f3:	c7 44 24 08 00 0f 00 	movl   $0xf00,0x8(%esp)
c01012fa:	00 
c01012fb:	89 54 24 04          	mov    %edx,0x4(%esp)
c01012ff:	89 04 24             	mov    %eax,(%esp)
c0101302:	e8 9e c6 00 00       	call   c010d9a5 <memmove>
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101307:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c010130e:	eb 15                	jmp    c0101325 <cga_putc+0x12d>
            crt_buf[i] = 0x0700 | ' ';
c0101310:	a1 40 28 1c c0       	mov    0xc01c2840,%eax
c0101315:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101318:	01 d2                	add    %edx,%edx
c010131a:	01 d0                	add    %edx,%eax
c010131c:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101321:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101325:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c010132c:	7e e2                	jle    c0101310 <cga_putc+0x118>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c010132e:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c0101335:	83 e8 50             	sub    $0x50,%eax
c0101338:	66 a3 44 28 1c c0    	mov    %ax,0xc01c2844
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c010133e:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
c0101345:	0f b7 c0             	movzwl %ax,%eax
c0101348:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c010134c:	c6 45 f1 0e          	movb   $0xe,-0xf(%ebp)
c0101350:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101354:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101358:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101359:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c0101360:	66 c1 e8 08          	shr    $0x8,%ax
c0101364:	0f b6 c0             	movzbl %al,%eax
c0101367:	0f b7 15 46 28 1c c0 	movzwl 0xc01c2846,%edx
c010136e:	83 c2 01             	add    $0x1,%edx
c0101371:	0f b7 d2             	movzwl %dx,%edx
c0101374:	66 89 55 ee          	mov    %dx,-0x12(%ebp)
c0101378:	88 45 ed             	mov    %al,-0x13(%ebp)
c010137b:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c010137f:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101383:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0101384:	0f b7 05 46 28 1c c0 	movzwl 0xc01c2846,%eax
c010138b:	0f b7 c0             	movzwl %ax,%eax
c010138e:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101392:	c6 45 e9 0f          	movb   $0xf,-0x17(%ebp)
c0101396:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c010139a:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010139e:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c010139f:	0f b7 05 44 28 1c c0 	movzwl 0xc01c2844,%eax
c01013a6:	0f b6 c0             	movzbl %al,%eax
c01013a9:	0f b7 15 46 28 1c c0 	movzwl 0xc01c2846,%edx
c01013b0:	83 c2 01             	add    $0x1,%edx
c01013b3:	0f b7 d2             	movzwl %dx,%edx
c01013b6:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c01013ba:	88 45 e5             	mov    %al,-0x1b(%ebp)
c01013bd:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c01013c1:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01013c5:	ee                   	out    %al,(%dx)
}
c01013c6:	83 c4 34             	add    $0x34,%esp
c01013c9:	5b                   	pop    %ebx
c01013ca:	5d                   	pop    %ebp
c01013cb:	c3                   	ret    

c01013cc <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c01013cc:	55                   	push   %ebp
c01013cd:	89 e5                	mov    %esp,%ebp
c01013cf:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01013d2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01013d9:	eb 09                	jmp    c01013e4 <serial_putc_sub+0x18>
        delay();
c01013db:	e8 4f fb ff ff       	call   c0100f2f <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c01013e0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01013e4:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01013ea:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01013ee:	89 c2                	mov    %eax,%edx
c01013f0:	ec                   	in     (%dx),%al
c01013f1:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01013f4:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01013f8:	0f b6 c0             	movzbl %al,%eax
c01013fb:	83 e0 20             	and    $0x20,%eax
c01013fe:	85 c0                	test   %eax,%eax
c0101400:	75 09                	jne    c010140b <serial_putc_sub+0x3f>
c0101402:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101409:	7e d0                	jle    c01013db <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c010140b:	8b 45 08             	mov    0x8(%ebp),%eax
c010140e:	0f b6 c0             	movzbl %al,%eax
c0101411:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
c0101417:	88 45 f5             	mov    %al,-0xb(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010141a:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c010141e:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0101422:	ee                   	out    %al,(%dx)
}
c0101423:	c9                   	leave  
c0101424:	c3                   	ret    

c0101425 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101425:	55                   	push   %ebp
c0101426:	89 e5                	mov    %esp,%ebp
c0101428:	83 ec 04             	sub    $0x4,%esp
    if (c != '\b') {
c010142b:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c010142f:	74 0d                	je     c010143e <serial_putc+0x19>
        serial_putc_sub(c);
c0101431:	8b 45 08             	mov    0x8(%ebp),%eax
c0101434:	89 04 24             	mov    %eax,(%esp)
c0101437:	e8 90 ff ff ff       	call   c01013cc <serial_putc_sub>
c010143c:	eb 24                	jmp    c0101462 <serial_putc+0x3d>
    }
    else {
        serial_putc_sub('\b');
c010143e:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c0101445:	e8 82 ff ff ff       	call   c01013cc <serial_putc_sub>
        serial_putc_sub(' ');
c010144a:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c0101451:	e8 76 ff ff ff       	call   c01013cc <serial_putc_sub>
        serial_putc_sub('\b');
c0101456:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
c010145d:	e8 6a ff ff ff       	call   c01013cc <serial_putc_sub>
    }
}
c0101462:	c9                   	leave  
c0101463:	c3                   	ret    

c0101464 <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0101464:	55                   	push   %ebp
c0101465:	89 e5                	mov    %esp,%ebp
c0101467:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c010146a:	eb 33                	jmp    c010149f <cons_intr+0x3b>
        if (c != 0) {
c010146c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101470:	74 2d                	je     c010149f <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101472:	a1 64 2a 1c c0       	mov    0xc01c2a64,%eax
c0101477:	8d 50 01             	lea    0x1(%eax),%edx
c010147a:	89 15 64 2a 1c c0    	mov    %edx,0xc01c2a64
c0101480:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101483:	88 90 60 28 1c c0    	mov    %dl,-0x3fe3d7a0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101489:	a1 64 2a 1c c0       	mov    0xc01c2a64,%eax
c010148e:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101493:	75 0a                	jne    c010149f <cons_intr+0x3b>
                cons.wpos = 0;
c0101495:	c7 05 64 2a 1c c0 00 	movl   $0x0,0xc01c2a64
c010149c:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c010149f:	8b 45 08             	mov    0x8(%ebp),%eax
c01014a2:	ff d0                	call   *%eax
c01014a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01014a7:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c01014ab:	75 bf                	jne    c010146c <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c01014ad:	c9                   	leave  
c01014ae:	c3                   	ret    

c01014af <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c01014af:	55                   	push   %ebp
c01014b0:	89 e5                	mov    %esp,%ebp
c01014b2:	83 ec 10             	sub    $0x10,%esp
c01014b5:	66 c7 45 fa fd 03    	movw   $0x3fd,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014bb:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01014bf:	89 c2                	mov    %eax,%edx
c01014c1:	ec                   	in     (%dx),%al
c01014c2:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01014c5:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c01014c9:	0f b6 c0             	movzbl %al,%eax
c01014cc:	83 e0 01             	and    $0x1,%eax
c01014cf:	85 c0                	test   %eax,%eax
c01014d1:	75 07                	jne    c01014da <serial_proc_data+0x2b>
        return -1;
c01014d3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01014d8:	eb 2a                	jmp    c0101504 <serial_proc_data+0x55>
c01014da:	66 c7 45 f6 f8 03    	movw   $0x3f8,-0xa(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01014e0:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01014e4:	89 c2                	mov    %eax,%edx
c01014e6:	ec                   	in     (%dx),%al
c01014e7:	88 45 f5             	mov    %al,-0xb(%ebp)
    return data;
c01014ea:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c01014ee:	0f b6 c0             	movzbl %al,%eax
c01014f1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c01014f4:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c01014f8:	75 07                	jne    c0101501 <serial_proc_data+0x52>
        c = '\b';
c01014fa:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101501:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101504:	c9                   	leave  
c0101505:	c3                   	ret    

c0101506 <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101506:	55                   	push   %ebp
c0101507:	89 e5                	mov    %esp,%ebp
c0101509:	83 ec 18             	sub    $0x18,%esp
    if (serial_exists) {
c010150c:	a1 48 28 1c c0       	mov    0xc01c2848,%eax
c0101511:	85 c0                	test   %eax,%eax
c0101513:	74 0c                	je     c0101521 <serial_intr+0x1b>
        cons_intr(serial_proc_data);
c0101515:	c7 04 24 af 14 10 c0 	movl   $0xc01014af,(%esp)
c010151c:	e8 43 ff ff ff       	call   c0101464 <cons_intr>
    }
}
c0101521:	c9                   	leave  
c0101522:	c3                   	ret    

c0101523 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c0101523:	55                   	push   %ebp
c0101524:	89 e5                	mov    %esp,%ebp
c0101526:	83 ec 38             	sub    $0x38,%esp
c0101529:	66 c7 45 f0 64 00    	movw   $0x64,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010152f:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101533:	89 c2                	mov    %eax,%edx
c0101535:	ec                   	in     (%dx),%al
c0101536:	88 45 ef             	mov    %al,-0x11(%ebp)
    return data;
c0101539:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c010153d:	0f b6 c0             	movzbl %al,%eax
c0101540:	83 e0 01             	and    $0x1,%eax
c0101543:	85 c0                	test   %eax,%eax
c0101545:	75 0a                	jne    c0101551 <kbd_proc_data+0x2e>
        return -1;
c0101547:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010154c:	e9 59 01 00 00       	jmp    c01016aa <kbd_proc_data+0x187>
c0101551:	66 c7 45 ec 60 00    	movw   $0x60,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101557:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010155b:	89 c2                	mov    %eax,%edx
c010155d:	ec                   	in     (%dx),%al
c010155e:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101561:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    }

    data = inb(KBDATAP);
c0101565:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c0101568:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c010156c:	75 17                	jne    c0101585 <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c010156e:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c0101573:	83 c8 40             	or     $0x40,%eax
c0101576:	a3 68 2a 1c c0       	mov    %eax,0xc01c2a68
        return 0;
c010157b:	b8 00 00 00 00       	mov    $0x0,%eax
c0101580:	e9 25 01 00 00       	jmp    c01016aa <kbd_proc_data+0x187>
    } else if (data & 0x80) {
c0101585:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101589:	84 c0                	test   %al,%al
c010158b:	79 47                	jns    c01015d4 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c010158d:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c0101592:	83 e0 40             	and    $0x40,%eax
c0101595:	85 c0                	test   %eax,%eax
c0101597:	75 09                	jne    c01015a2 <kbd_proc_data+0x7f>
c0101599:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010159d:	83 e0 7f             	and    $0x7f,%eax
c01015a0:	eb 04                	jmp    c01015a6 <kbd_proc_data+0x83>
c01015a2:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015a6:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c01015a9:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015ad:	0f b6 80 60 10 13 c0 	movzbl -0x3fecefa0(%eax),%eax
c01015b4:	83 c8 40             	or     $0x40,%eax
c01015b7:	0f b6 c0             	movzbl %al,%eax
c01015ba:	f7 d0                	not    %eax
c01015bc:	89 c2                	mov    %eax,%edx
c01015be:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c01015c3:	21 d0                	and    %edx,%eax
c01015c5:	a3 68 2a 1c c0       	mov    %eax,0xc01c2a68
        return 0;
c01015ca:	b8 00 00 00 00       	mov    $0x0,%eax
c01015cf:	e9 d6 00 00 00       	jmp    c01016aa <kbd_proc_data+0x187>
    } else if (shift & E0ESC) {
c01015d4:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c01015d9:	83 e0 40             	and    $0x40,%eax
c01015dc:	85 c0                	test   %eax,%eax
c01015de:	74 11                	je     c01015f1 <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c01015e0:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c01015e4:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c01015e9:	83 e0 bf             	and    $0xffffffbf,%eax
c01015ec:	a3 68 2a 1c c0       	mov    %eax,0xc01c2a68
    }

    shift |= shiftcode[data];
c01015f1:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01015f5:	0f b6 80 60 10 13 c0 	movzbl -0x3fecefa0(%eax),%eax
c01015fc:	0f b6 d0             	movzbl %al,%edx
c01015ff:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c0101604:	09 d0                	or     %edx,%eax
c0101606:	a3 68 2a 1c c0       	mov    %eax,0xc01c2a68
    shift ^= togglecode[data];
c010160b:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c010160f:	0f b6 80 60 11 13 c0 	movzbl -0x3feceea0(%eax),%eax
c0101616:	0f b6 d0             	movzbl %al,%edx
c0101619:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c010161e:	31 d0                	xor    %edx,%eax
c0101620:	a3 68 2a 1c c0       	mov    %eax,0xc01c2a68

    c = charcode[shift & (CTL | SHIFT)][data];
c0101625:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c010162a:	83 e0 03             	and    $0x3,%eax
c010162d:	8b 14 85 60 15 13 c0 	mov    -0x3feceaa0(,%eax,4),%edx
c0101634:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101638:	01 d0                	add    %edx,%eax
c010163a:	0f b6 00             	movzbl (%eax),%eax
c010163d:	0f b6 c0             	movzbl %al,%eax
c0101640:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101643:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c0101648:	83 e0 08             	and    $0x8,%eax
c010164b:	85 c0                	test   %eax,%eax
c010164d:	74 22                	je     c0101671 <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c010164f:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101653:	7e 0c                	jle    c0101661 <kbd_proc_data+0x13e>
c0101655:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101659:	7f 06                	jg     c0101661 <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c010165b:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c010165f:	eb 10                	jmp    c0101671 <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101661:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101665:	7e 0a                	jle    c0101671 <kbd_proc_data+0x14e>
c0101667:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c010166b:	7f 04                	jg     c0101671 <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c010166d:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101671:	a1 68 2a 1c c0       	mov    0xc01c2a68,%eax
c0101676:	f7 d0                	not    %eax
c0101678:	83 e0 06             	and    $0x6,%eax
c010167b:	85 c0                	test   %eax,%eax
c010167d:	75 28                	jne    c01016a7 <kbd_proc_data+0x184>
c010167f:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101686:	75 1f                	jne    c01016a7 <kbd_proc_data+0x184>
        cprintf("Rebooting!\n");
c0101688:	c7 04 24 1d de 10 c0 	movl   $0xc010de1d,(%esp)
c010168f:	e8 c4 ec ff ff       	call   c0100358 <cprintf>
c0101694:	66 c7 45 e8 92 00    	movw   $0x92,-0x18(%ebp)
c010169a:	c6 45 e7 03          	movb   $0x3,-0x19(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010169e:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
c01016a2:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c01016a6:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c01016a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01016aa:	c9                   	leave  
c01016ab:	c3                   	ret    

c01016ac <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c01016ac:	55                   	push   %ebp
c01016ad:	89 e5                	mov    %esp,%ebp
c01016af:	83 ec 18             	sub    $0x18,%esp
    cons_intr(kbd_proc_data);
c01016b2:	c7 04 24 23 15 10 c0 	movl   $0xc0101523,(%esp)
c01016b9:	e8 a6 fd ff ff       	call   c0101464 <cons_intr>
}
c01016be:	c9                   	leave  
c01016bf:	c3                   	ret    

c01016c0 <kbd_init>:

static void
kbd_init(void) {
c01016c0:	55                   	push   %ebp
c01016c1:	89 e5                	mov    %esp,%ebp
c01016c3:	83 ec 18             	sub    $0x18,%esp
    // drain the kbd buffer
    kbd_intr();
c01016c6:	e8 e1 ff ff ff       	call   c01016ac <kbd_intr>
    pic_enable(IRQ_KBD);
c01016cb:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01016d2:	e8 b2 09 00 00       	call   c0102089 <pic_enable>
}
c01016d7:	c9                   	leave  
c01016d8:	c3                   	ret    

c01016d9 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c01016d9:	55                   	push   %ebp
c01016da:	89 e5                	mov    %esp,%ebp
c01016dc:	83 ec 18             	sub    $0x18,%esp
    cga_init();
c01016df:	e8 93 f8 ff ff       	call   c0100f77 <cga_init>
    serial_init();
c01016e4:	e8 74 f9 ff ff       	call   c010105d <serial_init>
    kbd_init();
c01016e9:	e8 d2 ff ff ff       	call   c01016c0 <kbd_init>
    if (!serial_exists) {
c01016ee:	a1 48 28 1c c0       	mov    0xc01c2848,%eax
c01016f3:	85 c0                	test   %eax,%eax
c01016f5:	75 0c                	jne    c0101703 <cons_init+0x2a>
        cprintf("serial port does not exist!!\n");
c01016f7:	c7 04 24 29 de 10 c0 	movl   $0xc010de29,(%esp)
c01016fe:	e8 55 ec ff ff       	call   c0100358 <cprintf>
    }
}
c0101703:	c9                   	leave  
c0101704:	c3                   	ret    

c0101705 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0101705:	55                   	push   %ebp
c0101706:	89 e5                	mov    %esp,%ebp
c0101708:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010170b:	e8 e2 f7 ff ff       	call   c0100ef2 <__intr_save>
c0101710:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0101713:	8b 45 08             	mov    0x8(%ebp),%eax
c0101716:	89 04 24             	mov    %eax,(%esp)
c0101719:	e8 9b fa ff ff       	call   c01011b9 <lpt_putc>
        cga_putc(c);
c010171e:	8b 45 08             	mov    0x8(%ebp),%eax
c0101721:	89 04 24             	mov    %eax,(%esp)
c0101724:	e8 cf fa ff ff       	call   c01011f8 <cga_putc>
        serial_putc(c);
c0101729:	8b 45 08             	mov    0x8(%ebp),%eax
c010172c:	89 04 24             	mov    %eax,(%esp)
c010172f:	e8 f1 fc ff ff       	call   c0101425 <serial_putc>
    }
    local_intr_restore(intr_flag);
c0101734:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0101737:	89 04 24             	mov    %eax,(%esp)
c010173a:	e8 dd f7 ff ff       	call   c0100f1c <__intr_restore>
}
c010173f:	c9                   	leave  
c0101740:	c3                   	ret    

c0101741 <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101741:	55                   	push   %ebp
c0101742:	89 e5                	mov    %esp,%ebp
c0101744:	83 ec 28             	sub    $0x28,%esp
    int c = 0;
c0101747:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c010174e:	e8 9f f7 ff ff       	call   c0100ef2 <__intr_save>
c0101753:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0101756:	e8 ab fd ff ff       	call   c0101506 <serial_intr>
        kbd_intr();
c010175b:	e8 4c ff ff ff       	call   c01016ac <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c0101760:	8b 15 60 2a 1c c0    	mov    0xc01c2a60,%edx
c0101766:	a1 64 2a 1c c0       	mov    0xc01c2a64,%eax
c010176b:	39 c2                	cmp    %eax,%edx
c010176d:	74 31                	je     c01017a0 <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c010176f:	a1 60 2a 1c c0       	mov    0xc01c2a60,%eax
c0101774:	8d 50 01             	lea    0x1(%eax),%edx
c0101777:	89 15 60 2a 1c c0    	mov    %edx,0xc01c2a60
c010177d:	0f b6 80 60 28 1c c0 	movzbl -0x3fe3d7a0(%eax),%eax
c0101784:	0f b6 c0             	movzbl %al,%eax
c0101787:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c010178a:	a1 60 2a 1c c0       	mov    0xc01c2a60,%eax
c010178f:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101794:	75 0a                	jne    c01017a0 <cons_getc+0x5f>
                cons.rpos = 0;
c0101796:	c7 05 60 2a 1c c0 00 	movl   $0x0,0xc01c2a60
c010179d:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c01017a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01017a3:	89 04 24             	mov    %eax,(%esp)
c01017a6:	e8 71 f7 ff ff       	call   c0100f1c <__intr_restore>
    return c;
c01017ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01017ae:	c9                   	leave  
c01017af:	c3                   	ret    

c01017b0 <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c01017b0:	55                   	push   %ebp
c01017b1:	89 e5                	mov    %esp,%ebp
c01017b3:	83 ec 14             	sub    $0x14,%esp
c01017b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01017b9:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c01017bd:	90                   	nop
c01017be:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c01017c2:	83 c0 07             	add    $0x7,%eax
c01017c5:	0f b7 c0             	movzwl %ax,%eax
c01017c8:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01017cc:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01017d0:	89 c2                	mov    %eax,%edx
c01017d2:	ec                   	in     (%dx),%al
c01017d3:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c01017d6:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01017da:	0f b6 c0             	movzbl %al,%eax
c01017dd:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01017e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017e3:	25 80 00 00 00       	and    $0x80,%eax
c01017e8:	85 c0                	test   %eax,%eax
c01017ea:	75 d2                	jne    c01017be <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c01017ec:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01017f0:	74 11                	je     c0101803 <ide_wait_ready+0x53>
c01017f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017f5:	83 e0 21             	and    $0x21,%eax
c01017f8:	85 c0                	test   %eax,%eax
c01017fa:	74 07                	je     c0101803 <ide_wait_ready+0x53>
        return -1;
c01017fc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101801:	eb 05                	jmp    c0101808 <ide_wait_ready+0x58>
    }
    return 0;
c0101803:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101808:	c9                   	leave  
c0101809:	c3                   	ret    

c010180a <ide_init>:

void
ide_init(void) {
c010180a:	55                   	push   %ebp
c010180b:	89 e5                	mov    %esp,%ebp
c010180d:	57                   	push   %edi
c010180e:	53                   	push   %ebx
c010180f:	81 ec 50 02 00 00    	sub    $0x250,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101815:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c010181b:	e9 d6 02 00 00       	jmp    c0101af6 <ide_init+0x2ec>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0101820:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101824:	c1 e0 03             	shl    $0x3,%eax
c0101827:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010182e:	29 c2                	sub    %eax,%edx
c0101830:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c0101836:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0101839:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c010183d:	66 d1 e8             	shr    %ax
c0101840:	0f b7 c0             	movzwl %ax,%eax
c0101843:	0f b7 04 85 48 de 10 	movzwl -0x3fef21b8(,%eax,4),%eax
c010184a:	c0 
c010184b:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c010184f:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101853:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010185a:	00 
c010185b:	89 04 24             	mov    %eax,(%esp)
c010185e:	e8 4d ff ff ff       	call   c01017b0 <ide_wait_ready>

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0101863:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101867:	83 e0 01             	and    $0x1,%eax
c010186a:	c1 e0 04             	shl    $0x4,%eax
c010186d:	83 c8 e0             	or     $0xffffffe0,%eax
c0101870:	0f b6 c0             	movzbl %al,%eax
c0101873:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101877:	83 c2 06             	add    $0x6,%edx
c010187a:	0f b7 d2             	movzwl %dx,%edx
c010187d:	66 89 55 d2          	mov    %dx,-0x2e(%ebp)
c0101881:	88 45 d1             	mov    %al,-0x2f(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101884:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c0101888:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c010188c:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c010188d:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101891:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101898:	00 
c0101899:	89 04 24             	mov    %eax,(%esp)
c010189c:	e8 0f ff ff ff       	call   c01017b0 <ide_wait_ready>

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c01018a1:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018a5:	83 c0 07             	add    $0x7,%eax
c01018a8:	0f b7 c0             	movzwl %ax,%eax
c01018ab:	66 89 45 ce          	mov    %ax,-0x32(%ebp)
c01018af:	c6 45 cd ec          	movb   $0xec,-0x33(%ebp)
c01018b3:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01018b7:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01018bb:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c01018bc:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018c0:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c01018c7:	00 
c01018c8:	89 04 24             	mov    %eax,(%esp)
c01018cb:	e8 e0 fe ff ff       	call   c01017b0 <ide_wait_ready>

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c01018d0:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018d4:	83 c0 07             	add    $0x7,%eax
c01018d7:	0f b7 c0             	movzwl %ax,%eax
c01018da:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c01018de:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c01018e2:	89 c2                	mov    %eax,%edx
c01018e4:	ec                   	in     (%dx),%al
c01018e5:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c01018e8:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01018ec:	84 c0                	test   %al,%al
c01018ee:	0f 84 f7 01 00 00    	je     c0101aeb <ide_init+0x2e1>
c01018f4:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c01018f8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01018ff:	00 
c0101900:	89 04 24             	mov    %eax,(%esp)
c0101903:	e8 a8 fe ff ff       	call   c01017b0 <ide_wait_ready>
c0101908:	85 c0                	test   %eax,%eax
c010190a:	0f 85 db 01 00 00    	jne    c0101aeb <ide_init+0x2e1>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0101910:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101914:	c1 e0 03             	shl    $0x3,%eax
c0101917:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010191e:	29 c2                	sub    %eax,%edx
c0101920:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c0101926:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0101929:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c010192d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0101930:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101936:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0101939:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101940:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0101943:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0101946:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0101949:	89 cb                	mov    %ecx,%ebx
c010194b:	89 df                	mov    %ebx,%edi
c010194d:	89 c1                	mov    %eax,%ecx
c010194f:	fc                   	cld    
c0101950:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101952:	89 c8                	mov    %ecx,%eax
c0101954:	89 fb                	mov    %edi,%ebx
c0101956:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0101959:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c010195c:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101962:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0101965:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101968:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c010196e:	89 45 e0             	mov    %eax,-0x20(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c0101971:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0101974:	25 00 00 00 04       	and    $0x4000000,%eax
c0101979:	85 c0                	test   %eax,%eax
c010197b:	74 0e                	je     c010198b <ide_init+0x181>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c010197d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101980:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0101986:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101989:	eb 09                	jmp    c0101994 <ide_init+0x18a>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c010198b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010198e:	8b 40 78             	mov    0x78(%eax),%eax
c0101991:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c0101994:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101998:	c1 e0 03             	shl    $0x3,%eax
c010199b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01019a2:	29 c2                	sub    %eax,%edx
c01019a4:	81 c2 80 2a 1c c0    	add    $0xc01c2a80,%edx
c01019aa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01019ad:	89 42 04             	mov    %eax,0x4(%edx)
        ide_devices[ideno].size = sectors;
c01019b0:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01019b4:	c1 e0 03             	shl    $0x3,%eax
c01019b7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01019be:	29 c2                	sub    %eax,%edx
c01019c0:	81 c2 80 2a 1c c0    	add    $0xc01c2a80,%edx
c01019c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01019c9:	89 42 08             	mov    %eax,0x8(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c01019cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01019cf:	83 c0 62             	add    $0x62,%eax
c01019d2:	0f b7 00             	movzwl (%eax),%eax
c01019d5:	0f b7 c0             	movzwl %ax,%eax
c01019d8:	25 00 02 00 00       	and    $0x200,%eax
c01019dd:	85 c0                	test   %eax,%eax
c01019df:	75 24                	jne    c0101a05 <ide_init+0x1fb>
c01019e1:	c7 44 24 0c 50 de 10 	movl   $0xc010de50,0xc(%esp)
c01019e8:	c0 
c01019e9:	c7 44 24 08 93 de 10 	movl   $0xc010de93,0x8(%esp)
c01019f0:	c0 
c01019f1:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c01019f8:	00 
c01019f9:	c7 04 24 a8 de 10 c0 	movl   $0xc010dea8,(%esp)
c0101a00:	e8 ce f3 ff ff       	call   c0100dd3 <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c0101a05:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101a09:	c1 e0 03             	shl    $0x3,%eax
c0101a0c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101a13:	29 c2                	sub    %eax,%edx
c0101a15:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c0101a1b:	83 c0 0c             	add    $0xc,%eax
c0101a1e:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0101a21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0101a24:	83 c0 36             	add    $0x36,%eax
c0101a27:	89 45 d8             	mov    %eax,-0x28(%ebp)
        unsigned int i, length = 40;
c0101a2a:	c7 45 d4 28 00 00 00 	movl   $0x28,-0x2c(%ebp)
        for (i = 0; i < length; i += 2) {
c0101a31:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0101a38:	eb 34                	jmp    c0101a6e <ide_init+0x264>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101a3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a3d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101a40:	01 c2                	add    %eax,%edx
c0101a42:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a45:	8d 48 01             	lea    0x1(%eax),%ecx
c0101a48:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0101a4b:	01 c8                	add    %ecx,%eax
c0101a4d:	0f b6 00             	movzbl (%eax),%eax
c0101a50:	88 02                	mov    %al,(%edx)
c0101a52:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a55:	8d 50 01             	lea    0x1(%eax),%edx
c0101a58:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101a5b:	01 c2                	add    %eax,%edx
c0101a5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a60:	8b 4d d8             	mov    -0x28(%ebp),%ecx
c0101a63:	01 c8                	add    %ecx,%eax
c0101a65:	0f b6 00             	movzbl (%eax),%eax
c0101a68:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101a6a:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101a6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a71:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0101a74:	72 c4                	jb     c0101a3a <ide_init+0x230>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c0101a76:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a79:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101a7c:	01 d0                	add    %edx,%eax
c0101a7e:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101a81:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a84:	8d 50 ff             	lea    -0x1(%eax),%edx
c0101a87:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0101a8a:	85 c0                	test   %eax,%eax
c0101a8c:	74 0f                	je     c0101a9d <ide_init+0x293>
c0101a8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101a91:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0101a94:	01 d0                	add    %edx,%eax
c0101a96:	0f b6 00             	movzbl (%eax),%eax
c0101a99:	3c 20                	cmp    $0x20,%al
c0101a9b:	74 d9                	je     c0101a76 <ide_init+0x26c>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101a9d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101aa1:	c1 e0 03             	shl    $0x3,%eax
c0101aa4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101aab:	29 c2                	sub    %eax,%edx
c0101aad:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c0101ab3:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101ab6:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101aba:	c1 e0 03             	shl    $0x3,%eax
c0101abd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101ac4:	29 c2                	sub    %eax,%edx
c0101ac6:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c0101acc:	8b 50 08             	mov    0x8(%eax),%edx
c0101acf:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101ad3:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c0101ad7:	89 54 24 08          	mov    %edx,0x8(%esp)
c0101adb:	89 44 24 04          	mov    %eax,0x4(%esp)
c0101adf:	c7 04 24 ba de 10 c0 	movl   $0xc010deba,(%esp)
c0101ae6:	e8 6d e8 ff ff       	call   c0100358 <cprintf>

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0101aeb:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101aef:	83 c0 01             	add    $0x1,%eax
c0101af2:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c0101af6:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c0101afb:	0f 86 1f fd ff ff    	jbe    c0101820 <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c0101b01:	c7 04 24 0e 00 00 00 	movl   $0xe,(%esp)
c0101b08:	e8 7c 05 00 00       	call   c0102089 <pic_enable>
    pic_enable(IRQ_IDE2);
c0101b0d:	c7 04 24 0f 00 00 00 	movl   $0xf,(%esp)
c0101b14:	e8 70 05 00 00       	call   c0102089 <pic_enable>
}
c0101b19:	81 c4 50 02 00 00    	add    $0x250,%esp
c0101b1f:	5b                   	pop    %ebx
c0101b20:	5f                   	pop    %edi
c0101b21:	5d                   	pop    %ebp
c0101b22:	c3                   	ret    

c0101b23 <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c0101b23:	55                   	push   %ebp
c0101b24:	89 e5                	mov    %esp,%ebp
c0101b26:	83 ec 04             	sub    $0x4,%esp
c0101b29:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b2c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101b30:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c0101b35:	77 24                	ja     c0101b5b <ide_device_valid+0x38>
c0101b37:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101b3b:	c1 e0 03             	shl    $0x3,%eax
c0101b3e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b45:	29 c2                	sub    %eax,%edx
c0101b47:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c0101b4d:	0f b6 00             	movzbl (%eax),%eax
c0101b50:	84 c0                	test   %al,%al
c0101b52:	74 07                	je     c0101b5b <ide_device_valid+0x38>
c0101b54:	b8 01 00 00 00       	mov    $0x1,%eax
c0101b59:	eb 05                	jmp    c0101b60 <ide_device_valid+0x3d>
c0101b5b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101b60:	c9                   	leave  
c0101b61:	c3                   	ret    

c0101b62 <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c0101b62:	55                   	push   %ebp
c0101b63:	89 e5                	mov    %esp,%ebp
c0101b65:	83 ec 08             	sub    $0x8,%esp
c0101b68:	8b 45 08             	mov    0x8(%ebp),%eax
c0101b6b:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101b6f:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101b73:	89 04 24             	mov    %eax,(%esp)
c0101b76:	e8 a8 ff ff ff       	call   c0101b23 <ide_device_valid>
c0101b7b:	85 c0                	test   %eax,%eax
c0101b7d:	74 1b                	je     c0101b9a <ide_device_size+0x38>
        return ide_devices[ideno].size;
c0101b7f:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101b83:	c1 e0 03             	shl    $0x3,%eax
c0101b86:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101b8d:	29 c2                	sub    %eax,%edx
c0101b8f:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c0101b95:	8b 40 08             	mov    0x8(%eax),%eax
c0101b98:	eb 05                	jmp    c0101b9f <ide_device_size+0x3d>
    }
    return 0;
c0101b9a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101b9f:	c9                   	leave  
c0101ba0:	c3                   	ret    

c0101ba1 <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c0101ba1:	55                   	push   %ebp
c0101ba2:	89 e5                	mov    %esp,%ebp
c0101ba4:	57                   	push   %edi
c0101ba5:	53                   	push   %ebx
c0101ba6:	83 ec 50             	sub    $0x50,%esp
c0101ba9:	8b 45 08             	mov    0x8(%ebp),%eax
c0101bac:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101bb0:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101bb7:	77 24                	ja     c0101bdd <ide_read_secs+0x3c>
c0101bb9:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101bbe:	77 1d                	ja     c0101bdd <ide_read_secs+0x3c>
c0101bc0:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101bc4:	c1 e0 03             	shl    $0x3,%eax
c0101bc7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101bce:	29 c2                	sub    %eax,%edx
c0101bd0:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c0101bd6:	0f b6 00             	movzbl (%eax),%eax
c0101bd9:	84 c0                	test   %al,%al
c0101bdb:	75 24                	jne    c0101c01 <ide_read_secs+0x60>
c0101bdd:	c7 44 24 0c d8 de 10 	movl   $0xc010ded8,0xc(%esp)
c0101be4:	c0 
c0101be5:	c7 44 24 08 93 de 10 	movl   $0xc010de93,0x8(%esp)
c0101bec:	c0 
c0101bed:	c7 44 24 04 9f 00 00 	movl   $0x9f,0x4(%esp)
c0101bf4:	00 
c0101bf5:	c7 04 24 a8 de 10 c0 	movl   $0xc010dea8,(%esp)
c0101bfc:	e8 d2 f1 ff ff       	call   c0100dd3 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101c01:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101c08:	77 0f                	ja     c0101c19 <ide_read_secs+0x78>
c0101c0a:	8b 45 14             	mov    0x14(%ebp),%eax
c0101c0d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101c10:	01 d0                	add    %edx,%eax
c0101c12:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101c17:	76 24                	jbe    c0101c3d <ide_read_secs+0x9c>
c0101c19:	c7 44 24 0c 00 df 10 	movl   $0xc010df00,0xc(%esp)
c0101c20:	c0 
c0101c21:	c7 44 24 08 93 de 10 	movl   $0xc010de93,0x8(%esp)
c0101c28:	c0 
c0101c29:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c0101c30:	00 
c0101c31:	c7 04 24 a8 de 10 c0 	movl   $0xc010dea8,(%esp)
c0101c38:	e8 96 f1 ff ff       	call   c0100dd3 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101c3d:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101c41:	66 d1 e8             	shr    %ax
c0101c44:	0f b7 c0             	movzwl %ax,%eax
c0101c47:	0f b7 04 85 48 de 10 	movzwl -0x3fef21b8(,%eax,4),%eax
c0101c4e:	c0 
c0101c4f:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101c53:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101c57:	66 d1 e8             	shr    %ax
c0101c5a:	0f b7 c0             	movzwl %ax,%eax
c0101c5d:	0f b7 04 85 4a de 10 	movzwl -0x3fef21b6(,%eax,4),%eax
c0101c64:	c0 
c0101c65:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101c69:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101c6d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101c74:	00 
c0101c75:	89 04 24             	mov    %eax,(%esp)
c0101c78:	e8 33 fb ff ff       	call   c01017b0 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101c7d:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101c81:	83 c0 02             	add    $0x2,%eax
c0101c84:	0f b7 c0             	movzwl %ax,%eax
c0101c87:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101c8b:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101c8f:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101c93:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101c97:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101c98:	8b 45 14             	mov    0x14(%ebp),%eax
c0101c9b:	0f b6 c0             	movzbl %al,%eax
c0101c9e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101ca2:	83 c2 02             	add    $0x2,%edx
c0101ca5:	0f b7 d2             	movzwl %dx,%edx
c0101ca8:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101cac:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101caf:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101cb3:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101cb7:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101cb8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101cbb:	0f b6 c0             	movzbl %al,%eax
c0101cbe:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101cc2:	83 c2 03             	add    $0x3,%edx
c0101cc5:	0f b7 d2             	movzwl %dx,%edx
c0101cc8:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101ccc:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101ccf:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101cd3:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101cd7:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101cd8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101cdb:	c1 e8 08             	shr    $0x8,%eax
c0101cde:	0f b6 c0             	movzbl %al,%eax
c0101ce1:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101ce5:	83 c2 04             	add    $0x4,%edx
c0101ce8:	0f b7 d2             	movzwl %dx,%edx
c0101ceb:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101cef:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101cf2:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101cf6:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101cfa:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101cfb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101cfe:	c1 e8 10             	shr    $0x10,%eax
c0101d01:	0f b6 c0             	movzbl %al,%eax
c0101d04:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101d08:	83 c2 05             	add    $0x5,%edx
c0101d0b:	0f b7 d2             	movzwl %dx,%edx
c0101d0e:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101d12:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101d15:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101d19:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101d1d:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101d1e:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101d22:	83 e0 01             	and    $0x1,%eax
c0101d25:	c1 e0 04             	shl    $0x4,%eax
c0101d28:	89 c2                	mov    %eax,%edx
c0101d2a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101d2d:	c1 e8 18             	shr    $0x18,%eax
c0101d30:	83 e0 0f             	and    $0xf,%eax
c0101d33:	09 d0                	or     %edx,%eax
c0101d35:	83 c8 e0             	or     $0xffffffe0,%eax
c0101d38:	0f b6 c0             	movzbl %al,%eax
c0101d3b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101d3f:	83 c2 06             	add    $0x6,%edx
c0101d42:	0f b7 d2             	movzwl %dx,%edx
c0101d45:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101d49:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101d4c:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101d50:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101d54:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101d55:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d59:	83 c0 07             	add    $0x7,%eax
c0101d5c:	0f b7 c0             	movzwl %ax,%eax
c0101d5f:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101d63:	c6 45 d5 20          	movb   $0x20,-0x2b(%ebp)
c0101d67:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101d6b:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101d6f:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101d70:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101d77:	eb 5a                	jmp    c0101dd3 <ide_read_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101d79:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d7d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101d84:	00 
c0101d85:	89 04 24             	mov    %eax,(%esp)
c0101d88:	e8 23 fa ff ff       	call   c01017b0 <ide_wait_ready>
c0101d8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101d90:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101d94:	74 02                	je     c0101d98 <ide_read_secs+0x1f7>
            goto out;
c0101d96:	eb 41                	jmp    c0101dd9 <ide_read_secs+0x238>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101d98:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101d9c:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101d9f:	8b 45 10             	mov    0x10(%ebp),%eax
c0101da2:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101da5:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c0101dac:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0101daf:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101db2:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101db5:	89 cb                	mov    %ecx,%ebx
c0101db7:	89 df                	mov    %ebx,%edi
c0101db9:	89 c1                	mov    %eax,%ecx
c0101dbb:	fc                   	cld    
c0101dbc:	f2 6d                	repnz insl (%dx),%es:(%edi)
c0101dbe:	89 c8                	mov    %ecx,%eax
c0101dc0:	89 fb                	mov    %edi,%ebx
c0101dc2:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0101dc5:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101dc8:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0101dcc:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101dd3:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101dd7:	75 a0                	jne    c0101d79 <ide_read_secs+0x1d8>
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c0101dd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101ddc:	83 c4 50             	add    $0x50,%esp
c0101ddf:	5b                   	pop    %ebx
c0101de0:	5f                   	pop    %edi
c0101de1:	5d                   	pop    %ebp
c0101de2:	c3                   	ret    

c0101de3 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c0101de3:	55                   	push   %ebp
c0101de4:	89 e5                	mov    %esp,%ebp
c0101de6:	56                   	push   %esi
c0101de7:	53                   	push   %ebx
c0101de8:	83 ec 50             	sub    $0x50,%esp
c0101deb:	8b 45 08             	mov    0x8(%ebp),%eax
c0101dee:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c0101df2:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101df9:	77 24                	ja     c0101e1f <ide_write_secs+0x3c>
c0101dfb:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101e00:	77 1d                	ja     c0101e1f <ide_write_secs+0x3c>
c0101e02:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e06:	c1 e0 03             	shl    $0x3,%eax
c0101e09:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101e10:	29 c2                	sub    %eax,%edx
c0101e12:	8d 82 80 2a 1c c0    	lea    -0x3fe3d580(%edx),%eax
c0101e18:	0f b6 00             	movzbl (%eax),%eax
c0101e1b:	84 c0                	test   %al,%al
c0101e1d:	75 24                	jne    c0101e43 <ide_write_secs+0x60>
c0101e1f:	c7 44 24 0c d8 de 10 	movl   $0xc010ded8,0xc(%esp)
c0101e26:	c0 
c0101e27:	c7 44 24 08 93 de 10 	movl   $0xc010de93,0x8(%esp)
c0101e2e:	c0 
c0101e2f:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c0101e36:	00 
c0101e37:	c7 04 24 a8 de 10 c0 	movl   $0xc010dea8,(%esp)
c0101e3e:	e8 90 ef ff ff       	call   c0100dd3 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c0101e43:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101e4a:	77 0f                	ja     c0101e5b <ide_write_secs+0x78>
c0101e4c:	8b 45 14             	mov    0x14(%ebp),%eax
c0101e4f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101e52:	01 d0                	add    %edx,%eax
c0101e54:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101e59:	76 24                	jbe    c0101e7f <ide_write_secs+0x9c>
c0101e5b:	c7 44 24 0c 00 df 10 	movl   $0xc010df00,0xc(%esp)
c0101e62:	c0 
c0101e63:	c7 44 24 08 93 de 10 	movl   $0xc010de93,0x8(%esp)
c0101e6a:	c0 
c0101e6b:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0101e72:	00 
c0101e73:	c7 04 24 a8 de 10 c0 	movl   $0xc010dea8,(%esp)
c0101e7a:	e8 54 ef ff ff       	call   c0100dd3 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101e7f:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e83:	66 d1 e8             	shr    %ax
c0101e86:	0f b7 c0             	movzwl %ax,%eax
c0101e89:	0f b7 04 85 48 de 10 	movzwl -0x3fef21b8(,%eax,4),%eax
c0101e90:	c0 
c0101e91:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101e95:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101e99:	66 d1 e8             	shr    %ax
c0101e9c:	0f b7 c0             	movzwl %ax,%eax
c0101e9f:	0f b7 04 85 4a de 10 	movzwl -0x3fef21b6(,%eax,4),%eax
c0101ea6:	c0 
c0101ea7:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101eab:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101eaf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0101eb6:	00 
c0101eb7:	89 04 24             	mov    %eax,(%esp)
c0101eba:	e8 f1 f8 ff ff       	call   c01017b0 <ide_wait_ready>

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101ebf:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101ec3:	83 c0 02             	add    $0x2,%eax
c0101ec6:	0f b7 c0             	movzwl %ax,%eax
c0101ec9:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101ecd:	c6 45 ed 00          	movb   $0x0,-0x13(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101ed1:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101ed5:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101ed9:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101eda:	8b 45 14             	mov    0x14(%ebp),%eax
c0101edd:	0f b6 c0             	movzbl %al,%eax
c0101ee0:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101ee4:	83 c2 02             	add    $0x2,%edx
c0101ee7:	0f b7 d2             	movzwl %dx,%edx
c0101eea:	66 89 55 ea          	mov    %dx,-0x16(%ebp)
c0101eee:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101ef1:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101ef5:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101ef9:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c0101efa:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101efd:	0f b6 c0             	movzbl %al,%eax
c0101f00:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f04:	83 c2 03             	add    $0x3,%edx
c0101f07:	0f b7 d2             	movzwl %dx,%edx
c0101f0a:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c0101f0e:	88 45 e5             	mov    %al,-0x1b(%ebp)
c0101f11:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0101f15:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c0101f19:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c0101f1a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f1d:	c1 e8 08             	shr    $0x8,%eax
c0101f20:	0f b6 c0             	movzbl %al,%eax
c0101f23:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f27:	83 c2 04             	add    $0x4,%edx
c0101f2a:	0f b7 d2             	movzwl %dx,%edx
c0101f2d:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0101f31:	88 45 e1             	mov    %al,-0x1f(%ebp)
c0101f34:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0101f38:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0101f3c:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c0101f3d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f40:	c1 e8 10             	shr    $0x10,%eax
c0101f43:	0f b6 c0             	movzbl %al,%eax
c0101f46:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f4a:	83 c2 05             	add    $0x5,%edx
c0101f4d:	0f b7 d2             	movzwl %dx,%edx
c0101f50:	66 89 55 de          	mov    %dx,-0x22(%ebp)
c0101f54:	88 45 dd             	mov    %al,-0x23(%ebp)
c0101f57:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101f5b:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101f5f:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c0101f60:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101f64:	83 e0 01             	and    $0x1,%eax
c0101f67:	c1 e0 04             	shl    $0x4,%eax
c0101f6a:	89 c2                	mov    %eax,%edx
c0101f6c:	8b 45 0c             	mov    0xc(%ebp),%eax
c0101f6f:	c1 e8 18             	shr    $0x18,%eax
c0101f72:	83 e0 0f             	and    $0xf,%eax
c0101f75:	09 d0                	or     %edx,%eax
c0101f77:	83 c8 e0             	or     $0xffffffe0,%eax
c0101f7a:	0f b6 c0             	movzbl %al,%eax
c0101f7d:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101f81:	83 c2 06             	add    $0x6,%edx
c0101f84:	0f b7 d2             	movzwl %dx,%edx
c0101f87:	66 89 55 da          	mov    %dx,-0x26(%ebp)
c0101f8b:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101f8e:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101f92:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0101f96:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0101f97:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101f9b:	83 c0 07             	add    $0x7,%eax
c0101f9e:	0f b7 c0             	movzwl %ax,%eax
c0101fa1:	66 89 45 d6          	mov    %ax,-0x2a(%ebp)
c0101fa5:	c6 45 d5 30          	movb   $0x30,-0x2b(%ebp)
c0101fa9:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0101fad:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0101fb1:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101fb2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0101fb9:	eb 5a                	jmp    c0102015 <ide_write_secs+0x232>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101fbb:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fbf:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0101fc6:	00 
c0101fc7:	89 04 24             	mov    %eax,(%esp)
c0101fca:	e8 e1 f7 ff ff       	call   c01017b0 <ide_wait_ready>
c0101fcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101fd2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101fd6:	74 02                	je     c0101fda <ide_write_secs+0x1f7>
            goto out;
c0101fd8:	eb 41                	jmp    c010201b <ide_write_secs+0x238>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c0101fda:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101fde:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101fe1:	8b 45 10             	mov    0x10(%ebp),%eax
c0101fe4:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0101fe7:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c0101fee:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0101ff1:	8b 4d cc             	mov    -0x34(%ebp),%ecx
c0101ff4:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0101ff7:	89 cb                	mov    %ecx,%ebx
c0101ff9:	89 de                	mov    %ebx,%esi
c0101ffb:	89 c1                	mov    %eax,%ecx
c0101ffd:	fc                   	cld    
c0101ffe:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c0102000:	89 c8                	mov    %ecx,%eax
c0102002:	89 f3                	mov    %esi,%ebx
c0102004:	89 5d cc             	mov    %ebx,-0x34(%ebp)
c0102007:	89 45 c8             	mov    %eax,-0x38(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c010200a:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c010200e:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0102015:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0102019:	75 a0                	jne    c0101fbb <ide_write_secs+0x1d8>
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c010201b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010201e:	83 c4 50             	add    $0x50,%esp
c0102021:	5b                   	pop    %ebx
c0102022:	5e                   	pop    %esi
c0102023:	5d                   	pop    %ebp
c0102024:	c3                   	ret    

c0102025 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c0102025:	55                   	push   %ebp
c0102026:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c0102028:	fb                   	sti    
    sti();
}
c0102029:	5d                   	pop    %ebp
c010202a:	c3                   	ret    

c010202b <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c010202b:	55                   	push   %ebp
c010202c:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c010202e:	fa                   	cli    
    cli();
}
c010202f:	5d                   	pop    %ebp
c0102030:	c3                   	ret    

c0102031 <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c0102031:	55                   	push   %ebp
c0102032:	89 e5                	mov    %esp,%ebp
c0102034:	83 ec 14             	sub    $0x14,%esp
c0102037:	8b 45 08             	mov    0x8(%ebp),%eax
c010203a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c010203e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102042:	66 a3 70 15 13 c0    	mov    %ax,0xc0131570
    if (did_init) {
c0102048:	a1 60 2b 1c c0       	mov    0xc01c2b60,%eax
c010204d:	85 c0                	test   %eax,%eax
c010204f:	74 36                	je     c0102087 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c0102051:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102055:	0f b6 c0             	movzbl %al,%eax
c0102058:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010205e:	88 45 fd             	mov    %al,-0x3(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0102061:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c0102065:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102069:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c010206a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010206e:	66 c1 e8 08          	shr    $0x8,%ax
c0102072:	0f b6 c0             	movzbl %al,%eax
c0102075:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c010207b:	88 45 f9             	mov    %al,-0x7(%ebp)
c010207e:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0102082:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0102086:	ee                   	out    %al,(%dx)
    }
}
c0102087:	c9                   	leave  
c0102088:	c3                   	ret    

c0102089 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0102089:	55                   	push   %ebp
c010208a:	89 e5                	mov    %esp,%ebp
c010208c:	83 ec 04             	sub    $0x4,%esp
    pic_setmask(irq_mask & ~(1 << irq));
c010208f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102092:	ba 01 00 00 00       	mov    $0x1,%edx
c0102097:	89 c1                	mov    %eax,%ecx
c0102099:	d3 e2                	shl    %cl,%edx
c010209b:	89 d0                	mov    %edx,%eax
c010209d:	f7 d0                	not    %eax
c010209f:	89 c2                	mov    %eax,%edx
c01020a1:	0f b7 05 70 15 13 c0 	movzwl 0xc0131570,%eax
c01020a8:	21 d0                	and    %edx,%eax
c01020aa:	0f b7 c0             	movzwl %ax,%eax
c01020ad:	89 04 24             	mov    %eax,(%esp)
c01020b0:	e8 7c ff ff ff       	call   c0102031 <pic_setmask>
}
c01020b5:	c9                   	leave  
c01020b6:	c3                   	ret    

c01020b7 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c01020b7:	55                   	push   %ebp
c01020b8:	89 e5                	mov    %esp,%ebp
c01020ba:	83 ec 44             	sub    $0x44,%esp
    did_init = 1;
c01020bd:	c7 05 60 2b 1c c0 01 	movl   $0x1,0xc01c2b60
c01020c4:	00 00 00 
c01020c7:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01020cd:	c6 45 fd ff          	movb   $0xff,-0x3(%ebp)
c01020d1:	0f b6 45 fd          	movzbl -0x3(%ebp),%eax
c01020d5:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01020d9:	ee                   	out    %al,(%dx)
c01020da:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
c01020e0:	c6 45 f9 ff          	movb   $0xff,-0x7(%ebp)
c01020e4:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c01020e8:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01020ec:	ee                   	out    %al,(%dx)
c01020ed:	66 c7 45 f6 20 00    	movw   $0x20,-0xa(%ebp)
c01020f3:	c6 45 f5 11          	movb   $0x11,-0xb(%ebp)
c01020f7:	0f b6 45 f5          	movzbl -0xb(%ebp),%eax
c01020fb:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01020ff:	ee                   	out    %al,(%dx)
c0102100:	66 c7 45 f2 21 00    	movw   $0x21,-0xe(%ebp)
c0102106:	c6 45 f1 20          	movb   $0x20,-0xf(%ebp)
c010210a:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c010210e:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102112:	ee                   	out    %al,(%dx)
c0102113:	66 c7 45 ee 21 00    	movw   $0x21,-0x12(%ebp)
c0102119:	c6 45 ed 04          	movb   $0x4,-0x13(%ebp)
c010211d:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0102121:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0102125:	ee                   	out    %al,(%dx)
c0102126:	66 c7 45 ea 21 00    	movw   $0x21,-0x16(%ebp)
c010212c:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
c0102130:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0102134:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102138:	ee                   	out    %al,(%dx)
c0102139:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c010213f:	c6 45 e5 11          	movb   $0x11,-0x1b(%ebp)
c0102143:	0f b6 45 e5          	movzbl -0x1b(%ebp),%eax
c0102147:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010214b:	ee                   	out    %al,(%dx)
c010214c:	66 c7 45 e2 a1 00    	movw   $0xa1,-0x1e(%ebp)
c0102152:	c6 45 e1 28          	movb   $0x28,-0x1f(%ebp)
c0102156:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c010215a:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010215e:	ee                   	out    %al,(%dx)
c010215f:	66 c7 45 de a1 00    	movw   $0xa1,-0x22(%ebp)
c0102165:	c6 45 dd 02          	movb   $0x2,-0x23(%ebp)
c0102169:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010216d:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0102171:	ee                   	out    %al,(%dx)
c0102172:	66 c7 45 da a1 00    	movw   $0xa1,-0x26(%ebp)
c0102178:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
c010217c:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0102180:	0f b7 55 da          	movzwl -0x26(%ebp),%edx
c0102184:	ee                   	out    %al,(%dx)
c0102185:	66 c7 45 d6 20 00    	movw   $0x20,-0x2a(%ebp)
c010218b:	c6 45 d5 68          	movb   $0x68,-0x2b(%ebp)
c010218f:	0f b6 45 d5          	movzbl -0x2b(%ebp),%eax
c0102193:	0f b7 55 d6          	movzwl -0x2a(%ebp),%edx
c0102197:	ee                   	out    %al,(%dx)
c0102198:	66 c7 45 d2 20 00    	movw   $0x20,-0x2e(%ebp)
c010219e:	c6 45 d1 0a          	movb   $0xa,-0x2f(%ebp)
c01021a2:	0f b6 45 d1          	movzbl -0x2f(%ebp),%eax
c01021a6:	0f b7 55 d2          	movzwl -0x2e(%ebp),%edx
c01021aa:	ee                   	out    %al,(%dx)
c01021ab:	66 c7 45 ce a0 00    	movw   $0xa0,-0x32(%ebp)
c01021b1:	c6 45 cd 68          	movb   $0x68,-0x33(%ebp)
c01021b5:	0f b6 45 cd          	movzbl -0x33(%ebp),%eax
c01021b9:	0f b7 55 ce          	movzwl -0x32(%ebp),%edx
c01021bd:	ee                   	out    %al,(%dx)
c01021be:	66 c7 45 ca a0 00    	movw   $0xa0,-0x36(%ebp)
c01021c4:	c6 45 c9 0a          	movb   $0xa,-0x37(%ebp)
c01021c8:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c01021cc:	0f b7 55 ca          	movzwl -0x36(%ebp),%edx
c01021d0:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c01021d1:	0f b7 05 70 15 13 c0 	movzwl 0xc0131570,%eax
c01021d8:	66 83 f8 ff          	cmp    $0xffff,%ax
c01021dc:	74 12                	je     c01021f0 <pic_init+0x139>
        pic_setmask(irq_mask);
c01021de:	0f b7 05 70 15 13 c0 	movzwl 0xc0131570,%eax
c01021e5:	0f b7 c0             	movzwl %ax,%eax
c01021e8:	89 04 24             	mov    %eax,(%esp)
c01021eb:	e8 41 fe ff ff       	call   c0102031 <pic_setmask>
    }
}
c01021f0:	c9                   	leave  
c01021f1:	c3                   	ret    

c01021f2 <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c01021f2:	55                   	push   %ebp
c01021f3:	89 e5                	mov    %esp,%ebp
c01021f5:	83 ec 18             	sub    $0x18,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01021f8:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c01021ff:	00 
c0102200:	c7 04 24 40 df 10 c0 	movl   $0xc010df40,(%esp)
c0102207:	e8 4c e1 ff ff       	call   c0100358 <cprintf>
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
c010220c:	c7 04 24 4a df 10 c0 	movl   $0xc010df4a,(%esp)
c0102213:	e8 40 e1 ff ff       	call   c0100358 <cprintf>
    panic("EOT: kernel seems ok.");
c0102218:	c7 44 24 08 58 df 10 	movl   $0xc010df58,0x8(%esp)
c010221f:	c0 
c0102220:	c7 44 24 04 1a 00 00 	movl   $0x1a,0x4(%esp)
c0102227:	00 
c0102228:	c7 04 24 6e df 10 c0 	movl   $0xc010df6e,(%esp)
c010222f:	e8 9f eb ff ff       	call   c0100dd3 <__panic>

c0102234 <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c0102234:	55                   	push   %ebp
c0102235:	89 e5                	mov    %esp,%ebp
c0102237:	83 ec 10             	sub    $0x10,%esp

     /* LAB5 2014011381 */
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
     extern uintptr_t __vectors[];
     int idt_size = 256, i;
c010223a:	c7 45 f8 00 01 00 00 	movl   $0x100,-0x8(%ebp)

     for (i=0; i<idt_size; ++i)
c0102241:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0102248:	e9 c3 00 00 00       	jmp    c0102310 <idt_init+0xdc>
         SETGATE(idt[i], 0, 8, __vectors[i], DPL_KERNEL);
c010224d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102250:	8b 04 85 00 16 13 c0 	mov    -0x3fecea00(,%eax,4),%eax
c0102257:	89 c2                	mov    %eax,%edx
c0102259:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010225c:	66 89 14 c5 80 2b 1c 	mov    %dx,-0x3fe3d480(,%eax,8)
c0102263:	c0 
c0102264:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102267:	66 c7 04 c5 82 2b 1c 	movw   $0x8,-0x3fe3d47e(,%eax,8)
c010226e:	c0 08 00 
c0102271:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102274:	0f b6 14 c5 84 2b 1c 	movzbl -0x3fe3d47c(,%eax,8),%edx
c010227b:	c0 
c010227c:	83 e2 e0             	and    $0xffffffe0,%edx
c010227f:	88 14 c5 84 2b 1c c0 	mov    %dl,-0x3fe3d47c(,%eax,8)
c0102286:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102289:	0f b6 14 c5 84 2b 1c 	movzbl -0x3fe3d47c(,%eax,8),%edx
c0102290:	c0 
c0102291:	83 e2 1f             	and    $0x1f,%edx
c0102294:	88 14 c5 84 2b 1c c0 	mov    %dl,-0x3fe3d47c(,%eax,8)
c010229b:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010229e:	0f b6 14 c5 85 2b 1c 	movzbl -0x3fe3d47b(,%eax,8),%edx
c01022a5:	c0 
c01022a6:	83 e2 f0             	and    $0xfffffff0,%edx
c01022a9:	83 ca 0e             	or     $0xe,%edx
c01022ac:	88 14 c5 85 2b 1c c0 	mov    %dl,-0x3fe3d47b(,%eax,8)
c01022b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022b6:	0f b6 14 c5 85 2b 1c 	movzbl -0x3fe3d47b(,%eax,8),%edx
c01022bd:	c0 
c01022be:	83 e2 ef             	and    $0xffffffef,%edx
c01022c1:	88 14 c5 85 2b 1c c0 	mov    %dl,-0x3fe3d47b(,%eax,8)
c01022c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022cb:	0f b6 14 c5 85 2b 1c 	movzbl -0x3fe3d47b(,%eax,8),%edx
c01022d2:	c0 
c01022d3:	83 e2 9f             	and    $0xffffff9f,%edx
c01022d6:	88 14 c5 85 2b 1c c0 	mov    %dl,-0x3fe3d47b(,%eax,8)
c01022dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022e0:	0f b6 14 c5 85 2b 1c 	movzbl -0x3fe3d47b(,%eax,8),%edx
c01022e7:	c0 
c01022e8:	83 ca 80             	or     $0xffffff80,%edx
c01022eb:	88 14 c5 85 2b 1c c0 	mov    %dl,-0x3fe3d47b(,%eax,8)
c01022f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01022f5:	8b 04 85 00 16 13 c0 	mov    -0x3fecea00(,%eax,4),%eax
c01022fc:	c1 e8 10             	shr    $0x10,%eax
c01022ff:	89 c2                	mov    %eax,%edx
c0102301:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102304:	66 89 14 c5 86 2b 1c 	mov    %dx,-0x3fe3d47a(,%eax,8)
c010230b:	c0 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
     extern uintptr_t __vectors[];
     int idt_size = 256, i;

     for (i=0; i<idt_size; ++i)
c010230c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0102310:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0102313:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0102316:	0f 8c 31 ff ff ff    	jl     c010224d <idt_init+0x19>
         SETGATE(idt[i], 0, 8, __vectors[i], DPL_KERNEL);

     SETGATE(idt[T_SYSCALL], 1, 8, __vectors[T_SYSCALL], DPL_USER);
c010231c:	a1 00 18 13 c0       	mov    0xc0131800,%eax
c0102321:	66 a3 80 2f 1c c0    	mov    %ax,0xc01c2f80
c0102327:	66 c7 05 82 2f 1c c0 	movw   $0x8,0xc01c2f82
c010232e:	08 00 
c0102330:	0f b6 05 84 2f 1c c0 	movzbl 0xc01c2f84,%eax
c0102337:	83 e0 e0             	and    $0xffffffe0,%eax
c010233a:	a2 84 2f 1c c0       	mov    %al,0xc01c2f84
c010233f:	0f b6 05 84 2f 1c c0 	movzbl 0xc01c2f84,%eax
c0102346:	83 e0 1f             	and    $0x1f,%eax
c0102349:	a2 84 2f 1c c0       	mov    %al,0xc01c2f84
c010234e:	0f b6 05 85 2f 1c c0 	movzbl 0xc01c2f85,%eax
c0102355:	83 c8 0f             	or     $0xf,%eax
c0102358:	a2 85 2f 1c c0       	mov    %al,0xc01c2f85
c010235d:	0f b6 05 85 2f 1c c0 	movzbl 0xc01c2f85,%eax
c0102364:	83 e0 ef             	and    $0xffffffef,%eax
c0102367:	a2 85 2f 1c c0       	mov    %al,0xc01c2f85
c010236c:	0f b6 05 85 2f 1c c0 	movzbl 0xc01c2f85,%eax
c0102373:	83 c8 60             	or     $0x60,%eax
c0102376:	a2 85 2f 1c c0       	mov    %al,0xc01c2f85
c010237b:	0f b6 05 85 2f 1c c0 	movzbl 0xc01c2f85,%eax
c0102382:	83 c8 80             	or     $0xffffff80,%eax
c0102385:	a2 85 2f 1c c0       	mov    %al,0xc01c2f85
c010238a:	a1 00 18 13 c0       	mov    0xc0131800,%eax
c010238f:	c1 e8 10             	shr    $0x10,%eax
c0102392:	66 a3 86 2f 1c c0    	mov    %ax,0xc01c2f86
c0102398:	c7 45 f4 80 15 13 c0 	movl   $0xc0131580,-0xc(%ebp)
    }
}

static inline void
lidt(struct pseudodesc *pd) {
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
c010239f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01023a2:	0f 01 18             	lidtl  (%eax)

     lidt(&idt_pd);
}
c01023a5:	c9                   	leave  
c01023a6:	c3                   	ret    

c01023a7 <trapname>:

static const char *
trapname(int trapno) {
c01023a7:	55                   	push   %ebp
c01023a8:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c01023aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01023ad:	83 f8 13             	cmp    $0x13,%eax
c01023b0:	77 0c                	ja     c01023be <trapname+0x17>
        return excnames[trapno];
c01023b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01023b5:	8b 04 85 e0 e3 10 c0 	mov    -0x3fef1c20(,%eax,4),%eax
c01023bc:	eb 18                	jmp    c01023d6 <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c01023be:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c01023c2:	7e 0d                	jle    c01023d1 <trapname+0x2a>
c01023c4:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c01023c8:	7f 07                	jg     c01023d1 <trapname+0x2a>
        return "Hardware Interrupt";
c01023ca:	b8 7f df 10 c0       	mov    $0xc010df7f,%eax
c01023cf:	eb 05                	jmp    c01023d6 <trapname+0x2f>
    }
    return "(unknown trap)";
c01023d1:	b8 92 df 10 c0       	mov    $0xc010df92,%eax
}
c01023d6:	5d                   	pop    %ebp
c01023d7:	c3                   	ret    

c01023d8 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c01023d8:	55                   	push   %ebp
c01023d9:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c01023db:	8b 45 08             	mov    0x8(%ebp),%eax
c01023de:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01023e2:	66 83 f8 08          	cmp    $0x8,%ax
c01023e6:	0f 94 c0             	sete   %al
c01023e9:	0f b6 c0             	movzbl %al,%eax
}
c01023ec:	5d                   	pop    %ebp
c01023ed:	c3                   	ret    

c01023ee <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c01023ee:	55                   	push   %ebp
c01023ef:	89 e5                	mov    %esp,%ebp
c01023f1:	83 ec 28             	sub    $0x28,%esp
    cprintf("trapframe at %p\n", tf);
c01023f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01023f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01023fb:	c7 04 24 d3 df 10 c0 	movl   $0xc010dfd3,(%esp)
c0102402:	e8 51 df ff ff       	call   c0100358 <cprintf>
    print_regs(&tf->tf_regs);
c0102407:	8b 45 08             	mov    0x8(%ebp),%eax
c010240a:	89 04 24             	mov    %eax,(%esp)
c010240d:	e8 a1 01 00 00       	call   c01025b3 <print_regs>
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c0102412:	8b 45 08             	mov    0x8(%ebp),%eax
c0102415:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0102419:	0f b7 c0             	movzwl %ax,%eax
c010241c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102420:	c7 04 24 e4 df 10 c0 	movl   $0xc010dfe4,(%esp)
c0102427:	e8 2c df ff ff       	call   c0100358 <cprintf>
    cprintf("  es   0x----%04x\n", tf->tf_es);
c010242c:	8b 45 08             	mov    0x8(%ebp),%eax
c010242f:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c0102433:	0f b7 c0             	movzwl %ax,%eax
c0102436:	89 44 24 04          	mov    %eax,0x4(%esp)
c010243a:	c7 04 24 f7 df 10 c0 	movl   $0xc010dff7,(%esp)
c0102441:	e8 12 df ff ff       	call   c0100358 <cprintf>
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c0102446:	8b 45 08             	mov    0x8(%ebp),%eax
c0102449:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c010244d:	0f b7 c0             	movzwl %ax,%eax
c0102450:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102454:	c7 04 24 0a e0 10 c0 	movl   $0xc010e00a,(%esp)
c010245b:	e8 f8 de ff ff       	call   c0100358 <cprintf>
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c0102460:	8b 45 08             	mov    0x8(%ebp),%eax
c0102463:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c0102467:	0f b7 c0             	movzwl %ax,%eax
c010246a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010246e:	c7 04 24 1d e0 10 c0 	movl   $0xc010e01d,(%esp)
c0102475:	e8 de de ff ff       	call   c0100358 <cprintf>
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c010247a:	8b 45 08             	mov    0x8(%ebp),%eax
c010247d:	8b 40 30             	mov    0x30(%eax),%eax
c0102480:	89 04 24             	mov    %eax,(%esp)
c0102483:	e8 1f ff ff ff       	call   c01023a7 <trapname>
c0102488:	8b 55 08             	mov    0x8(%ebp),%edx
c010248b:	8b 52 30             	mov    0x30(%edx),%edx
c010248e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0102492:	89 54 24 04          	mov    %edx,0x4(%esp)
c0102496:	c7 04 24 30 e0 10 c0 	movl   $0xc010e030,(%esp)
c010249d:	e8 b6 de ff ff       	call   c0100358 <cprintf>
    cprintf("  err  0x%08x\n", tf->tf_err);
c01024a2:	8b 45 08             	mov    0x8(%ebp),%eax
c01024a5:	8b 40 34             	mov    0x34(%eax),%eax
c01024a8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024ac:	c7 04 24 42 e0 10 c0 	movl   $0xc010e042,(%esp)
c01024b3:	e8 a0 de ff ff       	call   c0100358 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c01024b8:	8b 45 08             	mov    0x8(%ebp),%eax
c01024bb:	8b 40 38             	mov    0x38(%eax),%eax
c01024be:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024c2:	c7 04 24 51 e0 10 c0 	movl   $0xc010e051,(%esp)
c01024c9:	e8 8a de ff ff       	call   c0100358 <cprintf>
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c01024ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01024d1:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c01024d5:	0f b7 c0             	movzwl %ax,%eax
c01024d8:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024dc:	c7 04 24 60 e0 10 c0 	movl   $0xc010e060,(%esp)
c01024e3:	e8 70 de ff ff       	call   c0100358 <cprintf>
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c01024e8:	8b 45 08             	mov    0x8(%ebp),%eax
c01024eb:	8b 40 40             	mov    0x40(%eax),%eax
c01024ee:	89 44 24 04          	mov    %eax,0x4(%esp)
c01024f2:	c7 04 24 73 e0 10 c0 	movl   $0xc010e073,(%esp)
c01024f9:	e8 5a de ff ff       	call   c0100358 <cprintf>

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01024fe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0102505:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c010250c:	eb 3e                	jmp    c010254c <print_trapframe+0x15e>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c010250e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102511:	8b 50 40             	mov    0x40(%eax),%edx
c0102514:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102517:	21 d0                	and    %edx,%eax
c0102519:	85 c0                	test   %eax,%eax
c010251b:	74 28                	je     c0102545 <print_trapframe+0x157>
c010251d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102520:	8b 04 85 a0 15 13 c0 	mov    -0x3fecea60(,%eax,4),%eax
c0102527:	85 c0                	test   %eax,%eax
c0102529:	74 1a                	je     c0102545 <print_trapframe+0x157>
            cprintf("%s,", IA32flags[i]);
c010252b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010252e:	8b 04 85 a0 15 13 c0 	mov    -0x3fecea60(,%eax,4),%eax
c0102535:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102539:	c7 04 24 82 e0 10 c0 	movl   $0xc010e082,(%esp)
c0102540:	e8 13 de ff ff       	call   c0100358 <cprintf>
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102545:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0102549:	d1 65 f0             	shll   -0x10(%ebp)
c010254c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010254f:	83 f8 17             	cmp    $0x17,%eax
c0102552:	76 ba                	jbe    c010250e <print_trapframe+0x120>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c0102554:	8b 45 08             	mov    0x8(%ebp),%eax
c0102557:	8b 40 40             	mov    0x40(%eax),%eax
c010255a:	25 00 30 00 00       	and    $0x3000,%eax
c010255f:	c1 e8 0c             	shr    $0xc,%eax
c0102562:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102566:	c7 04 24 86 e0 10 c0 	movl   $0xc010e086,(%esp)
c010256d:	e8 e6 dd ff ff       	call   c0100358 <cprintf>

    if (!trap_in_kernel(tf)) {
c0102572:	8b 45 08             	mov    0x8(%ebp),%eax
c0102575:	89 04 24             	mov    %eax,(%esp)
c0102578:	e8 5b fe ff ff       	call   c01023d8 <trap_in_kernel>
c010257d:	85 c0                	test   %eax,%eax
c010257f:	75 30                	jne    c01025b1 <print_trapframe+0x1c3>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c0102581:	8b 45 08             	mov    0x8(%ebp),%eax
c0102584:	8b 40 44             	mov    0x44(%eax),%eax
c0102587:	89 44 24 04          	mov    %eax,0x4(%esp)
c010258b:	c7 04 24 8f e0 10 c0 	movl   $0xc010e08f,(%esp)
c0102592:	e8 c1 dd ff ff       	call   c0100358 <cprintf>
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c0102597:	8b 45 08             	mov    0x8(%ebp),%eax
c010259a:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c010259e:	0f b7 c0             	movzwl %ax,%eax
c01025a1:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025a5:	c7 04 24 9e e0 10 c0 	movl   $0xc010e09e,(%esp)
c01025ac:	e8 a7 dd ff ff       	call   c0100358 <cprintf>
    }
}
c01025b1:	c9                   	leave  
c01025b2:	c3                   	ret    

c01025b3 <print_regs>:

void
print_regs(struct pushregs *regs) {
c01025b3:	55                   	push   %ebp
c01025b4:	89 e5                	mov    %esp,%ebp
c01025b6:	83 ec 18             	sub    $0x18,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c01025b9:	8b 45 08             	mov    0x8(%ebp),%eax
c01025bc:	8b 00                	mov    (%eax),%eax
c01025be:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025c2:	c7 04 24 b1 e0 10 c0 	movl   $0xc010e0b1,(%esp)
c01025c9:	e8 8a dd ff ff       	call   c0100358 <cprintf>
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c01025ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01025d1:	8b 40 04             	mov    0x4(%eax),%eax
c01025d4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025d8:	c7 04 24 c0 e0 10 c0 	movl   $0xc010e0c0,(%esp)
c01025df:	e8 74 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c01025e4:	8b 45 08             	mov    0x8(%ebp),%eax
c01025e7:	8b 40 08             	mov    0x8(%eax),%eax
c01025ea:	89 44 24 04          	mov    %eax,0x4(%esp)
c01025ee:	c7 04 24 cf e0 10 c0 	movl   $0xc010e0cf,(%esp)
c01025f5:	e8 5e dd ff ff       	call   c0100358 <cprintf>
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c01025fa:	8b 45 08             	mov    0x8(%ebp),%eax
c01025fd:	8b 40 0c             	mov    0xc(%eax),%eax
c0102600:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102604:	c7 04 24 de e0 10 c0 	movl   $0xc010e0de,(%esp)
c010260b:	e8 48 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c0102610:	8b 45 08             	mov    0x8(%ebp),%eax
c0102613:	8b 40 10             	mov    0x10(%eax),%eax
c0102616:	89 44 24 04          	mov    %eax,0x4(%esp)
c010261a:	c7 04 24 ed e0 10 c0 	movl   $0xc010e0ed,(%esp)
c0102621:	e8 32 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c0102626:	8b 45 08             	mov    0x8(%ebp),%eax
c0102629:	8b 40 14             	mov    0x14(%eax),%eax
c010262c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102630:	c7 04 24 fc e0 10 c0 	movl   $0xc010e0fc,(%esp)
c0102637:	e8 1c dd ff ff       	call   c0100358 <cprintf>
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c010263c:	8b 45 08             	mov    0x8(%ebp),%eax
c010263f:	8b 40 18             	mov    0x18(%eax),%eax
c0102642:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102646:	c7 04 24 0b e1 10 c0 	movl   $0xc010e10b,(%esp)
c010264d:	e8 06 dd ff ff       	call   c0100358 <cprintf>
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c0102652:	8b 45 08             	mov    0x8(%ebp),%eax
c0102655:	8b 40 1c             	mov    0x1c(%eax),%eax
c0102658:	89 44 24 04          	mov    %eax,0x4(%esp)
c010265c:	c7 04 24 1a e1 10 c0 	movl   $0xc010e11a,(%esp)
c0102663:	e8 f0 dc ff ff       	call   c0100358 <cprintf>
}
c0102668:	c9                   	leave  
c0102669:	c3                   	ret    

c010266a <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c010266a:	55                   	push   %ebp
c010266b:	89 e5                	mov    %esp,%ebp
c010266d:	53                   	push   %ebx
c010266e:	83 ec 34             	sub    $0x34,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c0102671:	8b 45 08             	mov    0x8(%ebp),%eax
c0102674:	8b 40 34             	mov    0x34(%eax),%eax
c0102677:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010267a:	85 c0                	test   %eax,%eax
c010267c:	74 07                	je     c0102685 <print_pgfault+0x1b>
c010267e:	b9 29 e1 10 c0       	mov    $0xc010e129,%ecx
c0102683:	eb 05                	jmp    c010268a <print_pgfault+0x20>
c0102685:	b9 3a e1 10 c0       	mov    $0xc010e13a,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c010268a:	8b 45 08             	mov    0x8(%ebp),%eax
c010268d:	8b 40 34             	mov    0x34(%eax),%eax
c0102690:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102693:	85 c0                	test   %eax,%eax
c0102695:	74 07                	je     c010269e <print_pgfault+0x34>
c0102697:	ba 57 00 00 00       	mov    $0x57,%edx
c010269c:	eb 05                	jmp    c01026a3 <print_pgfault+0x39>
c010269e:	ba 52 00 00 00       	mov    $0x52,%edx
            (tf->tf_err & 4) ? 'U' : 'K',
c01026a3:	8b 45 08             	mov    0x8(%ebp),%eax
c01026a6:	8b 40 34             	mov    0x34(%eax),%eax
c01026a9:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c01026ac:	85 c0                	test   %eax,%eax
c01026ae:	74 07                	je     c01026b7 <print_pgfault+0x4d>
c01026b0:	b8 55 00 00 00       	mov    $0x55,%eax
c01026b5:	eb 05                	jmp    c01026bc <print_pgfault+0x52>
c01026b7:	b8 4b 00 00 00       	mov    $0x4b,%eax
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c01026bc:	0f 20 d3             	mov    %cr2,%ebx
c01026bf:	89 5d f4             	mov    %ebx,-0xc(%ebp)
    return cr2;
c01026c2:	8b 5d f4             	mov    -0xc(%ebp),%ebx
c01026c5:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c01026c9:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01026cd:	89 44 24 08          	mov    %eax,0x8(%esp)
c01026d1:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01026d5:	c7 04 24 48 e1 10 c0 	movl   $0xc010e148,(%esp)
c01026dc:	e8 77 dc ff ff       	call   c0100358 <cprintf>
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c01026e1:	83 c4 34             	add    $0x34,%esp
c01026e4:	5b                   	pop    %ebx
c01026e5:	5d                   	pop    %ebp
c01026e6:	c3                   	ret    

c01026e7 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c01026e7:	55                   	push   %ebp
c01026e8:	89 e5                	mov    %esp,%ebp
c01026ea:	83 ec 28             	sub    $0x28,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c01026ed:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c01026f2:	85 c0                	test   %eax,%eax
c01026f4:	74 0b                	je     c0102701 <pgfault_handler+0x1a>
            print_pgfault(tf);
c01026f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01026f9:	89 04 24             	mov    %eax,(%esp)
c01026fc:	e8 69 ff ff ff       	call   c010266a <print_pgfault>
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c0102701:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c0102706:	85 c0                	test   %eax,%eax
c0102708:	74 3d                	je     c0102747 <pgfault_handler+0x60>
        assert(current == idleproc);
c010270a:	8b 15 48 34 1c c0    	mov    0xc01c3448,%edx
c0102710:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c0102715:	39 c2                	cmp    %eax,%edx
c0102717:	74 24                	je     c010273d <pgfault_handler+0x56>
c0102719:	c7 44 24 0c 6b e1 10 	movl   $0xc010e16b,0xc(%esp)
c0102720:	c0 
c0102721:	c7 44 24 08 7f e1 10 	movl   $0xc010e17f,0x8(%esp)
c0102728:	c0 
c0102729:	c7 44 24 04 b3 00 00 	movl   $0xb3,0x4(%esp)
c0102730:	00 
c0102731:	c7 04 24 6e df 10 c0 	movl   $0xc010df6e,(%esp)
c0102738:	e8 96 e6 ff ff       	call   c0100dd3 <__panic>
        mm = check_mm_struct;
c010273d:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c0102742:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102745:	eb 46                	jmp    c010278d <pgfault_handler+0xa6>
    }
    else {
        if (current == NULL) {
c0102747:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010274c:	85 c0                	test   %eax,%eax
c010274e:	75 32                	jne    c0102782 <pgfault_handler+0x9b>
            print_trapframe(tf);
c0102750:	8b 45 08             	mov    0x8(%ebp),%eax
c0102753:	89 04 24             	mov    %eax,(%esp)
c0102756:	e8 93 fc ff ff       	call   c01023ee <print_trapframe>
            print_pgfault(tf);
c010275b:	8b 45 08             	mov    0x8(%ebp),%eax
c010275e:	89 04 24             	mov    %eax,(%esp)
c0102761:	e8 04 ff ff ff       	call   c010266a <print_pgfault>
            panic("unhandled page fault.\n");
c0102766:	c7 44 24 08 94 e1 10 	movl   $0xc010e194,0x8(%esp)
c010276d:	c0 
c010276e:	c7 44 24 04 ba 00 00 	movl   $0xba,0x4(%esp)
c0102775:	00 
c0102776:	c7 04 24 6e df 10 c0 	movl   $0xc010df6e,(%esp)
c010277d:	e8 51 e6 ff ff       	call   c0100dd3 <__panic>
        }
        mm = current->mm;
c0102782:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c0102787:	8b 40 18             	mov    0x18(%eax),%eax
c010278a:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c010278d:	0f 20 d0             	mov    %cr2,%eax
c0102790:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c0102793:	8b 45 f0             	mov    -0x10(%ebp),%eax
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c0102796:	89 c2                	mov    %eax,%edx
c0102798:	8b 45 08             	mov    0x8(%ebp),%eax
c010279b:	8b 40 34             	mov    0x34(%eax),%eax
c010279e:	89 54 24 08          	mov    %edx,0x8(%esp)
c01027a2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01027a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01027a9:	89 04 24             	mov    %eax,(%esp)
c01027ac:	e8 8c 69 00 00       	call   c010913d <do_pgfault>
}
c01027b1:	c9                   	leave  
c01027b2:	c3                   	ret    

c01027b3 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c01027b3:	55                   	push   %ebp
c01027b4:	89 e5                	mov    %esp,%ebp
c01027b6:	83 ec 28             	sub    $0x28,%esp
    char c;

    int ret=0;
c01027b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c01027c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01027c3:	8b 40 30             	mov    0x30(%eax),%eax
c01027c6:	83 f8 2f             	cmp    $0x2f,%eax
c01027c9:	77 38                	ja     c0102803 <trap_dispatch+0x50>
c01027cb:	83 f8 2e             	cmp    $0x2e,%eax
c01027ce:	0f 83 fb 01 00 00    	jae    c01029cf <trap_dispatch+0x21c>
c01027d4:	83 f8 20             	cmp    $0x20,%eax
c01027d7:	0f 84 07 01 00 00    	je     c01028e4 <trap_dispatch+0x131>
c01027dd:	83 f8 20             	cmp    $0x20,%eax
c01027e0:	77 0a                	ja     c01027ec <trap_dispatch+0x39>
c01027e2:	83 f8 0e             	cmp    $0xe,%eax
c01027e5:	74 3e                	je     c0102825 <trap_dispatch+0x72>
c01027e7:	e9 9b 01 00 00       	jmp    c0102987 <trap_dispatch+0x1d4>
c01027ec:	83 f8 21             	cmp    $0x21,%eax
c01027ef:	0f 84 50 01 00 00    	je     c0102945 <trap_dispatch+0x192>
c01027f5:	83 f8 24             	cmp    $0x24,%eax
c01027f8:	0f 84 1e 01 00 00    	je     c010291c <trap_dispatch+0x169>
c01027fe:	e9 84 01 00 00       	jmp    c0102987 <trap_dispatch+0x1d4>
c0102803:	83 f8 78             	cmp    $0x78,%eax
c0102806:	0f 82 7b 01 00 00    	jb     c0102987 <trap_dispatch+0x1d4>
c010280c:	83 f8 79             	cmp    $0x79,%eax
c010280f:	0f 86 56 01 00 00    	jbe    c010296b <trap_dispatch+0x1b8>
c0102815:	3d 80 00 00 00       	cmp    $0x80,%eax
c010281a:	0f 84 ba 00 00 00    	je     c01028da <trap_dispatch+0x127>
c0102820:	e9 62 01 00 00       	jmp    c0102987 <trap_dispatch+0x1d4>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c0102825:	8b 45 08             	mov    0x8(%ebp),%eax
c0102828:	89 04 24             	mov    %eax,(%esp)
c010282b:	e8 b7 fe ff ff       	call   c01026e7 <pgfault_handler>
c0102830:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0102833:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0102837:	0f 84 98 00 00 00    	je     c01028d5 <trap_dispatch+0x122>
            print_trapframe(tf);
c010283d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102840:	89 04 24             	mov    %eax,(%esp)
c0102843:	e8 a6 fb ff ff       	call   c01023ee <print_trapframe>
            if (current == NULL) {
c0102848:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010284d:	85 c0                	test   %eax,%eax
c010284f:	75 23                	jne    c0102874 <trap_dispatch+0xc1>
                panic("handle pgfault failed. ret=%d\n", ret);
c0102851:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102854:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0102858:	c7 44 24 08 ac e1 10 	movl   $0xc010e1ac,0x8(%esp)
c010285f:	c0 
c0102860:	c7 44 24 04 cf 00 00 	movl   $0xcf,0x4(%esp)
c0102867:	00 
c0102868:	c7 04 24 6e df 10 c0 	movl   $0xc010df6e,(%esp)
c010286f:	e8 5f e5 ff ff       	call   c0100dd3 <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c0102874:	8b 45 08             	mov    0x8(%ebp),%eax
c0102877:	89 04 24             	mov    %eax,(%esp)
c010287a:	e8 59 fb ff ff       	call   c01023d8 <trap_in_kernel>
c010287f:	85 c0                	test   %eax,%eax
c0102881:	74 23                	je     c01028a6 <trap_dispatch+0xf3>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c0102883:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102886:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010288a:	c7 44 24 08 cc e1 10 	movl   $0xc010e1cc,0x8(%esp)
c0102891:	c0 
c0102892:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c0102899:	00 
c010289a:	c7 04 24 6e df 10 c0 	movl   $0xc010df6e,(%esp)
c01028a1:	e8 2d e5 ff ff       	call   c0100dd3 <__panic>
                }
                cprintf("killed by kernel.\n");
c01028a6:	c7 04 24 fa e1 10 c0 	movl   $0xc010e1fa,(%esp)
c01028ad:	e8 a6 da ff ff       	call   c0100358 <cprintf>
                panic("handle user mode pgfault failed. ret=%d\n", ret);
c01028b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01028b5:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01028b9:	c7 44 24 08 10 e2 10 	movl   $0xc010e210,0x8(%esp)
c01028c0:	c0 
c01028c1:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c01028c8:	00 
c01028c9:	c7 04 24 6e df 10 c0 	movl   $0xc010df6e,(%esp)
c01028d0:	e8 fe e4 ff ff       	call   c0100dd3 <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
c01028d5:	e9 f6 00 00 00       	jmp    c01029d0 <trap_dispatch+0x21d>
    case T_SYSCALL:
        syscall();
c01028da:	e8 12 a5 00 00       	call   c010cdf1 <syscall>
        break;
c01028df:	e9 ec 00 00 00       	jmp    c01029d0 <trap_dispatch+0x21d>
        /* handle the timer interrupt */
        /* (1) After a timer interrupt, you should record this event using a global variable (increase it), such as ticks in kern/driver/clock.c
         * (2) Every TICK_NUM cycle, you can print some info using a funciton, such as print_ticks().
         * (3) Too Simple? Yes, I think so!
         */
        if (++ticks == TICK_NUM) {
c01028e4:	a1 d8 54 1c c0       	mov    0xc01c54d8,%eax
c01028e9:	83 c0 01             	add    $0x1,%eax
c01028ec:	a3 d8 54 1c c0       	mov    %eax,0xc01c54d8
c01028f1:	83 f8 64             	cmp    $0x64,%eax
c01028f4:	75 0f                	jne    c0102905 <trap_dispatch+0x152>
            print_ticks();
c01028f6:	e8 f7 f8 ff ff       	call   c01021f2 <print_ticks>
            ticks = 0;
c01028fb:	c7 05 d8 54 1c c0 00 	movl   $0x0,0xc01c54d8
c0102902:	00 00 00 
        /* LAB7 2014011381 */
        /* you should upate you lab6 code
         * IMPORTANT FUNCTIONS:
	     * run_timer_list
         */
        ++ticks;
c0102905:	a1 d8 54 1c c0       	mov    0xc01c54d8,%eax
c010290a:	83 c0 01             	add    $0x1,%eax
c010290d:	a3 d8 54 1c c0       	mov    %eax,0xc01c54d8
        run_timer_list();
c0102912:	e8 23 a2 00 00       	call   c010cb3a <run_timer_list>
        break;
c0102917:	e9 b4 00 00 00       	jmp    c01029d0 <trap_dispatch+0x21d>
    case IRQ_OFFSET + IRQ_COM1:
        c = cons_getc();
c010291c:	e8 20 ee ff ff       	call   c0101741 <cons_getc>
c0102921:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("serial [%03d] %c\n", c, c);
c0102924:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c0102928:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c010292c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102930:	89 44 24 04          	mov    %eax,0x4(%esp)
c0102934:	c7 04 24 39 e2 10 c0 	movl   $0xc010e239,(%esp)
c010293b:	e8 18 da ff ff       	call   c0100358 <cprintf>
        break;
c0102940:	e9 8b 00 00 00       	jmp    c01029d0 <trap_dispatch+0x21d>
    case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
c0102945:	e8 f7 ed ff ff       	call   c0101741 <cons_getc>
c010294a:	88 45 f3             	mov    %al,-0xd(%ebp)
        cprintf("kbd [%03d] %c\n", c, c);
c010294d:	0f be 55 f3          	movsbl -0xd(%ebp),%edx
c0102951:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c0102955:	89 54 24 08          	mov    %edx,0x8(%esp)
c0102959:	89 44 24 04          	mov    %eax,0x4(%esp)
c010295d:	c7 04 24 4b e2 10 c0 	movl   $0xc010e24b,(%esp)
c0102964:	e8 ef d9 ff ff       	call   c0100358 <cprintf>
        break;
c0102969:	eb 65                	jmp    c01029d0 <trap_dispatch+0x21d>
    //LAB1 CHALLENGE 1 : 2014011381 you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c010296b:	c7 44 24 08 5a e2 10 	movl   $0xc010e25a,0x8(%esp)
c0102972:	c0 
c0102973:	c7 44 24 04 09 01 00 	movl   $0x109,0x4(%esp)
c010297a:	00 
c010297b:	c7 04 24 6e df 10 c0 	movl   $0xc010df6e,(%esp)
c0102982:	e8 4c e4 ff ff       	call   c0100dd3 <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c0102987:	8b 45 08             	mov    0x8(%ebp),%eax
c010298a:	89 04 24             	mov    %eax,(%esp)
c010298d:	e8 5c fa ff ff       	call   c01023ee <print_trapframe>
        if (current != NULL) {
c0102992:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c0102997:	85 c0                	test   %eax,%eax
c0102999:	74 18                	je     c01029b3 <trap_dispatch+0x200>
            cprintf("unhandled trap.\n");
c010299b:	c7 04 24 6a e2 10 c0 	movl   $0xc010e26a,(%esp)
c01029a2:	e8 b1 d9 ff ff       	call   c0100358 <cprintf>
            do_exit(-E_KILLED);
c01029a7:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c01029ae:	e8 03 89 00 00       	call   c010b2b6 <do_exit>
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c01029b3:	c7 44 24 08 7b e2 10 	movl   $0xc010e27b,0x8(%esp)
c01029ba:	c0 
c01029bb:	c7 44 24 04 16 01 00 	movl   $0x116,0x4(%esp)
c01029c2:	00 
c01029c3:	c7 04 24 6e df 10 c0 	movl   $0xc010df6e,(%esp)
c01029ca:	e8 04 e4 ff ff       	call   c0100dd3 <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c01029cf:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c01029d0:	c9                   	leave  
c01029d1:	c3                   	ret    

c01029d2 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c01029d2:	55                   	push   %ebp
c01029d3:	89 e5                	mov    %esp,%ebp
c01029d5:	83 ec 28             	sub    $0x28,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c01029d8:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c01029dd:	85 c0                	test   %eax,%eax
c01029df:	75 0d                	jne    c01029ee <trap+0x1c>
        trap_dispatch(tf);
c01029e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01029e4:	89 04 24             	mov    %eax,(%esp)
c01029e7:	e8 c7 fd ff ff       	call   c01027b3 <trap_dispatch>
c01029ec:	eb 6c                	jmp    c0102a5a <trap+0x88>
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c01029ee:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c01029f3:	8b 40 3c             	mov    0x3c(%eax),%eax
c01029f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c01029f9:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c01029fe:	8b 55 08             	mov    0x8(%ebp),%edx
c0102a01:	89 50 3c             	mov    %edx,0x3c(%eax)

        bool in_kernel = trap_in_kernel(tf);
c0102a04:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a07:	89 04 24             	mov    %eax,(%esp)
c0102a0a:	e8 c9 f9 ff ff       	call   c01023d8 <trap_in_kernel>
c0102a0f:	89 45 f0             	mov    %eax,-0x10(%ebp)

        trap_dispatch(tf);
c0102a12:	8b 45 08             	mov    0x8(%ebp),%eax
c0102a15:	89 04 24             	mov    %eax,(%esp)
c0102a18:	e8 96 fd ff ff       	call   c01027b3 <trap_dispatch>

        current->tf = otf;
c0102a1d:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c0102a22:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102a25:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102a28:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102a2c:	75 2c                	jne    c0102a5a <trap+0x88>
            if (current->flags & PF_EXITING) {
c0102a2e:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c0102a33:	8b 40 44             	mov    0x44(%eax),%eax
c0102a36:	83 e0 01             	and    $0x1,%eax
c0102a39:	85 c0                	test   %eax,%eax
c0102a3b:	74 0c                	je     c0102a49 <trap+0x77>
                do_exit(-E_KILLED);
c0102a3d:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c0102a44:	e8 6d 88 00 00       	call   c010b2b6 <do_exit>
            }
            if (current->need_resched) {
c0102a49:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c0102a4e:	8b 40 10             	mov    0x10(%eax),%eax
c0102a51:	85 c0                	test   %eax,%eax
c0102a53:	74 05                	je     c0102a5a <trap+0x88>
                schedule();
c0102a55:	e8 53 9e 00 00       	call   c010c8ad <schedule>
            }
        }
    }
}
c0102a5a:	c9                   	leave  
c0102a5b:	c3                   	ret    

c0102a5c <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c0102a5c:	1e                   	push   %ds
    pushl %es
c0102a5d:	06                   	push   %es
    pushl %fs
c0102a5e:	0f a0                	push   %fs
    pushl %gs
c0102a60:	0f a8                	push   %gs
    pushal
c0102a62:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c0102a63:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c0102a68:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c0102a6a:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c0102a6c:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c0102a6d:	e8 60 ff ff ff       	call   c01029d2 <trap>

    # pop the pushed stack pointer
    popl %esp
c0102a72:	5c                   	pop    %esp

c0102a73 <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c0102a73:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c0102a74:	0f a9                	pop    %gs
    popl %fs
c0102a76:	0f a1                	pop    %fs
    popl %es
c0102a78:	07                   	pop    %es
    popl %ds
c0102a79:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c0102a7a:	83 c4 08             	add    $0x8,%esp
    iret
c0102a7d:	cf                   	iret   

c0102a7e <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c0102a7e:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c0102a82:	e9 ec ff ff ff       	jmp    c0102a73 <__trapret>

c0102a87 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102a87:	6a 00                	push   $0x0
  pushl $0
c0102a89:	6a 00                	push   $0x0
  jmp __alltraps
c0102a8b:	e9 cc ff ff ff       	jmp    c0102a5c <__alltraps>

c0102a90 <vector1>:
.globl vector1
vector1:
  pushl $0
c0102a90:	6a 00                	push   $0x0
  pushl $1
c0102a92:	6a 01                	push   $0x1
  jmp __alltraps
c0102a94:	e9 c3 ff ff ff       	jmp    c0102a5c <__alltraps>

c0102a99 <vector2>:
.globl vector2
vector2:
  pushl $0
c0102a99:	6a 00                	push   $0x0
  pushl $2
c0102a9b:	6a 02                	push   $0x2
  jmp __alltraps
c0102a9d:	e9 ba ff ff ff       	jmp    c0102a5c <__alltraps>

c0102aa2 <vector3>:
.globl vector3
vector3:
  pushl $0
c0102aa2:	6a 00                	push   $0x0
  pushl $3
c0102aa4:	6a 03                	push   $0x3
  jmp __alltraps
c0102aa6:	e9 b1 ff ff ff       	jmp    c0102a5c <__alltraps>

c0102aab <vector4>:
.globl vector4
vector4:
  pushl $0
c0102aab:	6a 00                	push   $0x0
  pushl $4
c0102aad:	6a 04                	push   $0x4
  jmp __alltraps
c0102aaf:	e9 a8 ff ff ff       	jmp    c0102a5c <__alltraps>

c0102ab4 <vector5>:
.globl vector5
vector5:
  pushl $0
c0102ab4:	6a 00                	push   $0x0
  pushl $5
c0102ab6:	6a 05                	push   $0x5
  jmp __alltraps
c0102ab8:	e9 9f ff ff ff       	jmp    c0102a5c <__alltraps>

c0102abd <vector6>:
.globl vector6
vector6:
  pushl $0
c0102abd:	6a 00                	push   $0x0
  pushl $6
c0102abf:	6a 06                	push   $0x6
  jmp __alltraps
c0102ac1:	e9 96 ff ff ff       	jmp    c0102a5c <__alltraps>

c0102ac6 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102ac6:	6a 00                	push   $0x0
  pushl $7
c0102ac8:	6a 07                	push   $0x7
  jmp __alltraps
c0102aca:	e9 8d ff ff ff       	jmp    c0102a5c <__alltraps>

c0102acf <vector8>:
.globl vector8
vector8:
  pushl $8
c0102acf:	6a 08                	push   $0x8
  jmp __alltraps
c0102ad1:	e9 86 ff ff ff       	jmp    c0102a5c <__alltraps>

c0102ad6 <vector9>:
.globl vector9
vector9:
  pushl $9
c0102ad6:	6a 09                	push   $0x9
  jmp __alltraps
c0102ad8:	e9 7f ff ff ff       	jmp    c0102a5c <__alltraps>

c0102add <vector10>:
.globl vector10
vector10:
  pushl $10
c0102add:	6a 0a                	push   $0xa
  jmp __alltraps
c0102adf:	e9 78 ff ff ff       	jmp    c0102a5c <__alltraps>

c0102ae4 <vector11>:
.globl vector11
vector11:
  pushl $11
c0102ae4:	6a 0b                	push   $0xb
  jmp __alltraps
c0102ae6:	e9 71 ff ff ff       	jmp    c0102a5c <__alltraps>

c0102aeb <vector12>:
.globl vector12
vector12:
  pushl $12
c0102aeb:	6a 0c                	push   $0xc
  jmp __alltraps
c0102aed:	e9 6a ff ff ff       	jmp    c0102a5c <__alltraps>

c0102af2 <vector13>:
.globl vector13
vector13:
  pushl $13
c0102af2:	6a 0d                	push   $0xd
  jmp __alltraps
c0102af4:	e9 63 ff ff ff       	jmp    c0102a5c <__alltraps>

c0102af9 <vector14>:
.globl vector14
vector14:
  pushl $14
c0102af9:	6a 0e                	push   $0xe
  jmp __alltraps
c0102afb:	e9 5c ff ff ff       	jmp    c0102a5c <__alltraps>

c0102b00 <vector15>:
.globl vector15
vector15:
  pushl $0
c0102b00:	6a 00                	push   $0x0
  pushl $15
c0102b02:	6a 0f                	push   $0xf
  jmp __alltraps
c0102b04:	e9 53 ff ff ff       	jmp    c0102a5c <__alltraps>

c0102b09 <vector16>:
.globl vector16
vector16:
  pushl $0
c0102b09:	6a 00                	push   $0x0
  pushl $16
c0102b0b:	6a 10                	push   $0x10
  jmp __alltraps
c0102b0d:	e9 4a ff ff ff       	jmp    c0102a5c <__alltraps>

c0102b12 <vector17>:
.globl vector17
vector17:
  pushl $17
c0102b12:	6a 11                	push   $0x11
  jmp __alltraps
c0102b14:	e9 43 ff ff ff       	jmp    c0102a5c <__alltraps>

c0102b19 <vector18>:
.globl vector18
vector18:
  pushl $0
c0102b19:	6a 00                	push   $0x0
  pushl $18
c0102b1b:	6a 12                	push   $0x12
  jmp __alltraps
c0102b1d:	e9 3a ff ff ff       	jmp    c0102a5c <__alltraps>

c0102b22 <vector19>:
.globl vector19
vector19:
  pushl $0
c0102b22:	6a 00                	push   $0x0
  pushl $19
c0102b24:	6a 13                	push   $0x13
  jmp __alltraps
c0102b26:	e9 31 ff ff ff       	jmp    c0102a5c <__alltraps>

c0102b2b <vector20>:
.globl vector20
vector20:
  pushl $0
c0102b2b:	6a 00                	push   $0x0
  pushl $20
c0102b2d:	6a 14                	push   $0x14
  jmp __alltraps
c0102b2f:	e9 28 ff ff ff       	jmp    c0102a5c <__alltraps>

c0102b34 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102b34:	6a 00                	push   $0x0
  pushl $21
c0102b36:	6a 15                	push   $0x15
  jmp __alltraps
c0102b38:	e9 1f ff ff ff       	jmp    c0102a5c <__alltraps>

c0102b3d <vector22>:
.globl vector22
vector22:
  pushl $0
c0102b3d:	6a 00                	push   $0x0
  pushl $22
c0102b3f:	6a 16                	push   $0x16
  jmp __alltraps
c0102b41:	e9 16 ff ff ff       	jmp    c0102a5c <__alltraps>

c0102b46 <vector23>:
.globl vector23
vector23:
  pushl $0
c0102b46:	6a 00                	push   $0x0
  pushl $23
c0102b48:	6a 17                	push   $0x17
  jmp __alltraps
c0102b4a:	e9 0d ff ff ff       	jmp    c0102a5c <__alltraps>

c0102b4f <vector24>:
.globl vector24
vector24:
  pushl $0
c0102b4f:	6a 00                	push   $0x0
  pushl $24
c0102b51:	6a 18                	push   $0x18
  jmp __alltraps
c0102b53:	e9 04 ff ff ff       	jmp    c0102a5c <__alltraps>

c0102b58 <vector25>:
.globl vector25
vector25:
  pushl $0
c0102b58:	6a 00                	push   $0x0
  pushl $25
c0102b5a:	6a 19                	push   $0x19
  jmp __alltraps
c0102b5c:	e9 fb fe ff ff       	jmp    c0102a5c <__alltraps>

c0102b61 <vector26>:
.globl vector26
vector26:
  pushl $0
c0102b61:	6a 00                	push   $0x0
  pushl $26
c0102b63:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102b65:	e9 f2 fe ff ff       	jmp    c0102a5c <__alltraps>

c0102b6a <vector27>:
.globl vector27
vector27:
  pushl $0
c0102b6a:	6a 00                	push   $0x0
  pushl $27
c0102b6c:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102b6e:	e9 e9 fe ff ff       	jmp    c0102a5c <__alltraps>

c0102b73 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102b73:	6a 00                	push   $0x0
  pushl $28
c0102b75:	6a 1c                	push   $0x1c
  jmp __alltraps
c0102b77:	e9 e0 fe ff ff       	jmp    c0102a5c <__alltraps>

c0102b7c <vector29>:
.globl vector29
vector29:
  pushl $0
c0102b7c:	6a 00                	push   $0x0
  pushl $29
c0102b7e:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102b80:	e9 d7 fe ff ff       	jmp    c0102a5c <__alltraps>

c0102b85 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102b85:	6a 00                	push   $0x0
  pushl $30
c0102b87:	6a 1e                	push   $0x1e
  jmp __alltraps
c0102b89:	e9 ce fe ff ff       	jmp    c0102a5c <__alltraps>

c0102b8e <vector31>:
.globl vector31
vector31:
  pushl $0
c0102b8e:	6a 00                	push   $0x0
  pushl $31
c0102b90:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102b92:	e9 c5 fe ff ff       	jmp    c0102a5c <__alltraps>

c0102b97 <vector32>:
.globl vector32
vector32:
  pushl $0
c0102b97:	6a 00                	push   $0x0
  pushl $32
c0102b99:	6a 20                	push   $0x20
  jmp __alltraps
c0102b9b:	e9 bc fe ff ff       	jmp    c0102a5c <__alltraps>

c0102ba0 <vector33>:
.globl vector33
vector33:
  pushl $0
c0102ba0:	6a 00                	push   $0x0
  pushl $33
c0102ba2:	6a 21                	push   $0x21
  jmp __alltraps
c0102ba4:	e9 b3 fe ff ff       	jmp    c0102a5c <__alltraps>

c0102ba9 <vector34>:
.globl vector34
vector34:
  pushl $0
c0102ba9:	6a 00                	push   $0x0
  pushl $34
c0102bab:	6a 22                	push   $0x22
  jmp __alltraps
c0102bad:	e9 aa fe ff ff       	jmp    c0102a5c <__alltraps>

c0102bb2 <vector35>:
.globl vector35
vector35:
  pushl $0
c0102bb2:	6a 00                	push   $0x0
  pushl $35
c0102bb4:	6a 23                	push   $0x23
  jmp __alltraps
c0102bb6:	e9 a1 fe ff ff       	jmp    c0102a5c <__alltraps>

c0102bbb <vector36>:
.globl vector36
vector36:
  pushl $0
c0102bbb:	6a 00                	push   $0x0
  pushl $36
c0102bbd:	6a 24                	push   $0x24
  jmp __alltraps
c0102bbf:	e9 98 fe ff ff       	jmp    c0102a5c <__alltraps>

c0102bc4 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102bc4:	6a 00                	push   $0x0
  pushl $37
c0102bc6:	6a 25                	push   $0x25
  jmp __alltraps
c0102bc8:	e9 8f fe ff ff       	jmp    c0102a5c <__alltraps>

c0102bcd <vector38>:
.globl vector38
vector38:
  pushl $0
c0102bcd:	6a 00                	push   $0x0
  pushl $38
c0102bcf:	6a 26                	push   $0x26
  jmp __alltraps
c0102bd1:	e9 86 fe ff ff       	jmp    c0102a5c <__alltraps>

c0102bd6 <vector39>:
.globl vector39
vector39:
  pushl $0
c0102bd6:	6a 00                	push   $0x0
  pushl $39
c0102bd8:	6a 27                	push   $0x27
  jmp __alltraps
c0102bda:	e9 7d fe ff ff       	jmp    c0102a5c <__alltraps>

c0102bdf <vector40>:
.globl vector40
vector40:
  pushl $0
c0102bdf:	6a 00                	push   $0x0
  pushl $40
c0102be1:	6a 28                	push   $0x28
  jmp __alltraps
c0102be3:	e9 74 fe ff ff       	jmp    c0102a5c <__alltraps>

c0102be8 <vector41>:
.globl vector41
vector41:
  pushl $0
c0102be8:	6a 00                	push   $0x0
  pushl $41
c0102bea:	6a 29                	push   $0x29
  jmp __alltraps
c0102bec:	e9 6b fe ff ff       	jmp    c0102a5c <__alltraps>

c0102bf1 <vector42>:
.globl vector42
vector42:
  pushl $0
c0102bf1:	6a 00                	push   $0x0
  pushl $42
c0102bf3:	6a 2a                	push   $0x2a
  jmp __alltraps
c0102bf5:	e9 62 fe ff ff       	jmp    c0102a5c <__alltraps>

c0102bfa <vector43>:
.globl vector43
vector43:
  pushl $0
c0102bfa:	6a 00                	push   $0x0
  pushl $43
c0102bfc:	6a 2b                	push   $0x2b
  jmp __alltraps
c0102bfe:	e9 59 fe ff ff       	jmp    c0102a5c <__alltraps>

c0102c03 <vector44>:
.globl vector44
vector44:
  pushl $0
c0102c03:	6a 00                	push   $0x0
  pushl $44
c0102c05:	6a 2c                	push   $0x2c
  jmp __alltraps
c0102c07:	e9 50 fe ff ff       	jmp    c0102a5c <__alltraps>

c0102c0c <vector45>:
.globl vector45
vector45:
  pushl $0
c0102c0c:	6a 00                	push   $0x0
  pushl $45
c0102c0e:	6a 2d                	push   $0x2d
  jmp __alltraps
c0102c10:	e9 47 fe ff ff       	jmp    c0102a5c <__alltraps>

c0102c15 <vector46>:
.globl vector46
vector46:
  pushl $0
c0102c15:	6a 00                	push   $0x0
  pushl $46
c0102c17:	6a 2e                	push   $0x2e
  jmp __alltraps
c0102c19:	e9 3e fe ff ff       	jmp    c0102a5c <__alltraps>

c0102c1e <vector47>:
.globl vector47
vector47:
  pushl $0
c0102c1e:	6a 00                	push   $0x0
  pushl $47
c0102c20:	6a 2f                	push   $0x2f
  jmp __alltraps
c0102c22:	e9 35 fe ff ff       	jmp    c0102a5c <__alltraps>

c0102c27 <vector48>:
.globl vector48
vector48:
  pushl $0
c0102c27:	6a 00                	push   $0x0
  pushl $48
c0102c29:	6a 30                	push   $0x30
  jmp __alltraps
c0102c2b:	e9 2c fe ff ff       	jmp    c0102a5c <__alltraps>

c0102c30 <vector49>:
.globl vector49
vector49:
  pushl $0
c0102c30:	6a 00                	push   $0x0
  pushl $49
c0102c32:	6a 31                	push   $0x31
  jmp __alltraps
c0102c34:	e9 23 fe ff ff       	jmp    c0102a5c <__alltraps>

c0102c39 <vector50>:
.globl vector50
vector50:
  pushl $0
c0102c39:	6a 00                	push   $0x0
  pushl $50
c0102c3b:	6a 32                	push   $0x32
  jmp __alltraps
c0102c3d:	e9 1a fe ff ff       	jmp    c0102a5c <__alltraps>

c0102c42 <vector51>:
.globl vector51
vector51:
  pushl $0
c0102c42:	6a 00                	push   $0x0
  pushl $51
c0102c44:	6a 33                	push   $0x33
  jmp __alltraps
c0102c46:	e9 11 fe ff ff       	jmp    c0102a5c <__alltraps>

c0102c4b <vector52>:
.globl vector52
vector52:
  pushl $0
c0102c4b:	6a 00                	push   $0x0
  pushl $52
c0102c4d:	6a 34                	push   $0x34
  jmp __alltraps
c0102c4f:	e9 08 fe ff ff       	jmp    c0102a5c <__alltraps>

c0102c54 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102c54:	6a 00                	push   $0x0
  pushl $53
c0102c56:	6a 35                	push   $0x35
  jmp __alltraps
c0102c58:	e9 ff fd ff ff       	jmp    c0102a5c <__alltraps>

c0102c5d <vector54>:
.globl vector54
vector54:
  pushl $0
c0102c5d:	6a 00                	push   $0x0
  pushl $54
c0102c5f:	6a 36                	push   $0x36
  jmp __alltraps
c0102c61:	e9 f6 fd ff ff       	jmp    c0102a5c <__alltraps>

c0102c66 <vector55>:
.globl vector55
vector55:
  pushl $0
c0102c66:	6a 00                	push   $0x0
  pushl $55
c0102c68:	6a 37                	push   $0x37
  jmp __alltraps
c0102c6a:	e9 ed fd ff ff       	jmp    c0102a5c <__alltraps>

c0102c6f <vector56>:
.globl vector56
vector56:
  pushl $0
c0102c6f:	6a 00                	push   $0x0
  pushl $56
c0102c71:	6a 38                	push   $0x38
  jmp __alltraps
c0102c73:	e9 e4 fd ff ff       	jmp    c0102a5c <__alltraps>

c0102c78 <vector57>:
.globl vector57
vector57:
  pushl $0
c0102c78:	6a 00                	push   $0x0
  pushl $57
c0102c7a:	6a 39                	push   $0x39
  jmp __alltraps
c0102c7c:	e9 db fd ff ff       	jmp    c0102a5c <__alltraps>

c0102c81 <vector58>:
.globl vector58
vector58:
  pushl $0
c0102c81:	6a 00                	push   $0x0
  pushl $58
c0102c83:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102c85:	e9 d2 fd ff ff       	jmp    c0102a5c <__alltraps>

c0102c8a <vector59>:
.globl vector59
vector59:
  pushl $0
c0102c8a:	6a 00                	push   $0x0
  pushl $59
c0102c8c:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102c8e:	e9 c9 fd ff ff       	jmp    c0102a5c <__alltraps>

c0102c93 <vector60>:
.globl vector60
vector60:
  pushl $0
c0102c93:	6a 00                	push   $0x0
  pushl $60
c0102c95:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102c97:	e9 c0 fd ff ff       	jmp    c0102a5c <__alltraps>

c0102c9c <vector61>:
.globl vector61
vector61:
  pushl $0
c0102c9c:	6a 00                	push   $0x0
  pushl $61
c0102c9e:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102ca0:	e9 b7 fd ff ff       	jmp    c0102a5c <__alltraps>

c0102ca5 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102ca5:	6a 00                	push   $0x0
  pushl $62
c0102ca7:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102ca9:	e9 ae fd ff ff       	jmp    c0102a5c <__alltraps>

c0102cae <vector63>:
.globl vector63
vector63:
  pushl $0
c0102cae:	6a 00                	push   $0x0
  pushl $63
c0102cb0:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102cb2:	e9 a5 fd ff ff       	jmp    c0102a5c <__alltraps>

c0102cb7 <vector64>:
.globl vector64
vector64:
  pushl $0
c0102cb7:	6a 00                	push   $0x0
  pushl $64
c0102cb9:	6a 40                	push   $0x40
  jmp __alltraps
c0102cbb:	e9 9c fd ff ff       	jmp    c0102a5c <__alltraps>

c0102cc0 <vector65>:
.globl vector65
vector65:
  pushl $0
c0102cc0:	6a 00                	push   $0x0
  pushl $65
c0102cc2:	6a 41                	push   $0x41
  jmp __alltraps
c0102cc4:	e9 93 fd ff ff       	jmp    c0102a5c <__alltraps>

c0102cc9 <vector66>:
.globl vector66
vector66:
  pushl $0
c0102cc9:	6a 00                	push   $0x0
  pushl $66
c0102ccb:	6a 42                	push   $0x42
  jmp __alltraps
c0102ccd:	e9 8a fd ff ff       	jmp    c0102a5c <__alltraps>

c0102cd2 <vector67>:
.globl vector67
vector67:
  pushl $0
c0102cd2:	6a 00                	push   $0x0
  pushl $67
c0102cd4:	6a 43                	push   $0x43
  jmp __alltraps
c0102cd6:	e9 81 fd ff ff       	jmp    c0102a5c <__alltraps>

c0102cdb <vector68>:
.globl vector68
vector68:
  pushl $0
c0102cdb:	6a 00                	push   $0x0
  pushl $68
c0102cdd:	6a 44                	push   $0x44
  jmp __alltraps
c0102cdf:	e9 78 fd ff ff       	jmp    c0102a5c <__alltraps>

c0102ce4 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102ce4:	6a 00                	push   $0x0
  pushl $69
c0102ce6:	6a 45                	push   $0x45
  jmp __alltraps
c0102ce8:	e9 6f fd ff ff       	jmp    c0102a5c <__alltraps>

c0102ced <vector70>:
.globl vector70
vector70:
  pushl $0
c0102ced:	6a 00                	push   $0x0
  pushl $70
c0102cef:	6a 46                	push   $0x46
  jmp __alltraps
c0102cf1:	e9 66 fd ff ff       	jmp    c0102a5c <__alltraps>

c0102cf6 <vector71>:
.globl vector71
vector71:
  pushl $0
c0102cf6:	6a 00                	push   $0x0
  pushl $71
c0102cf8:	6a 47                	push   $0x47
  jmp __alltraps
c0102cfa:	e9 5d fd ff ff       	jmp    c0102a5c <__alltraps>

c0102cff <vector72>:
.globl vector72
vector72:
  pushl $0
c0102cff:	6a 00                	push   $0x0
  pushl $72
c0102d01:	6a 48                	push   $0x48
  jmp __alltraps
c0102d03:	e9 54 fd ff ff       	jmp    c0102a5c <__alltraps>

c0102d08 <vector73>:
.globl vector73
vector73:
  pushl $0
c0102d08:	6a 00                	push   $0x0
  pushl $73
c0102d0a:	6a 49                	push   $0x49
  jmp __alltraps
c0102d0c:	e9 4b fd ff ff       	jmp    c0102a5c <__alltraps>

c0102d11 <vector74>:
.globl vector74
vector74:
  pushl $0
c0102d11:	6a 00                	push   $0x0
  pushl $74
c0102d13:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102d15:	e9 42 fd ff ff       	jmp    c0102a5c <__alltraps>

c0102d1a <vector75>:
.globl vector75
vector75:
  pushl $0
c0102d1a:	6a 00                	push   $0x0
  pushl $75
c0102d1c:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102d1e:	e9 39 fd ff ff       	jmp    c0102a5c <__alltraps>

c0102d23 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102d23:	6a 00                	push   $0x0
  pushl $76
c0102d25:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102d27:	e9 30 fd ff ff       	jmp    c0102a5c <__alltraps>

c0102d2c <vector77>:
.globl vector77
vector77:
  pushl $0
c0102d2c:	6a 00                	push   $0x0
  pushl $77
c0102d2e:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102d30:	e9 27 fd ff ff       	jmp    c0102a5c <__alltraps>

c0102d35 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102d35:	6a 00                	push   $0x0
  pushl $78
c0102d37:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102d39:	e9 1e fd ff ff       	jmp    c0102a5c <__alltraps>

c0102d3e <vector79>:
.globl vector79
vector79:
  pushl $0
c0102d3e:	6a 00                	push   $0x0
  pushl $79
c0102d40:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102d42:	e9 15 fd ff ff       	jmp    c0102a5c <__alltraps>

c0102d47 <vector80>:
.globl vector80
vector80:
  pushl $0
c0102d47:	6a 00                	push   $0x0
  pushl $80
c0102d49:	6a 50                	push   $0x50
  jmp __alltraps
c0102d4b:	e9 0c fd ff ff       	jmp    c0102a5c <__alltraps>

c0102d50 <vector81>:
.globl vector81
vector81:
  pushl $0
c0102d50:	6a 00                	push   $0x0
  pushl $81
c0102d52:	6a 51                	push   $0x51
  jmp __alltraps
c0102d54:	e9 03 fd ff ff       	jmp    c0102a5c <__alltraps>

c0102d59 <vector82>:
.globl vector82
vector82:
  pushl $0
c0102d59:	6a 00                	push   $0x0
  pushl $82
c0102d5b:	6a 52                	push   $0x52
  jmp __alltraps
c0102d5d:	e9 fa fc ff ff       	jmp    c0102a5c <__alltraps>

c0102d62 <vector83>:
.globl vector83
vector83:
  pushl $0
c0102d62:	6a 00                	push   $0x0
  pushl $83
c0102d64:	6a 53                	push   $0x53
  jmp __alltraps
c0102d66:	e9 f1 fc ff ff       	jmp    c0102a5c <__alltraps>

c0102d6b <vector84>:
.globl vector84
vector84:
  pushl $0
c0102d6b:	6a 00                	push   $0x0
  pushl $84
c0102d6d:	6a 54                	push   $0x54
  jmp __alltraps
c0102d6f:	e9 e8 fc ff ff       	jmp    c0102a5c <__alltraps>

c0102d74 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102d74:	6a 00                	push   $0x0
  pushl $85
c0102d76:	6a 55                	push   $0x55
  jmp __alltraps
c0102d78:	e9 df fc ff ff       	jmp    c0102a5c <__alltraps>

c0102d7d <vector86>:
.globl vector86
vector86:
  pushl $0
c0102d7d:	6a 00                	push   $0x0
  pushl $86
c0102d7f:	6a 56                	push   $0x56
  jmp __alltraps
c0102d81:	e9 d6 fc ff ff       	jmp    c0102a5c <__alltraps>

c0102d86 <vector87>:
.globl vector87
vector87:
  pushl $0
c0102d86:	6a 00                	push   $0x0
  pushl $87
c0102d88:	6a 57                	push   $0x57
  jmp __alltraps
c0102d8a:	e9 cd fc ff ff       	jmp    c0102a5c <__alltraps>

c0102d8f <vector88>:
.globl vector88
vector88:
  pushl $0
c0102d8f:	6a 00                	push   $0x0
  pushl $88
c0102d91:	6a 58                	push   $0x58
  jmp __alltraps
c0102d93:	e9 c4 fc ff ff       	jmp    c0102a5c <__alltraps>

c0102d98 <vector89>:
.globl vector89
vector89:
  pushl $0
c0102d98:	6a 00                	push   $0x0
  pushl $89
c0102d9a:	6a 59                	push   $0x59
  jmp __alltraps
c0102d9c:	e9 bb fc ff ff       	jmp    c0102a5c <__alltraps>

c0102da1 <vector90>:
.globl vector90
vector90:
  pushl $0
c0102da1:	6a 00                	push   $0x0
  pushl $90
c0102da3:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102da5:	e9 b2 fc ff ff       	jmp    c0102a5c <__alltraps>

c0102daa <vector91>:
.globl vector91
vector91:
  pushl $0
c0102daa:	6a 00                	push   $0x0
  pushl $91
c0102dac:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102dae:	e9 a9 fc ff ff       	jmp    c0102a5c <__alltraps>

c0102db3 <vector92>:
.globl vector92
vector92:
  pushl $0
c0102db3:	6a 00                	push   $0x0
  pushl $92
c0102db5:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102db7:	e9 a0 fc ff ff       	jmp    c0102a5c <__alltraps>

c0102dbc <vector93>:
.globl vector93
vector93:
  pushl $0
c0102dbc:	6a 00                	push   $0x0
  pushl $93
c0102dbe:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102dc0:	e9 97 fc ff ff       	jmp    c0102a5c <__alltraps>

c0102dc5 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102dc5:	6a 00                	push   $0x0
  pushl $94
c0102dc7:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102dc9:	e9 8e fc ff ff       	jmp    c0102a5c <__alltraps>

c0102dce <vector95>:
.globl vector95
vector95:
  pushl $0
c0102dce:	6a 00                	push   $0x0
  pushl $95
c0102dd0:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102dd2:	e9 85 fc ff ff       	jmp    c0102a5c <__alltraps>

c0102dd7 <vector96>:
.globl vector96
vector96:
  pushl $0
c0102dd7:	6a 00                	push   $0x0
  pushl $96
c0102dd9:	6a 60                	push   $0x60
  jmp __alltraps
c0102ddb:	e9 7c fc ff ff       	jmp    c0102a5c <__alltraps>

c0102de0 <vector97>:
.globl vector97
vector97:
  pushl $0
c0102de0:	6a 00                	push   $0x0
  pushl $97
c0102de2:	6a 61                	push   $0x61
  jmp __alltraps
c0102de4:	e9 73 fc ff ff       	jmp    c0102a5c <__alltraps>

c0102de9 <vector98>:
.globl vector98
vector98:
  pushl $0
c0102de9:	6a 00                	push   $0x0
  pushl $98
c0102deb:	6a 62                	push   $0x62
  jmp __alltraps
c0102ded:	e9 6a fc ff ff       	jmp    c0102a5c <__alltraps>

c0102df2 <vector99>:
.globl vector99
vector99:
  pushl $0
c0102df2:	6a 00                	push   $0x0
  pushl $99
c0102df4:	6a 63                	push   $0x63
  jmp __alltraps
c0102df6:	e9 61 fc ff ff       	jmp    c0102a5c <__alltraps>

c0102dfb <vector100>:
.globl vector100
vector100:
  pushl $0
c0102dfb:	6a 00                	push   $0x0
  pushl $100
c0102dfd:	6a 64                	push   $0x64
  jmp __alltraps
c0102dff:	e9 58 fc ff ff       	jmp    c0102a5c <__alltraps>

c0102e04 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102e04:	6a 00                	push   $0x0
  pushl $101
c0102e06:	6a 65                	push   $0x65
  jmp __alltraps
c0102e08:	e9 4f fc ff ff       	jmp    c0102a5c <__alltraps>

c0102e0d <vector102>:
.globl vector102
vector102:
  pushl $0
c0102e0d:	6a 00                	push   $0x0
  pushl $102
c0102e0f:	6a 66                	push   $0x66
  jmp __alltraps
c0102e11:	e9 46 fc ff ff       	jmp    c0102a5c <__alltraps>

c0102e16 <vector103>:
.globl vector103
vector103:
  pushl $0
c0102e16:	6a 00                	push   $0x0
  pushl $103
c0102e18:	6a 67                	push   $0x67
  jmp __alltraps
c0102e1a:	e9 3d fc ff ff       	jmp    c0102a5c <__alltraps>

c0102e1f <vector104>:
.globl vector104
vector104:
  pushl $0
c0102e1f:	6a 00                	push   $0x0
  pushl $104
c0102e21:	6a 68                	push   $0x68
  jmp __alltraps
c0102e23:	e9 34 fc ff ff       	jmp    c0102a5c <__alltraps>

c0102e28 <vector105>:
.globl vector105
vector105:
  pushl $0
c0102e28:	6a 00                	push   $0x0
  pushl $105
c0102e2a:	6a 69                	push   $0x69
  jmp __alltraps
c0102e2c:	e9 2b fc ff ff       	jmp    c0102a5c <__alltraps>

c0102e31 <vector106>:
.globl vector106
vector106:
  pushl $0
c0102e31:	6a 00                	push   $0x0
  pushl $106
c0102e33:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102e35:	e9 22 fc ff ff       	jmp    c0102a5c <__alltraps>

c0102e3a <vector107>:
.globl vector107
vector107:
  pushl $0
c0102e3a:	6a 00                	push   $0x0
  pushl $107
c0102e3c:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102e3e:	e9 19 fc ff ff       	jmp    c0102a5c <__alltraps>

c0102e43 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102e43:	6a 00                	push   $0x0
  pushl $108
c0102e45:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102e47:	e9 10 fc ff ff       	jmp    c0102a5c <__alltraps>

c0102e4c <vector109>:
.globl vector109
vector109:
  pushl $0
c0102e4c:	6a 00                	push   $0x0
  pushl $109
c0102e4e:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102e50:	e9 07 fc ff ff       	jmp    c0102a5c <__alltraps>

c0102e55 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102e55:	6a 00                	push   $0x0
  pushl $110
c0102e57:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102e59:	e9 fe fb ff ff       	jmp    c0102a5c <__alltraps>

c0102e5e <vector111>:
.globl vector111
vector111:
  pushl $0
c0102e5e:	6a 00                	push   $0x0
  pushl $111
c0102e60:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102e62:	e9 f5 fb ff ff       	jmp    c0102a5c <__alltraps>

c0102e67 <vector112>:
.globl vector112
vector112:
  pushl $0
c0102e67:	6a 00                	push   $0x0
  pushl $112
c0102e69:	6a 70                	push   $0x70
  jmp __alltraps
c0102e6b:	e9 ec fb ff ff       	jmp    c0102a5c <__alltraps>

c0102e70 <vector113>:
.globl vector113
vector113:
  pushl $0
c0102e70:	6a 00                	push   $0x0
  pushl $113
c0102e72:	6a 71                	push   $0x71
  jmp __alltraps
c0102e74:	e9 e3 fb ff ff       	jmp    c0102a5c <__alltraps>

c0102e79 <vector114>:
.globl vector114
vector114:
  pushl $0
c0102e79:	6a 00                	push   $0x0
  pushl $114
c0102e7b:	6a 72                	push   $0x72
  jmp __alltraps
c0102e7d:	e9 da fb ff ff       	jmp    c0102a5c <__alltraps>

c0102e82 <vector115>:
.globl vector115
vector115:
  pushl $0
c0102e82:	6a 00                	push   $0x0
  pushl $115
c0102e84:	6a 73                	push   $0x73
  jmp __alltraps
c0102e86:	e9 d1 fb ff ff       	jmp    c0102a5c <__alltraps>

c0102e8b <vector116>:
.globl vector116
vector116:
  pushl $0
c0102e8b:	6a 00                	push   $0x0
  pushl $116
c0102e8d:	6a 74                	push   $0x74
  jmp __alltraps
c0102e8f:	e9 c8 fb ff ff       	jmp    c0102a5c <__alltraps>

c0102e94 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102e94:	6a 00                	push   $0x0
  pushl $117
c0102e96:	6a 75                	push   $0x75
  jmp __alltraps
c0102e98:	e9 bf fb ff ff       	jmp    c0102a5c <__alltraps>

c0102e9d <vector118>:
.globl vector118
vector118:
  pushl $0
c0102e9d:	6a 00                	push   $0x0
  pushl $118
c0102e9f:	6a 76                	push   $0x76
  jmp __alltraps
c0102ea1:	e9 b6 fb ff ff       	jmp    c0102a5c <__alltraps>

c0102ea6 <vector119>:
.globl vector119
vector119:
  pushl $0
c0102ea6:	6a 00                	push   $0x0
  pushl $119
c0102ea8:	6a 77                	push   $0x77
  jmp __alltraps
c0102eaa:	e9 ad fb ff ff       	jmp    c0102a5c <__alltraps>

c0102eaf <vector120>:
.globl vector120
vector120:
  pushl $0
c0102eaf:	6a 00                	push   $0x0
  pushl $120
c0102eb1:	6a 78                	push   $0x78
  jmp __alltraps
c0102eb3:	e9 a4 fb ff ff       	jmp    c0102a5c <__alltraps>

c0102eb8 <vector121>:
.globl vector121
vector121:
  pushl $0
c0102eb8:	6a 00                	push   $0x0
  pushl $121
c0102eba:	6a 79                	push   $0x79
  jmp __alltraps
c0102ebc:	e9 9b fb ff ff       	jmp    c0102a5c <__alltraps>

c0102ec1 <vector122>:
.globl vector122
vector122:
  pushl $0
c0102ec1:	6a 00                	push   $0x0
  pushl $122
c0102ec3:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102ec5:	e9 92 fb ff ff       	jmp    c0102a5c <__alltraps>

c0102eca <vector123>:
.globl vector123
vector123:
  pushl $0
c0102eca:	6a 00                	push   $0x0
  pushl $123
c0102ecc:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102ece:	e9 89 fb ff ff       	jmp    c0102a5c <__alltraps>

c0102ed3 <vector124>:
.globl vector124
vector124:
  pushl $0
c0102ed3:	6a 00                	push   $0x0
  pushl $124
c0102ed5:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102ed7:	e9 80 fb ff ff       	jmp    c0102a5c <__alltraps>

c0102edc <vector125>:
.globl vector125
vector125:
  pushl $0
c0102edc:	6a 00                	push   $0x0
  pushl $125
c0102ede:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102ee0:	e9 77 fb ff ff       	jmp    c0102a5c <__alltraps>

c0102ee5 <vector126>:
.globl vector126
vector126:
  pushl $0
c0102ee5:	6a 00                	push   $0x0
  pushl $126
c0102ee7:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102ee9:	e9 6e fb ff ff       	jmp    c0102a5c <__alltraps>

c0102eee <vector127>:
.globl vector127
vector127:
  pushl $0
c0102eee:	6a 00                	push   $0x0
  pushl $127
c0102ef0:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102ef2:	e9 65 fb ff ff       	jmp    c0102a5c <__alltraps>

c0102ef7 <vector128>:
.globl vector128
vector128:
  pushl $0
c0102ef7:	6a 00                	push   $0x0
  pushl $128
c0102ef9:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102efe:	e9 59 fb ff ff       	jmp    c0102a5c <__alltraps>

c0102f03 <vector129>:
.globl vector129
vector129:
  pushl $0
c0102f03:	6a 00                	push   $0x0
  pushl $129
c0102f05:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102f0a:	e9 4d fb ff ff       	jmp    c0102a5c <__alltraps>

c0102f0f <vector130>:
.globl vector130
vector130:
  pushl $0
c0102f0f:	6a 00                	push   $0x0
  pushl $130
c0102f11:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102f16:	e9 41 fb ff ff       	jmp    c0102a5c <__alltraps>

c0102f1b <vector131>:
.globl vector131
vector131:
  pushl $0
c0102f1b:	6a 00                	push   $0x0
  pushl $131
c0102f1d:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102f22:	e9 35 fb ff ff       	jmp    c0102a5c <__alltraps>

c0102f27 <vector132>:
.globl vector132
vector132:
  pushl $0
c0102f27:	6a 00                	push   $0x0
  pushl $132
c0102f29:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102f2e:	e9 29 fb ff ff       	jmp    c0102a5c <__alltraps>

c0102f33 <vector133>:
.globl vector133
vector133:
  pushl $0
c0102f33:	6a 00                	push   $0x0
  pushl $133
c0102f35:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102f3a:	e9 1d fb ff ff       	jmp    c0102a5c <__alltraps>

c0102f3f <vector134>:
.globl vector134
vector134:
  pushl $0
c0102f3f:	6a 00                	push   $0x0
  pushl $134
c0102f41:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0102f46:	e9 11 fb ff ff       	jmp    c0102a5c <__alltraps>

c0102f4b <vector135>:
.globl vector135
vector135:
  pushl $0
c0102f4b:	6a 00                	push   $0x0
  pushl $135
c0102f4d:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0102f52:	e9 05 fb ff ff       	jmp    c0102a5c <__alltraps>

c0102f57 <vector136>:
.globl vector136
vector136:
  pushl $0
c0102f57:	6a 00                	push   $0x0
  pushl $136
c0102f59:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0102f5e:	e9 f9 fa ff ff       	jmp    c0102a5c <__alltraps>

c0102f63 <vector137>:
.globl vector137
vector137:
  pushl $0
c0102f63:	6a 00                	push   $0x0
  pushl $137
c0102f65:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0102f6a:	e9 ed fa ff ff       	jmp    c0102a5c <__alltraps>

c0102f6f <vector138>:
.globl vector138
vector138:
  pushl $0
c0102f6f:	6a 00                	push   $0x0
  pushl $138
c0102f71:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0102f76:	e9 e1 fa ff ff       	jmp    c0102a5c <__alltraps>

c0102f7b <vector139>:
.globl vector139
vector139:
  pushl $0
c0102f7b:	6a 00                	push   $0x0
  pushl $139
c0102f7d:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0102f82:	e9 d5 fa ff ff       	jmp    c0102a5c <__alltraps>

c0102f87 <vector140>:
.globl vector140
vector140:
  pushl $0
c0102f87:	6a 00                	push   $0x0
  pushl $140
c0102f89:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0102f8e:	e9 c9 fa ff ff       	jmp    c0102a5c <__alltraps>

c0102f93 <vector141>:
.globl vector141
vector141:
  pushl $0
c0102f93:	6a 00                	push   $0x0
  pushl $141
c0102f95:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0102f9a:	e9 bd fa ff ff       	jmp    c0102a5c <__alltraps>

c0102f9f <vector142>:
.globl vector142
vector142:
  pushl $0
c0102f9f:	6a 00                	push   $0x0
  pushl $142
c0102fa1:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0102fa6:	e9 b1 fa ff ff       	jmp    c0102a5c <__alltraps>

c0102fab <vector143>:
.globl vector143
vector143:
  pushl $0
c0102fab:	6a 00                	push   $0x0
  pushl $143
c0102fad:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0102fb2:	e9 a5 fa ff ff       	jmp    c0102a5c <__alltraps>

c0102fb7 <vector144>:
.globl vector144
vector144:
  pushl $0
c0102fb7:	6a 00                	push   $0x0
  pushl $144
c0102fb9:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0102fbe:	e9 99 fa ff ff       	jmp    c0102a5c <__alltraps>

c0102fc3 <vector145>:
.globl vector145
vector145:
  pushl $0
c0102fc3:	6a 00                	push   $0x0
  pushl $145
c0102fc5:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0102fca:	e9 8d fa ff ff       	jmp    c0102a5c <__alltraps>

c0102fcf <vector146>:
.globl vector146
vector146:
  pushl $0
c0102fcf:	6a 00                	push   $0x0
  pushl $146
c0102fd1:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0102fd6:	e9 81 fa ff ff       	jmp    c0102a5c <__alltraps>

c0102fdb <vector147>:
.globl vector147
vector147:
  pushl $0
c0102fdb:	6a 00                	push   $0x0
  pushl $147
c0102fdd:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c0102fe2:	e9 75 fa ff ff       	jmp    c0102a5c <__alltraps>

c0102fe7 <vector148>:
.globl vector148
vector148:
  pushl $0
c0102fe7:	6a 00                	push   $0x0
  pushl $148
c0102fe9:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c0102fee:	e9 69 fa ff ff       	jmp    c0102a5c <__alltraps>

c0102ff3 <vector149>:
.globl vector149
vector149:
  pushl $0
c0102ff3:	6a 00                	push   $0x0
  pushl $149
c0102ff5:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c0102ffa:	e9 5d fa ff ff       	jmp    c0102a5c <__alltraps>

c0102fff <vector150>:
.globl vector150
vector150:
  pushl $0
c0102fff:	6a 00                	push   $0x0
  pushl $150
c0103001:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c0103006:	e9 51 fa ff ff       	jmp    c0102a5c <__alltraps>

c010300b <vector151>:
.globl vector151
vector151:
  pushl $0
c010300b:	6a 00                	push   $0x0
  pushl $151
c010300d:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c0103012:	e9 45 fa ff ff       	jmp    c0102a5c <__alltraps>

c0103017 <vector152>:
.globl vector152
vector152:
  pushl $0
c0103017:	6a 00                	push   $0x0
  pushl $152
c0103019:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c010301e:	e9 39 fa ff ff       	jmp    c0102a5c <__alltraps>

c0103023 <vector153>:
.globl vector153
vector153:
  pushl $0
c0103023:	6a 00                	push   $0x0
  pushl $153
c0103025:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c010302a:	e9 2d fa ff ff       	jmp    c0102a5c <__alltraps>

c010302f <vector154>:
.globl vector154
vector154:
  pushl $0
c010302f:	6a 00                	push   $0x0
  pushl $154
c0103031:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c0103036:	e9 21 fa ff ff       	jmp    c0102a5c <__alltraps>

c010303b <vector155>:
.globl vector155
vector155:
  pushl $0
c010303b:	6a 00                	push   $0x0
  pushl $155
c010303d:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c0103042:	e9 15 fa ff ff       	jmp    c0102a5c <__alltraps>

c0103047 <vector156>:
.globl vector156
vector156:
  pushl $0
c0103047:	6a 00                	push   $0x0
  pushl $156
c0103049:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c010304e:	e9 09 fa ff ff       	jmp    c0102a5c <__alltraps>

c0103053 <vector157>:
.globl vector157
vector157:
  pushl $0
c0103053:	6a 00                	push   $0x0
  pushl $157
c0103055:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c010305a:	e9 fd f9 ff ff       	jmp    c0102a5c <__alltraps>

c010305f <vector158>:
.globl vector158
vector158:
  pushl $0
c010305f:	6a 00                	push   $0x0
  pushl $158
c0103061:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c0103066:	e9 f1 f9 ff ff       	jmp    c0102a5c <__alltraps>

c010306b <vector159>:
.globl vector159
vector159:
  pushl $0
c010306b:	6a 00                	push   $0x0
  pushl $159
c010306d:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c0103072:	e9 e5 f9 ff ff       	jmp    c0102a5c <__alltraps>

c0103077 <vector160>:
.globl vector160
vector160:
  pushl $0
c0103077:	6a 00                	push   $0x0
  pushl $160
c0103079:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c010307e:	e9 d9 f9 ff ff       	jmp    c0102a5c <__alltraps>

c0103083 <vector161>:
.globl vector161
vector161:
  pushl $0
c0103083:	6a 00                	push   $0x0
  pushl $161
c0103085:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c010308a:	e9 cd f9 ff ff       	jmp    c0102a5c <__alltraps>

c010308f <vector162>:
.globl vector162
vector162:
  pushl $0
c010308f:	6a 00                	push   $0x0
  pushl $162
c0103091:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c0103096:	e9 c1 f9 ff ff       	jmp    c0102a5c <__alltraps>

c010309b <vector163>:
.globl vector163
vector163:
  pushl $0
c010309b:	6a 00                	push   $0x0
  pushl $163
c010309d:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c01030a2:	e9 b5 f9 ff ff       	jmp    c0102a5c <__alltraps>

c01030a7 <vector164>:
.globl vector164
vector164:
  pushl $0
c01030a7:	6a 00                	push   $0x0
  pushl $164
c01030a9:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c01030ae:	e9 a9 f9 ff ff       	jmp    c0102a5c <__alltraps>

c01030b3 <vector165>:
.globl vector165
vector165:
  pushl $0
c01030b3:	6a 00                	push   $0x0
  pushl $165
c01030b5:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c01030ba:	e9 9d f9 ff ff       	jmp    c0102a5c <__alltraps>

c01030bf <vector166>:
.globl vector166
vector166:
  pushl $0
c01030bf:	6a 00                	push   $0x0
  pushl $166
c01030c1:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c01030c6:	e9 91 f9 ff ff       	jmp    c0102a5c <__alltraps>

c01030cb <vector167>:
.globl vector167
vector167:
  pushl $0
c01030cb:	6a 00                	push   $0x0
  pushl $167
c01030cd:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c01030d2:	e9 85 f9 ff ff       	jmp    c0102a5c <__alltraps>

c01030d7 <vector168>:
.globl vector168
vector168:
  pushl $0
c01030d7:	6a 00                	push   $0x0
  pushl $168
c01030d9:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c01030de:	e9 79 f9 ff ff       	jmp    c0102a5c <__alltraps>

c01030e3 <vector169>:
.globl vector169
vector169:
  pushl $0
c01030e3:	6a 00                	push   $0x0
  pushl $169
c01030e5:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c01030ea:	e9 6d f9 ff ff       	jmp    c0102a5c <__alltraps>

c01030ef <vector170>:
.globl vector170
vector170:
  pushl $0
c01030ef:	6a 00                	push   $0x0
  pushl $170
c01030f1:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c01030f6:	e9 61 f9 ff ff       	jmp    c0102a5c <__alltraps>

c01030fb <vector171>:
.globl vector171
vector171:
  pushl $0
c01030fb:	6a 00                	push   $0x0
  pushl $171
c01030fd:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c0103102:	e9 55 f9 ff ff       	jmp    c0102a5c <__alltraps>

c0103107 <vector172>:
.globl vector172
vector172:
  pushl $0
c0103107:	6a 00                	push   $0x0
  pushl $172
c0103109:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c010310e:	e9 49 f9 ff ff       	jmp    c0102a5c <__alltraps>

c0103113 <vector173>:
.globl vector173
vector173:
  pushl $0
c0103113:	6a 00                	push   $0x0
  pushl $173
c0103115:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c010311a:	e9 3d f9 ff ff       	jmp    c0102a5c <__alltraps>

c010311f <vector174>:
.globl vector174
vector174:
  pushl $0
c010311f:	6a 00                	push   $0x0
  pushl $174
c0103121:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c0103126:	e9 31 f9 ff ff       	jmp    c0102a5c <__alltraps>

c010312b <vector175>:
.globl vector175
vector175:
  pushl $0
c010312b:	6a 00                	push   $0x0
  pushl $175
c010312d:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c0103132:	e9 25 f9 ff ff       	jmp    c0102a5c <__alltraps>

c0103137 <vector176>:
.globl vector176
vector176:
  pushl $0
c0103137:	6a 00                	push   $0x0
  pushl $176
c0103139:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c010313e:	e9 19 f9 ff ff       	jmp    c0102a5c <__alltraps>

c0103143 <vector177>:
.globl vector177
vector177:
  pushl $0
c0103143:	6a 00                	push   $0x0
  pushl $177
c0103145:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c010314a:	e9 0d f9 ff ff       	jmp    c0102a5c <__alltraps>

c010314f <vector178>:
.globl vector178
vector178:
  pushl $0
c010314f:	6a 00                	push   $0x0
  pushl $178
c0103151:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c0103156:	e9 01 f9 ff ff       	jmp    c0102a5c <__alltraps>

c010315b <vector179>:
.globl vector179
vector179:
  pushl $0
c010315b:	6a 00                	push   $0x0
  pushl $179
c010315d:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c0103162:	e9 f5 f8 ff ff       	jmp    c0102a5c <__alltraps>

c0103167 <vector180>:
.globl vector180
vector180:
  pushl $0
c0103167:	6a 00                	push   $0x0
  pushl $180
c0103169:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c010316e:	e9 e9 f8 ff ff       	jmp    c0102a5c <__alltraps>

c0103173 <vector181>:
.globl vector181
vector181:
  pushl $0
c0103173:	6a 00                	push   $0x0
  pushl $181
c0103175:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c010317a:	e9 dd f8 ff ff       	jmp    c0102a5c <__alltraps>

c010317f <vector182>:
.globl vector182
vector182:
  pushl $0
c010317f:	6a 00                	push   $0x0
  pushl $182
c0103181:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0103186:	e9 d1 f8 ff ff       	jmp    c0102a5c <__alltraps>

c010318b <vector183>:
.globl vector183
vector183:
  pushl $0
c010318b:	6a 00                	push   $0x0
  pushl $183
c010318d:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c0103192:	e9 c5 f8 ff ff       	jmp    c0102a5c <__alltraps>

c0103197 <vector184>:
.globl vector184
vector184:
  pushl $0
c0103197:	6a 00                	push   $0x0
  pushl $184
c0103199:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c010319e:	e9 b9 f8 ff ff       	jmp    c0102a5c <__alltraps>

c01031a3 <vector185>:
.globl vector185
vector185:
  pushl $0
c01031a3:	6a 00                	push   $0x0
  pushl $185
c01031a5:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c01031aa:	e9 ad f8 ff ff       	jmp    c0102a5c <__alltraps>

c01031af <vector186>:
.globl vector186
vector186:
  pushl $0
c01031af:	6a 00                	push   $0x0
  pushl $186
c01031b1:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c01031b6:	e9 a1 f8 ff ff       	jmp    c0102a5c <__alltraps>

c01031bb <vector187>:
.globl vector187
vector187:
  pushl $0
c01031bb:	6a 00                	push   $0x0
  pushl $187
c01031bd:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c01031c2:	e9 95 f8 ff ff       	jmp    c0102a5c <__alltraps>

c01031c7 <vector188>:
.globl vector188
vector188:
  pushl $0
c01031c7:	6a 00                	push   $0x0
  pushl $188
c01031c9:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c01031ce:	e9 89 f8 ff ff       	jmp    c0102a5c <__alltraps>

c01031d3 <vector189>:
.globl vector189
vector189:
  pushl $0
c01031d3:	6a 00                	push   $0x0
  pushl $189
c01031d5:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c01031da:	e9 7d f8 ff ff       	jmp    c0102a5c <__alltraps>

c01031df <vector190>:
.globl vector190
vector190:
  pushl $0
c01031df:	6a 00                	push   $0x0
  pushl $190
c01031e1:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c01031e6:	e9 71 f8 ff ff       	jmp    c0102a5c <__alltraps>

c01031eb <vector191>:
.globl vector191
vector191:
  pushl $0
c01031eb:	6a 00                	push   $0x0
  pushl $191
c01031ed:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c01031f2:	e9 65 f8 ff ff       	jmp    c0102a5c <__alltraps>

c01031f7 <vector192>:
.globl vector192
vector192:
  pushl $0
c01031f7:	6a 00                	push   $0x0
  pushl $192
c01031f9:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c01031fe:	e9 59 f8 ff ff       	jmp    c0102a5c <__alltraps>

c0103203 <vector193>:
.globl vector193
vector193:
  pushl $0
c0103203:	6a 00                	push   $0x0
  pushl $193
c0103205:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c010320a:	e9 4d f8 ff ff       	jmp    c0102a5c <__alltraps>

c010320f <vector194>:
.globl vector194
vector194:
  pushl $0
c010320f:	6a 00                	push   $0x0
  pushl $194
c0103211:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c0103216:	e9 41 f8 ff ff       	jmp    c0102a5c <__alltraps>

c010321b <vector195>:
.globl vector195
vector195:
  pushl $0
c010321b:	6a 00                	push   $0x0
  pushl $195
c010321d:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c0103222:	e9 35 f8 ff ff       	jmp    c0102a5c <__alltraps>

c0103227 <vector196>:
.globl vector196
vector196:
  pushl $0
c0103227:	6a 00                	push   $0x0
  pushl $196
c0103229:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c010322e:	e9 29 f8 ff ff       	jmp    c0102a5c <__alltraps>

c0103233 <vector197>:
.globl vector197
vector197:
  pushl $0
c0103233:	6a 00                	push   $0x0
  pushl $197
c0103235:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c010323a:	e9 1d f8 ff ff       	jmp    c0102a5c <__alltraps>

c010323f <vector198>:
.globl vector198
vector198:
  pushl $0
c010323f:	6a 00                	push   $0x0
  pushl $198
c0103241:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c0103246:	e9 11 f8 ff ff       	jmp    c0102a5c <__alltraps>

c010324b <vector199>:
.globl vector199
vector199:
  pushl $0
c010324b:	6a 00                	push   $0x0
  pushl $199
c010324d:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c0103252:	e9 05 f8 ff ff       	jmp    c0102a5c <__alltraps>

c0103257 <vector200>:
.globl vector200
vector200:
  pushl $0
c0103257:	6a 00                	push   $0x0
  pushl $200
c0103259:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c010325e:	e9 f9 f7 ff ff       	jmp    c0102a5c <__alltraps>

c0103263 <vector201>:
.globl vector201
vector201:
  pushl $0
c0103263:	6a 00                	push   $0x0
  pushl $201
c0103265:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c010326a:	e9 ed f7 ff ff       	jmp    c0102a5c <__alltraps>

c010326f <vector202>:
.globl vector202
vector202:
  pushl $0
c010326f:	6a 00                	push   $0x0
  pushl $202
c0103271:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c0103276:	e9 e1 f7 ff ff       	jmp    c0102a5c <__alltraps>

c010327b <vector203>:
.globl vector203
vector203:
  pushl $0
c010327b:	6a 00                	push   $0x0
  pushl $203
c010327d:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c0103282:	e9 d5 f7 ff ff       	jmp    c0102a5c <__alltraps>

c0103287 <vector204>:
.globl vector204
vector204:
  pushl $0
c0103287:	6a 00                	push   $0x0
  pushl $204
c0103289:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c010328e:	e9 c9 f7 ff ff       	jmp    c0102a5c <__alltraps>

c0103293 <vector205>:
.globl vector205
vector205:
  pushl $0
c0103293:	6a 00                	push   $0x0
  pushl $205
c0103295:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c010329a:	e9 bd f7 ff ff       	jmp    c0102a5c <__alltraps>

c010329f <vector206>:
.globl vector206
vector206:
  pushl $0
c010329f:	6a 00                	push   $0x0
  pushl $206
c01032a1:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c01032a6:	e9 b1 f7 ff ff       	jmp    c0102a5c <__alltraps>

c01032ab <vector207>:
.globl vector207
vector207:
  pushl $0
c01032ab:	6a 00                	push   $0x0
  pushl $207
c01032ad:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c01032b2:	e9 a5 f7 ff ff       	jmp    c0102a5c <__alltraps>

c01032b7 <vector208>:
.globl vector208
vector208:
  pushl $0
c01032b7:	6a 00                	push   $0x0
  pushl $208
c01032b9:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c01032be:	e9 99 f7 ff ff       	jmp    c0102a5c <__alltraps>

c01032c3 <vector209>:
.globl vector209
vector209:
  pushl $0
c01032c3:	6a 00                	push   $0x0
  pushl $209
c01032c5:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c01032ca:	e9 8d f7 ff ff       	jmp    c0102a5c <__alltraps>

c01032cf <vector210>:
.globl vector210
vector210:
  pushl $0
c01032cf:	6a 00                	push   $0x0
  pushl $210
c01032d1:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c01032d6:	e9 81 f7 ff ff       	jmp    c0102a5c <__alltraps>

c01032db <vector211>:
.globl vector211
vector211:
  pushl $0
c01032db:	6a 00                	push   $0x0
  pushl $211
c01032dd:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c01032e2:	e9 75 f7 ff ff       	jmp    c0102a5c <__alltraps>

c01032e7 <vector212>:
.globl vector212
vector212:
  pushl $0
c01032e7:	6a 00                	push   $0x0
  pushl $212
c01032e9:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c01032ee:	e9 69 f7 ff ff       	jmp    c0102a5c <__alltraps>

c01032f3 <vector213>:
.globl vector213
vector213:
  pushl $0
c01032f3:	6a 00                	push   $0x0
  pushl $213
c01032f5:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c01032fa:	e9 5d f7 ff ff       	jmp    c0102a5c <__alltraps>

c01032ff <vector214>:
.globl vector214
vector214:
  pushl $0
c01032ff:	6a 00                	push   $0x0
  pushl $214
c0103301:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c0103306:	e9 51 f7 ff ff       	jmp    c0102a5c <__alltraps>

c010330b <vector215>:
.globl vector215
vector215:
  pushl $0
c010330b:	6a 00                	push   $0x0
  pushl $215
c010330d:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c0103312:	e9 45 f7 ff ff       	jmp    c0102a5c <__alltraps>

c0103317 <vector216>:
.globl vector216
vector216:
  pushl $0
c0103317:	6a 00                	push   $0x0
  pushl $216
c0103319:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c010331e:	e9 39 f7 ff ff       	jmp    c0102a5c <__alltraps>

c0103323 <vector217>:
.globl vector217
vector217:
  pushl $0
c0103323:	6a 00                	push   $0x0
  pushl $217
c0103325:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c010332a:	e9 2d f7 ff ff       	jmp    c0102a5c <__alltraps>

c010332f <vector218>:
.globl vector218
vector218:
  pushl $0
c010332f:	6a 00                	push   $0x0
  pushl $218
c0103331:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c0103336:	e9 21 f7 ff ff       	jmp    c0102a5c <__alltraps>

c010333b <vector219>:
.globl vector219
vector219:
  pushl $0
c010333b:	6a 00                	push   $0x0
  pushl $219
c010333d:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c0103342:	e9 15 f7 ff ff       	jmp    c0102a5c <__alltraps>

c0103347 <vector220>:
.globl vector220
vector220:
  pushl $0
c0103347:	6a 00                	push   $0x0
  pushl $220
c0103349:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c010334e:	e9 09 f7 ff ff       	jmp    c0102a5c <__alltraps>

c0103353 <vector221>:
.globl vector221
vector221:
  pushl $0
c0103353:	6a 00                	push   $0x0
  pushl $221
c0103355:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c010335a:	e9 fd f6 ff ff       	jmp    c0102a5c <__alltraps>

c010335f <vector222>:
.globl vector222
vector222:
  pushl $0
c010335f:	6a 00                	push   $0x0
  pushl $222
c0103361:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c0103366:	e9 f1 f6 ff ff       	jmp    c0102a5c <__alltraps>

c010336b <vector223>:
.globl vector223
vector223:
  pushl $0
c010336b:	6a 00                	push   $0x0
  pushl $223
c010336d:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c0103372:	e9 e5 f6 ff ff       	jmp    c0102a5c <__alltraps>

c0103377 <vector224>:
.globl vector224
vector224:
  pushl $0
c0103377:	6a 00                	push   $0x0
  pushl $224
c0103379:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c010337e:	e9 d9 f6 ff ff       	jmp    c0102a5c <__alltraps>

c0103383 <vector225>:
.globl vector225
vector225:
  pushl $0
c0103383:	6a 00                	push   $0x0
  pushl $225
c0103385:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c010338a:	e9 cd f6 ff ff       	jmp    c0102a5c <__alltraps>

c010338f <vector226>:
.globl vector226
vector226:
  pushl $0
c010338f:	6a 00                	push   $0x0
  pushl $226
c0103391:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c0103396:	e9 c1 f6 ff ff       	jmp    c0102a5c <__alltraps>

c010339b <vector227>:
.globl vector227
vector227:
  pushl $0
c010339b:	6a 00                	push   $0x0
  pushl $227
c010339d:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c01033a2:	e9 b5 f6 ff ff       	jmp    c0102a5c <__alltraps>

c01033a7 <vector228>:
.globl vector228
vector228:
  pushl $0
c01033a7:	6a 00                	push   $0x0
  pushl $228
c01033a9:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c01033ae:	e9 a9 f6 ff ff       	jmp    c0102a5c <__alltraps>

c01033b3 <vector229>:
.globl vector229
vector229:
  pushl $0
c01033b3:	6a 00                	push   $0x0
  pushl $229
c01033b5:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c01033ba:	e9 9d f6 ff ff       	jmp    c0102a5c <__alltraps>

c01033bf <vector230>:
.globl vector230
vector230:
  pushl $0
c01033bf:	6a 00                	push   $0x0
  pushl $230
c01033c1:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c01033c6:	e9 91 f6 ff ff       	jmp    c0102a5c <__alltraps>

c01033cb <vector231>:
.globl vector231
vector231:
  pushl $0
c01033cb:	6a 00                	push   $0x0
  pushl $231
c01033cd:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c01033d2:	e9 85 f6 ff ff       	jmp    c0102a5c <__alltraps>

c01033d7 <vector232>:
.globl vector232
vector232:
  pushl $0
c01033d7:	6a 00                	push   $0x0
  pushl $232
c01033d9:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c01033de:	e9 79 f6 ff ff       	jmp    c0102a5c <__alltraps>

c01033e3 <vector233>:
.globl vector233
vector233:
  pushl $0
c01033e3:	6a 00                	push   $0x0
  pushl $233
c01033e5:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c01033ea:	e9 6d f6 ff ff       	jmp    c0102a5c <__alltraps>

c01033ef <vector234>:
.globl vector234
vector234:
  pushl $0
c01033ef:	6a 00                	push   $0x0
  pushl $234
c01033f1:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c01033f6:	e9 61 f6 ff ff       	jmp    c0102a5c <__alltraps>

c01033fb <vector235>:
.globl vector235
vector235:
  pushl $0
c01033fb:	6a 00                	push   $0x0
  pushl $235
c01033fd:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c0103402:	e9 55 f6 ff ff       	jmp    c0102a5c <__alltraps>

c0103407 <vector236>:
.globl vector236
vector236:
  pushl $0
c0103407:	6a 00                	push   $0x0
  pushl $236
c0103409:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c010340e:	e9 49 f6 ff ff       	jmp    c0102a5c <__alltraps>

c0103413 <vector237>:
.globl vector237
vector237:
  pushl $0
c0103413:	6a 00                	push   $0x0
  pushl $237
c0103415:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c010341a:	e9 3d f6 ff ff       	jmp    c0102a5c <__alltraps>

c010341f <vector238>:
.globl vector238
vector238:
  pushl $0
c010341f:	6a 00                	push   $0x0
  pushl $238
c0103421:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c0103426:	e9 31 f6 ff ff       	jmp    c0102a5c <__alltraps>

c010342b <vector239>:
.globl vector239
vector239:
  pushl $0
c010342b:	6a 00                	push   $0x0
  pushl $239
c010342d:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c0103432:	e9 25 f6 ff ff       	jmp    c0102a5c <__alltraps>

c0103437 <vector240>:
.globl vector240
vector240:
  pushl $0
c0103437:	6a 00                	push   $0x0
  pushl $240
c0103439:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c010343e:	e9 19 f6 ff ff       	jmp    c0102a5c <__alltraps>

c0103443 <vector241>:
.globl vector241
vector241:
  pushl $0
c0103443:	6a 00                	push   $0x0
  pushl $241
c0103445:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c010344a:	e9 0d f6 ff ff       	jmp    c0102a5c <__alltraps>

c010344f <vector242>:
.globl vector242
vector242:
  pushl $0
c010344f:	6a 00                	push   $0x0
  pushl $242
c0103451:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c0103456:	e9 01 f6 ff ff       	jmp    c0102a5c <__alltraps>

c010345b <vector243>:
.globl vector243
vector243:
  pushl $0
c010345b:	6a 00                	push   $0x0
  pushl $243
c010345d:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c0103462:	e9 f5 f5 ff ff       	jmp    c0102a5c <__alltraps>

c0103467 <vector244>:
.globl vector244
vector244:
  pushl $0
c0103467:	6a 00                	push   $0x0
  pushl $244
c0103469:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c010346e:	e9 e9 f5 ff ff       	jmp    c0102a5c <__alltraps>

c0103473 <vector245>:
.globl vector245
vector245:
  pushl $0
c0103473:	6a 00                	push   $0x0
  pushl $245
c0103475:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c010347a:	e9 dd f5 ff ff       	jmp    c0102a5c <__alltraps>

c010347f <vector246>:
.globl vector246
vector246:
  pushl $0
c010347f:	6a 00                	push   $0x0
  pushl $246
c0103481:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c0103486:	e9 d1 f5 ff ff       	jmp    c0102a5c <__alltraps>

c010348b <vector247>:
.globl vector247
vector247:
  pushl $0
c010348b:	6a 00                	push   $0x0
  pushl $247
c010348d:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c0103492:	e9 c5 f5 ff ff       	jmp    c0102a5c <__alltraps>

c0103497 <vector248>:
.globl vector248
vector248:
  pushl $0
c0103497:	6a 00                	push   $0x0
  pushl $248
c0103499:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c010349e:	e9 b9 f5 ff ff       	jmp    c0102a5c <__alltraps>

c01034a3 <vector249>:
.globl vector249
vector249:
  pushl $0
c01034a3:	6a 00                	push   $0x0
  pushl $249
c01034a5:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c01034aa:	e9 ad f5 ff ff       	jmp    c0102a5c <__alltraps>

c01034af <vector250>:
.globl vector250
vector250:
  pushl $0
c01034af:	6a 00                	push   $0x0
  pushl $250
c01034b1:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c01034b6:	e9 a1 f5 ff ff       	jmp    c0102a5c <__alltraps>

c01034bb <vector251>:
.globl vector251
vector251:
  pushl $0
c01034bb:	6a 00                	push   $0x0
  pushl $251
c01034bd:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c01034c2:	e9 95 f5 ff ff       	jmp    c0102a5c <__alltraps>

c01034c7 <vector252>:
.globl vector252
vector252:
  pushl $0
c01034c7:	6a 00                	push   $0x0
  pushl $252
c01034c9:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c01034ce:	e9 89 f5 ff ff       	jmp    c0102a5c <__alltraps>

c01034d3 <vector253>:
.globl vector253
vector253:
  pushl $0
c01034d3:	6a 00                	push   $0x0
  pushl $253
c01034d5:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c01034da:	e9 7d f5 ff ff       	jmp    c0102a5c <__alltraps>

c01034df <vector254>:
.globl vector254
vector254:
  pushl $0
c01034df:	6a 00                	push   $0x0
  pushl $254
c01034e1:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c01034e6:	e9 71 f5 ff ff       	jmp    c0102a5c <__alltraps>

c01034eb <vector255>:
.globl vector255
vector255:
  pushl $0
c01034eb:	6a 00                	push   $0x0
  pushl $255
c01034ed:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c01034f2:	e9 65 f5 ff ff       	jmp    c0102a5c <__alltraps>

c01034f7 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01034f7:	55                   	push   %ebp
c01034f8:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01034fa:	8b 55 08             	mov    0x8(%ebp),%edx
c01034fd:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c0103502:	29 c2                	sub    %eax,%edx
c0103504:	89 d0                	mov    %edx,%eax
c0103506:	c1 f8 05             	sar    $0x5,%eax
}
c0103509:	5d                   	pop    %ebp
c010350a:	c3                   	ret    

c010350b <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010350b:	55                   	push   %ebp
c010350c:	89 e5                	mov    %esp,%ebp
c010350e:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0103511:	8b 45 08             	mov    0x8(%ebp),%eax
c0103514:	89 04 24             	mov    %eax,(%esp)
c0103517:	e8 db ff ff ff       	call   c01034f7 <page2ppn>
c010351c:	c1 e0 0c             	shl    $0xc,%eax
}
c010351f:	c9                   	leave  
c0103520:	c3                   	ret    

c0103521 <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c0103521:	55                   	push   %ebp
c0103522:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0103524:	8b 45 08             	mov    0x8(%ebp),%eax
c0103527:	8b 00                	mov    (%eax),%eax
}
c0103529:	5d                   	pop    %ebp
c010352a:	c3                   	ret    

c010352b <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c010352b:	55                   	push   %ebp
c010352c:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c010352e:	8b 45 08             	mov    0x8(%ebp),%eax
c0103531:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103534:	89 10                	mov    %edx,(%eax)
}
c0103536:	5d                   	pop    %ebp
c0103537:	c3                   	ret    

c0103538 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c0103538:	55                   	push   %ebp
c0103539:	89 e5                	mov    %esp,%ebp
c010353b:	83 ec 10             	sub    $0x10,%esp
c010353e:	c7 45 fc dc 54 1c c0 	movl   $0xc01c54dc,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0103545:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103548:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010354b:	89 50 04             	mov    %edx,0x4(%eax)
c010354e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103551:	8b 50 04             	mov    0x4(%eax),%edx
c0103554:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0103557:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c0103559:	c7 05 e4 54 1c c0 00 	movl   $0x0,0xc01c54e4
c0103560:	00 00 00 
}
c0103563:	c9                   	leave  
c0103564:	c3                   	ret    

c0103565 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c0103565:	55                   	push   %ebp
c0103566:	89 e5                	mov    %esp,%ebp
c0103568:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c010356b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010356f:	75 24                	jne    c0103595 <default_init_memmap+0x30>
c0103571:	c7 44 24 0c 30 e4 10 	movl   $0xc010e430,0xc(%esp)
c0103578:	c0 
c0103579:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c0103580:	c0 
c0103581:	c7 44 24 04 46 00 00 	movl   $0x46,0x4(%esp)
c0103588:	00 
c0103589:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c0103590:	e8 3e d8 ff ff       	call   c0100dd3 <__panic>
    struct Page *p = base;
c0103595:	8b 45 08             	mov    0x8(%ebp),%eax
c0103598:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c010359b:	eb 7d                	jmp    c010361a <default_init_memmap+0xb5>
        assert(PageReserved(p));
c010359d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035a0:	83 c0 04             	add    $0x4,%eax
c01035a3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c01035aa:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01035ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01035b0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01035b3:	0f a3 10             	bt     %edx,(%eax)
c01035b6:	19 c0                	sbb    %eax,%eax
c01035b8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return oldbit != 0;
c01035bb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01035bf:	0f 95 c0             	setne  %al
c01035c2:	0f b6 c0             	movzbl %al,%eax
c01035c5:	85 c0                	test   %eax,%eax
c01035c7:	75 24                	jne    c01035ed <default_init_memmap+0x88>
c01035c9:	c7 44 24 0c 61 e4 10 	movl   $0xc010e461,0xc(%esp)
c01035d0:	c0 
c01035d1:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c01035d8:	c0 
c01035d9:	c7 44 24 04 49 00 00 	movl   $0x49,0x4(%esp)
c01035e0:	00 
c01035e1:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c01035e8:	e8 e6 d7 ff ff       	call   c0100dd3 <__panic>
        p->flags = p->property = 0;
c01035ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035f0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c01035f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01035fa:	8b 50 08             	mov    0x8(%eax),%edx
c01035fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103600:	89 50 04             	mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c0103603:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010360a:	00 
c010360b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010360e:	89 04 24             	mov    %eax,(%esp)
c0103611:	e8 15 ff ff ff       	call   c010352b <set_page_ref>

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0103616:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c010361a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010361d:	c1 e0 05             	shl    $0x5,%eax
c0103620:	89 c2                	mov    %eax,%edx
c0103622:	8b 45 08             	mov    0x8(%ebp),%eax
c0103625:	01 d0                	add    %edx,%eax
c0103627:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010362a:	0f 85 6d ff ff ff    	jne    c010359d <default_init_memmap+0x38>
        assert(PageReserved(p));
        p->flags = p->property = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c0103630:	8b 45 08             	mov    0x8(%ebp),%eax
c0103633:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103636:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0103639:	8b 45 08             	mov    0x8(%ebp),%eax
c010363c:	83 c0 04             	add    $0x4,%eax
c010363f:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c0103646:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103649:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010364c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010364f:	0f ab 10             	bts    %edx,(%eax)
    nr_free += n;
c0103652:	8b 15 e4 54 1c c0    	mov    0xc01c54e4,%edx
c0103658:	8b 45 0c             	mov    0xc(%ebp),%eax
c010365b:	01 d0                	add    %edx,%eax
c010365d:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4
    list_add_before(&free_list, &(base->page_link));
c0103662:	8b 45 08             	mov    0x8(%ebp),%eax
c0103665:	83 c0 0c             	add    $0xc,%eax
c0103668:	c7 45 dc dc 54 1c c0 	movl   $0xc01c54dc,-0x24(%ebp)
c010366f:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0103672:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103675:	8b 00                	mov    (%eax),%eax
c0103677:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010367a:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010367d:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103680:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103683:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103686:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103689:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010368c:	89 10                	mov    %edx,(%eax)
c010368e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0103691:	8b 10                	mov    (%eax),%edx
c0103693:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103696:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103699:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010369c:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010369f:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01036a2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01036a5:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01036a8:	89 10                	mov    %edx,(%eax)
}
c01036aa:	c9                   	leave  
c01036ab:	c3                   	ret    

c01036ac <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c01036ac:	55                   	push   %ebp
c01036ad:	89 e5                	mov    %esp,%ebp
c01036af:	81 ec 88 00 00 00    	sub    $0x88,%esp
    assert(n > 0);
c01036b5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01036b9:	75 24                	jne    c01036df <default_alloc_pages+0x33>
c01036bb:	c7 44 24 0c 30 e4 10 	movl   $0xc010e430,0xc(%esp)
c01036c2:	c0 
c01036c3:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c01036ca:	c0 
c01036cb:	c7 44 24 04 55 00 00 	movl   $0x55,0x4(%esp)
c01036d2:	00 
c01036d3:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c01036da:	e8 f4 d6 ff ff       	call   c0100dd3 <__panic>
    if (n > nr_free) {
c01036df:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c01036e4:	3b 45 08             	cmp    0x8(%ebp),%eax
c01036e7:	73 0a                	jae    c01036f3 <default_alloc_pages+0x47>
        return NULL;
c01036e9:	b8 00 00 00 00       	mov    $0x0,%eax
c01036ee:	e9 8a 01 00 00       	jmp    c010387d <default_alloc_pages+0x1d1>
    }
    struct Page *page = NULL;
c01036f3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_entry_t *le = &free_list;
c01036fa:	c7 45 f0 dc 54 1c c0 	movl   $0xc01c54dc,-0x10(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0103701:	eb 1c                	jmp    c010371f <default_alloc_pages+0x73>
        struct Page *p = le2page(le, page_link);
c0103703:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103706:	83 e8 0c             	sub    $0xc,%eax
c0103709:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p->property >= n) {
c010370c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010370f:	8b 40 08             	mov    0x8(%eax),%eax
c0103712:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103715:	72 08                	jb     c010371f <default_alloc_pages+0x73>
            page = p;
c0103717:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010371a:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c010371d:	eb 18                	jmp    c0103737 <default_alloc_pages+0x8b>
c010371f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103722:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103725:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0103728:	8b 40 04             	mov    0x4(%eax),%eax
    if (n > nr_free) {
        return NULL;
    }
    struct Page *page = NULL;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c010372b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010372e:	81 7d f0 dc 54 1c c0 	cmpl   $0xc01c54dc,-0x10(%ebp)
c0103735:	75 cc                	jne    c0103703 <default_alloc_pages+0x57>
        if (p->property >= n) {
            page = p;
            break;
        }
    }
    if (page != NULL) {
c0103737:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010373b:	0f 84 39 01 00 00    	je     c010387a <default_alloc_pages+0x1ce>
        ClearPageProperty(page);
c0103741:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103744:	83 c0 04             	add    $0x4,%eax
c0103747:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
c010374e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103751:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0103754:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0103757:	0f b3 10             	btr    %edx,(%eax)
        int prop = page->property;
c010375a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010375d:	8b 40 08             	mov    0x8(%eax),%eax
c0103760:	89 45 e8             	mov    %eax,-0x18(%ebp)
        page->property = 0;
c0103763:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103766:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        nr_free -= n;
c010376d:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c0103772:	2b 45 08             	sub    0x8(%ebp),%eax
c0103775:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4
        if (prop > n) {
c010377a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010377d:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103780:	0f 86 c9 00 00 00    	jbe    c010384f <default_alloc_pages+0x1a3>
            struct Page *p = page + n;
c0103786:	8b 45 08             	mov    0x8(%ebp),%eax
c0103789:	c1 e0 05             	shl    $0x5,%eax
c010378c:	89 c2                	mov    %eax,%edx
c010378e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103791:	01 d0                	add    %edx,%eax
c0103793:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            SetPageProperty(p);
c0103796:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103799:	83 c0 04             	add    $0x4,%eax
c010379c:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c01037a3:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01037a6:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01037a9:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01037ac:	0f ab 10             	bts    %edx,(%eax)
            p->property = prop - n;
c01037af:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01037b2:	2b 45 08             	sub    0x8(%ebp),%eax
c01037b5:	89 c2                	mov    %eax,%edx
c01037b7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01037ba:	89 50 08             	mov    %edx,0x8(%eax)
            list_entry_t *le0 = list_prev(&(page->page_link));
c01037bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037c0:	83 c0 0c             	add    $0xc,%eax
c01037c3:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c01037c6:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01037c9:	8b 00                	mov    (%eax),%eax
c01037cb:	89 45 e0             	mov    %eax,-0x20(%ebp)
            list_del(&(page->page_link));
c01037ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01037d1:	83 c0 0c             	add    $0xc,%eax
c01037d4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01037d7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01037da:	8b 40 04             	mov    0x4(%eax),%eax
c01037dd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01037e0:	8b 12                	mov    (%edx),%edx
c01037e2:	89 55 c0             	mov    %edx,-0x40(%ebp)
c01037e5:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01037e8:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01037eb:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01037ee:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01037f1:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01037f4:	8b 55 c0             	mov    -0x40(%ebp),%edx
c01037f7:	89 10                	mov    %edx,(%eax)
            list_add(le0, &(p->page_link));
c01037f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01037fc:	8d 50 0c             	lea    0xc(%eax),%edx
c01037ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103802:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0103805:	89 55 b4             	mov    %edx,-0x4c(%ebp)
c0103808:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010380b:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010380e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0103811:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0103814:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0103817:	8b 40 04             	mov    0x4(%eax),%eax
c010381a:	8b 55 ac             	mov    -0x54(%ebp),%edx
c010381d:	89 55 a8             	mov    %edx,-0x58(%ebp)
c0103820:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0103823:	89 55 a4             	mov    %edx,-0x5c(%ebp)
c0103826:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103829:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010382c:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010382f:	89 10                	mov    %edx,(%eax)
c0103831:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0103834:	8b 10                	mov    (%eax),%edx
c0103836:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0103839:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010383c:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010383f:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0103842:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103845:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0103848:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c010384b:	89 10                	mov    %edx,(%eax)
c010384d:	eb 2b                	jmp    c010387a <default_alloc_pages+0x1ce>
        } else
            list_del(&(page->page_link));
c010384f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103852:	83 c0 0c             	add    $0xc,%eax
c0103855:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103858:	8b 45 9c             	mov    -0x64(%ebp),%eax
c010385b:	8b 40 04             	mov    0x4(%eax),%eax
c010385e:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0103861:	8b 12                	mov    (%edx),%edx
c0103863:	89 55 98             	mov    %edx,-0x68(%ebp)
c0103866:	89 45 94             	mov    %eax,-0x6c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103869:	8b 45 98             	mov    -0x68(%ebp),%eax
c010386c:	8b 55 94             	mov    -0x6c(%ebp),%edx
c010386f:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103872:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0103875:	8b 55 98             	mov    -0x68(%ebp),%edx
c0103878:	89 10                	mov    %edx,(%eax)
    }
    return page;
c010387a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010387d:	c9                   	leave  
c010387e:	c3                   	ret    

c010387f <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c010387f:	55                   	push   %ebp
c0103880:	89 e5                	mov    %esp,%ebp
c0103882:	81 ec f8 00 00 00    	sub    $0xf8,%esp
    assert(n > 0);
c0103888:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010388c:	75 24                	jne    c01038b2 <default_free_pages+0x33>
c010388e:	c7 44 24 0c 30 e4 10 	movl   $0xc010e430,0xc(%esp)
c0103895:	c0 
c0103896:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c010389d:	c0 
c010389e:	c7 44 24 04 76 00 00 	movl   $0x76,0x4(%esp)
c01038a5:	00 
c01038a6:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c01038ad:	e8 21 d5 ff ff       	call   c0100dd3 <__panic>
    struct Page *p = base, *p0;
c01038b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01038b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c01038b8:	e9 9d 00 00 00       	jmp    c010395a <default_free_pages+0xdb>
        assert(!PageReserved(p) && !PageProperty(p));
c01038bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038c0:	83 c0 04             	add    $0x4,%eax
c01038c3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01038ca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01038cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01038d0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01038d3:	0f a3 10             	bt     %edx,(%eax)
c01038d6:	19 c0                	sbb    %eax,%eax
c01038d8:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return oldbit != 0;
c01038db:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01038df:	0f 95 c0             	setne  %al
c01038e2:	0f b6 c0             	movzbl %al,%eax
c01038e5:	85 c0                	test   %eax,%eax
c01038e7:	75 2c                	jne    c0103915 <default_free_pages+0x96>
c01038e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01038ec:	83 c0 04             	add    $0x4,%eax
c01038ef:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
c01038f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01038f9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01038fc:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01038ff:	0f a3 10             	bt     %edx,(%eax)
c0103902:	19 c0                	sbb    %eax,%eax
c0103904:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    return oldbit != 0;
c0103907:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c010390b:	0f 95 c0             	setne  %al
c010390e:	0f b6 c0             	movzbl %al,%eax
c0103911:	85 c0                	test   %eax,%eax
c0103913:	74 24                	je     c0103939 <default_free_pages+0xba>
c0103915:	c7 44 24 0c 74 e4 10 	movl   $0xc010e474,0xc(%esp)
c010391c:	c0 
c010391d:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c0103924:	c0 
c0103925:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c010392c:	00 
c010392d:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c0103934:	e8 9a d4 ff ff       	call   c0100dd3 <__panic>
        p->flags = 0;
c0103939:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010393c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);
c0103943:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010394a:	00 
c010394b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010394e:	89 04 24             	mov    %eax,(%esp)
c0103951:	e8 d5 fb ff ff       	call   c010352b <set_page_ref>

static void
default_free_pages(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base, *p0;
    for (; p != base + n; p ++) {
c0103956:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c010395a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010395d:	c1 e0 05             	shl    $0x5,%eax
c0103960:	89 c2                	mov    %eax,%edx
c0103962:	8b 45 08             	mov    0x8(%ebp),%eax
c0103965:	01 d0                	add    %edx,%eax
c0103967:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010396a:	0f 85 4d ff ff ff    	jne    c01038bd <default_free_pages+0x3e>
        assert(!PageReserved(p) && !PageProperty(p));
        p->flags = 0;
        set_page_ref(p, 0);
    }

    base->property = n;
c0103970:	8b 45 08             	mov    0x8(%ebp),%eax
c0103973:	8b 55 0c             	mov    0xc(%ebp),%edx
c0103976:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0103979:	8b 45 08             	mov    0x8(%ebp),%eax
c010397c:	83 c0 04             	add    $0x4,%eax
c010397f:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c0103986:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103989:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010398c:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010398f:	0f ab 10             	bts    %edx,(%eax)
    if (!nr_free) {
c0103992:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c0103997:	85 c0                	test   %eax,%eax
c0103999:	75 62                	jne    c01039fd <default_free_pages+0x17e>
        list_add(&free_list, &(base->page_link));
c010399b:	8b 45 08             	mov    0x8(%ebp),%eax
c010399e:	83 c0 0c             	add    $0xc,%eax
c01039a1:	c7 45 c8 dc 54 1c c0 	movl   $0xc01c54dc,-0x38(%ebp)
c01039a8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c01039ab:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01039ae:	89 45 c0             	mov    %eax,-0x40(%ebp)
c01039b1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01039b4:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01039b7:	8b 45 c0             	mov    -0x40(%ebp),%eax
c01039ba:	8b 40 04             	mov    0x4(%eax),%eax
c01039bd:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01039c0:	89 55 b8             	mov    %edx,-0x48(%ebp)
c01039c3:	8b 55 c0             	mov    -0x40(%ebp),%edx
c01039c6:	89 55 b4             	mov    %edx,-0x4c(%ebp)
c01039c9:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01039cc:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01039cf:	8b 55 b8             	mov    -0x48(%ebp),%edx
c01039d2:	89 10                	mov    %edx,(%eax)
c01039d4:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01039d7:	8b 10                	mov    (%eax),%edx
c01039d9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01039dc:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01039df:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01039e2:	8b 55 b0             	mov    -0x50(%ebp),%edx
c01039e5:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01039e8:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01039eb:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01039ee:	89 10                	mov    %edx,(%eax)
        nr_free = n;
c01039f0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01039f3:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4
        return;
c01039f8:	e9 14 04 00 00       	jmp    c0103e11 <default_free_pages+0x592>
c01039fd:	c7 45 ac dc 54 1c c0 	movl   $0xc01c54dc,-0x54(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103a04:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0103a07:	8b 40 04             	mov    0x4(%eax),%eax
    }

    list_entry_t *le = list_next(&free_list);
c0103a0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    nr_free += n;
c0103a0d:	8b 15 e4 54 1c c0    	mov    0xc01c54e4,%edx
c0103a13:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103a16:	01 d0                	add    %edx,%eax
c0103a18:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4
    p = le2page(le, page_link);
c0103a1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a20:	83 e8 0c             	sub    $0xc,%eax
c0103a23:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (base + base->property < p) {
c0103a26:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a29:	8b 40 08             	mov    0x8(%eax),%eax
c0103a2c:	c1 e0 05             	shl    $0x5,%eax
c0103a2f:	89 c2                	mov    %eax,%edx
c0103a31:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a34:	01 d0                	add    %edx,%eax
c0103a36:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103a39:	73 4c                	jae    c0103a87 <default_free_pages+0x208>
        list_add_before(le, &(base->page_link));
c0103a3b:	8b 45 08             	mov    0x8(%ebp),%eax
c0103a3e:	8d 50 0c             	lea    0xc(%eax),%edx
c0103a41:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a44:	89 45 a8             	mov    %eax,-0x58(%ebp)
c0103a47:	89 55 a4             	mov    %edx,-0x5c(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0103a4a:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0103a4d:	8b 00                	mov    (%eax),%eax
c0103a4f:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c0103a52:	89 55 a0             	mov    %edx,-0x60(%ebp)
c0103a55:	89 45 9c             	mov    %eax,-0x64(%ebp)
c0103a58:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0103a5b:	89 45 98             	mov    %eax,-0x68(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103a5e:	8b 45 98             	mov    -0x68(%ebp),%eax
c0103a61:	8b 55 a0             	mov    -0x60(%ebp),%edx
c0103a64:	89 10                	mov    %edx,(%eax)
c0103a66:	8b 45 98             	mov    -0x68(%ebp),%eax
c0103a69:	8b 10                	mov    (%eax),%edx
c0103a6b:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0103a6e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103a71:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0103a74:	8b 55 98             	mov    -0x68(%ebp),%edx
c0103a77:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103a7a:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0103a7d:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0103a80:	89 10                	mov    %edx,(%eax)
        return;
c0103a82:	e9 8a 03 00 00       	jmp    c0103e11 <default_free_pages+0x592>
    }
    while (le != &free_list) {
c0103a87:	e9 00 03 00 00       	jmp    c0103d8c <default_free_pages+0x50d>
c0103a8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a8f:	89 45 94             	mov    %eax,-0x6c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0103a92:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0103a95:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0103a98:	89 45 f0             	mov    %eax,-0x10(%ebp)
        p0 = le2page(le, page_link);
c0103a9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103a9e:	83 e8 0c             	sub    $0xc,%eax
c0103aa1:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (base + base->property == p) {
c0103aa4:	8b 45 08             	mov    0x8(%ebp),%eax
c0103aa7:	8b 40 08             	mov    0x8(%eax),%eax
c0103aaa:	c1 e0 05             	shl    $0x5,%eax
c0103aad:	89 c2                	mov    %eax,%edx
c0103aaf:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ab2:	01 d0                	add    %edx,%eax
c0103ab4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103ab7:	0f 85 de 00 00 00    	jne    c0103b9b <default_free_pages+0x31c>
            base->property += p->property;
c0103abd:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ac0:	8b 50 08             	mov    0x8(%eax),%edx
c0103ac3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ac6:	8b 40 08             	mov    0x8(%eax),%eax
c0103ac9:	01 c2                	add    %eax,%edx
c0103acb:	8b 45 08             	mov    0x8(%ebp),%eax
c0103ace:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(p);
c0103ad1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ad4:	83 c0 04             	add    $0x4,%eax
c0103ad7:	c7 45 90 01 00 00 00 	movl   $0x1,-0x70(%ebp)
c0103ade:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103ae1:	8b 45 8c             	mov    -0x74(%ebp),%eax
c0103ae4:	8b 55 90             	mov    -0x70(%ebp),%edx
c0103ae7:	0f b3 10             	btr    %edx,(%eax)
            p->property = 0;
c0103aea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103aed:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            list_del(&(p->page_link));
c0103af4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103af7:	83 c0 0c             	add    $0xc,%eax
c0103afa:	89 45 88             	mov    %eax,-0x78(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103afd:	8b 45 88             	mov    -0x78(%ebp),%eax
c0103b00:	8b 40 04             	mov    0x4(%eax),%eax
c0103b03:	8b 55 88             	mov    -0x78(%ebp),%edx
c0103b06:	8b 12                	mov    (%edx),%edx
c0103b08:	89 55 84             	mov    %edx,-0x7c(%ebp)
c0103b0b:	89 45 80             	mov    %eax,-0x80(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103b0e:	8b 45 84             	mov    -0x7c(%ebp),%eax
c0103b11:	8b 55 80             	mov    -0x80(%ebp),%edx
c0103b14:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103b17:	8b 45 80             	mov    -0x80(%ebp),%eax
c0103b1a:	8b 55 84             	mov    -0x7c(%ebp),%edx
c0103b1d:	89 10                	mov    %edx,(%eax)
            list_add_before(le, &(base->page_link));
c0103b1f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103b22:	8d 50 0c             	lea    0xc(%eax),%edx
c0103b25:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103b28:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c0103b2e:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0103b34:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c0103b3a:	8b 00                	mov    (%eax),%eax
c0103b3c:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
c0103b42:	89 95 74 ff ff ff    	mov    %edx,-0x8c(%ebp)
c0103b48:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
c0103b4e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c0103b54:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103b5a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
c0103b60:	8b 95 74 ff ff ff    	mov    -0x8c(%ebp),%edx
c0103b66:	89 10                	mov    %edx,(%eax)
c0103b68:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
c0103b6e:	8b 10                	mov    (%eax),%edx
c0103b70:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
c0103b76:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103b79:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0103b7f:	8b 95 6c ff ff ff    	mov    -0x94(%ebp),%edx
c0103b85:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103b88:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
c0103b8e:	8b 95 70 ff ff ff    	mov    -0x90(%ebp),%edx
c0103b94:	89 10                	mov    %edx,(%eax)
            return;
c0103b96:	e9 76 02 00 00       	jmp    c0103e11 <default_free_pages+0x592>
        } else if (p + p->property == base) {
c0103b9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103b9e:	8b 40 08             	mov    0x8(%eax),%eax
c0103ba1:	c1 e0 05             	shl    $0x5,%eax
c0103ba4:	89 c2                	mov    %eax,%edx
c0103ba6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103ba9:	01 d0                	add    %edx,%eax
c0103bab:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103bae:	0f 85 28 01 00 00    	jne    c0103cdc <default_free_pages+0x45d>
            if (base + base->property == p0) {
c0103bb4:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bb7:	8b 40 08             	mov    0x8(%eax),%eax
c0103bba:	c1 e0 05             	shl    $0x5,%eax
c0103bbd:	89 c2                	mov    %eax,%edx
c0103bbf:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bc2:	01 d0                	add    %edx,%eax
c0103bc4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103bc7:	0f 85 c7 00 00 00    	jne    c0103c94 <default_free_pages+0x415>
                ClearPageProperty(base);
c0103bcd:	8b 45 08             	mov    0x8(%ebp),%eax
c0103bd0:	83 c0 04             	add    $0x4,%eax
c0103bd3:	c7 85 68 ff ff ff 01 	movl   $0x1,-0x98(%ebp)
c0103bda:	00 00 00 
c0103bdd:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
c0103be3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
c0103be9:	8b 95 68 ff ff ff    	mov    -0x98(%ebp),%edx
c0103bef:	0f b3 10             	btr    %edx,(%eax)
                ClearPageProperty(p0);
c0103bf2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103bf5:	83 c0 04             	add    $0x4,%eax
c0103bf8:	c7 85 60 ff ff ff 01 	movl   $0x1,-0xa0(%ebp)
c0103bff:	00 00 00 
c0103c02:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
c0103c08:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
c0103c0e:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
c0103c14:	0f b3 10             	btr    %edx,(%eax)
                p->property += base->property + p0->property;
c0103c17:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c1a:	8b 50 08             	mov    0x8(%eax),%edx
c0103c1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c20:	8b 48 08             	mov    0x8(%eax),%ecx
c0103c23:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c26:	8b 40 08             	mov    0x8(%eax),%eax
c0103c29:	01 c8                	add    %ecx,%eax
c0103c2b:	01 c2                	add    %eax,%edx
c0103c2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c30:	89 50 08             	mov    %edx,0x8(%eax)
                base->property = p0->property = 0;
c0103c33:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c36:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c0103c3d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c40:	8b 50 08             	mov    0x8(%eax),%edx
c0103c43:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c46:	89 50 08             	mov    %edx,0x8(%eax)
                list_del(&(p0->page_link));
c0103c49:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103c4c:	83 c0 0c             	add    $0xc,%eax
c0103c4f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0103c55:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
c0103c5b:	8b 40 04             	mov    0x4(%eax),%eax
c0103c5e:	8b 95 58 ff ff ff    	mov    -0xa8(%ebp),%edx
c0103c64:	8b 12                	mov    (%edx),%edx
c0103c66:	89 95 54 ff ff ff    	mov    %edx,-0xac(%ebp)
c0103c6c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0103c72:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
c0103c78:	8b 95 50 ff ff ff    	mov    -0xb0(%ebp),%edx
c0103c7e:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0103c81:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
c0103c87:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
c0103c8d:	89 10                	mov    %edx,(%eax)
            } else {
                ClearPageProperty(base);
                p->property += base->property;
                base->property = 0;
            }
            return;
c0103c8f:	e9 7d 01 00 00       	jmp    c0103e11 <default_free_pages+0x592>
                ClearPageProperty(p0);
                p->property += base->property + p0->property;
                base->property = p0->property = 0;
                list_del(&(p0->page_link));
            } else {
                ClearPageProperty(base);
c0103c94:	8b 45 08             	mov    0x8(%ebp),%eax
c0103c97:	83 c0 04             	add    $0x4,%eax
c0103c9a:	c7 85 4c ff ff ff 01 	movl   $0x1,-0xb4(%ebp)
c0103ca1:	00 00 00 
c0103ca4:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
c0103caa:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
c0103cb0:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
c0103cb6:	0f b3 10             	btr    %edx,(%eax)
                p->property += base->property;
c0103cb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cbc:	8b 50 08             	mov    0x8(%eax),%edx
c0103cbf:	8b 45 08             	mov    0x8(%ebp),%eax
c0103cc2:	8b 40 08             	mov    0x8(%eax),%eax
c0103cc5:	01 c2                	add    %eax,%edx
c0103cc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cca:	89 50 08             	mov    %edx,0x8(%eax)
                base->property = 0;
c0103ccd:	8b 45 08             	mov    0x8(%ebp),%eax
c0103cd0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
            }
            return;
c0103cd7:	e9 35 01 00 00       	jmp    c0103e11 <default_free_pages+0x592>
        } else if (p + p->property < base && base + base->property < p0) {
c0103cdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cdf:	8b 40 08             	mov    0x8(%eax),%eax
c0103ce2:	c1 e0 05             	shl    $0x5,%eax
c0103ce5:	89 c2                	mov    %eax,%edx
c0103ce7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103cea:	01 d0                	add    %edx,%eax
c0103cec:	3b 45 08             	cmp    0x8(%ebp),%eax
c0103cef:	0f 83 91 00 00 00    	jae    c0103d86 <default_free_pages+0x507>
c0103cf5:	8b 45 08             	mov    0x8(%ebp),%eax
c0103cf8:	8b 40 08             	mov    0x8(%eax),%eax
c0103cfb:	c1 e0 05             	shl    $0x5,%eax
c0103cfe:	89 c2                	mov    %eax,%edx
c0103d00:	8b 45 08             	mov    0x8(%ebp),%eax
c0103d03:	01 d0                	add    %edx,%eax
c0103d05:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0103d08:	73 7c                	jae    c0103d86 <default_free_pages+0x507>
            list_add_before(le, &(base->page_link));
c0103d0a:	8b 45 08             	mov    0x8(%ebp),%eax
c0103d0d:	8d 50 0c             	lea    0xc(%eax),%edx
c0103d10:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103d13:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
c0103d19:	89 95 40 ff ff ff    	mov    %edx,-0xc0(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0103d1f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
c0103d25:	8b 00                	mov    (%eax),%eax
c0103d27:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
c0103d2d:	89 95 3c ff ff ff    	mov    %edx,-0xc4(%ebp)
c0103d33:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
c0103d39:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
c0103d3f:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103d45:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
c0103d4b:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
c0103d51:	89 10                	mov    %edx,(%eax)
c0103d53:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
c0103d59:	8b 10                	mov    (%eax),%edx
c0103d5b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
c0103d61:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103d64:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
c0103d6a:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
c0103d70:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103d73:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
c0103d79:	8b 95 38 ff ff ff    	mov    -0xc8(%ebp),%edx
c0103d7f:	89 10                	mov    %edx,(%eax)
            return;
c0103d81:	e9 8b 00 00 00       	jmp    c0103e11 <default_free_pages+0x592>
        } else
            p = p0;
c0103d86:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103d89:	89 45 f4             	mov    %eax,-0xc(%ebp)
    p = le2page(le, page_link);
    if (base + base->property < p) {
        list_add_before(le, &(base->page_link));
        return;
    }
    while (le != &free_list) {
c0103d8c:	81 7d f0 dc 54 1c c0 	cmpl   $0xc01c54dc,-0x10(%ebp)
c0103d93:	0f 85 f3 fc ff ff    	jne    c0103a8c <default_free_pages+0x20d>
            list_add_before(le, &(base->page_link));
            return;
        } else
            p = p0;
    }
    list_add_before(&free_list, &(base->page_link));
c0103d99:	8b 45 08             	mov    0x8(%ebp),%eax
c0103d9c:	83 c0 0c             	add    $0xc,%eax
c0103d9f:	c7 85 30 ff ff ff dc 	movl   $0xc01c54dc,-0xd0(%ebp)
c0103da6:	54 1c c0 
c0103da9:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0103daf:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
c0103db5:	8b 00                	mov    (%eax),%eax
c0103db7:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
c0103dbd:	89 95 28 ff ff ff    	mov    %edx,-0xd8(%ebp)
c0103dc3:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
c0103dc9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
c0103dcf:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0103dd5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
c0103ddb:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
c0103de1:	89 10                	mov    %edx,(%eax)
c0103de3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
c0103de9:	8b 10                	mov    (%eax),%edx
c0103deb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
c0103df1:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0103df4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
c0103dfa:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
c0103e00:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0103e03:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
c0103e09:	8b 95 24 ff ff ff    	mov    -0xdc(%ebp),%edx
c0103e0f:	89 10                	mov    %edx,(%eax)
}
c0103e11:	c9                   	leave  
c0103e12:	c3                   	ret    

c0103e13 <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c0103e13:	55                   	push   %ebp
c0103e14:	89 e5                	mov    %esp,%ebp
    return nr_free;
c0103e16:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
}
c0103e1b:	5d                   	pop    %ebp
c0103e1c:	c3                   	ret    

c0103e1d <basic_check>:

static void
basic_check(void) {
c0103e1d:	55                   	push   %ebp
c0103e1e:	89 e5                	mov    %esp,%ebp
c0103e20:	83 ec 48             	sub    $0x48,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c0103e23:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0103e2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e2d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103e30:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103e33:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c0103e36:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e3d:	e8 dc 15 00 00       	call   c010541e <alloc_pages>
c0103e42:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103e45:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103e49:	75 24                	jne    c0103e6f <basic_check+0x52>
c0103e4b:	c7 44 24 0c 99 e4 10 	movl   $0xc010e499,0xc(%esp)
c0103e52:	c0 
c0103e53:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c0103e5a:	c0 
c0103e5b:	c7 44 24 04 b6 00 00 	movl   $0xb6,0x4(%esp)
c0103e62:	00 
c0103e63:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c0103e6a:	e8 64 cf ff ff       	call   c0100dd3 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0103e6f:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103e76:	e8 a3 15 00 00       	call   c010541e <alloc_pages>
c0103e7b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103e7e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0103e82:	75 24                	jne    c0103ea8 <basic_check+0x8b>
c0103e84:	c7 44 24 0c b5 e4 10 	movl   $0xc010e4b5,0xc(%esp)
c0103e8b:	c0 
c0103e8c:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c0103e93:	c0 
c0103e94:	c7 44 24 04 b7 00 00 	movl   $0xb7,0x4(%esp)
c0103e9b:	00 
c0103e9c:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c0103ea3:	e8 2b cf ff ff       	call   c0100dd3 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0103ea8:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0103eaf:	e8 6a 15 00 00       	call   c010541e <alloc_pages>
c0103eb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103eb7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103ebb:	75 24                	jne    c0103ee1 <basic_check+0xc4>
c0103ebd:	c7 44 24 0c d1 e4 10 	movl   $0xc010e4d1,0xc(%esp)
c0103ec4:	c0 
c0103ec5:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c0103ecc:	c0 
c0103ecd:	c7 44 24 04 b8 00 00 	movl   $0xb8,0x4(%esp)
c0103ed4:	00 
c0103ed5:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c0103edc:	e8 f2 ce ff ff       	call   c0100dd3 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c0103ee1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103ee4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0103ee7:	74 10                	je     c0103ef9 <basic_check+0xdc>
c0103ee9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103eec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103eef:	74 08                	je     c0103ef9 <basic_check+0xdc>
c0103ef1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ef4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0103ef7:	75 24                	jne    c0103f1d <basic_check+0x100>
c0103ef9:	c7 44 24 0c f0 e4 10 	movl   $0xc010e4f0,0xc(%esp)
c0103f00:	c0 
c0103f01:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c0103f08:	c0 
c0103f09:	c7 44 24 04 ba 00 00 	movl   $0xba,0x4(%esp)
c0103f10:	00 
c0103f11:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c0103f18:	e8 b6 ce ff ff       	call   c0100dd3 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c0103f1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103f20:	89 04 24             	mov    %eax,(%esp)
c0103f23:	e8 f9 f5 ff ff       	call   c0103521 <page_ref>
c0103f28:	85 c0                	test   %eax,%eax
c0103f2a:	75 1e                	jne    c0103f4a <basic_check+0x12d>
c0103f2c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f2f:	89 04 24             	mov    %eax,(%esp)
c0103f32:	e8 ea f5 ff ff       	call   c0103521 <page_ref>
c0103f37:	85 c0                	test   %eax,%eax
c0103f39:	75 0f                	jne    c0103f4a <basic_check+0x12d>
c0103f3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f3e:	89 04 24             	mov    %eax,(%esp)
c0103f41:	e8 db f5 ff ff       	call   c0103521 <page_ref>
c0103f46:	85 c0                	test   %eax,%eax
c0103f48:	74 24                	je     c0103f6e <basic_check+0x151>
c0103f4a:	c7 44 24 0c 14 e5 10 	movl   $0xc010e514,0xc(%esp)
c0103f51:	c0 
c0103f52:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c0103f59:	c0 
c0103f5a:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c0103f61:	00 
c0103f62:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c0103f69:	e8 65 ce ff ff       	call   c0100dd3 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c0103f6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103f71:	89 04 24             	mov    %eax,(%esp)
c0103f74:	e8 92 f5 ff ff       	call   c010350b <page2pa>
c0103f79:	8b 15 a0 33 1c c0    	mov    0xc01c33a0,%edx
c0103f7f:	c1 e2 0c             	shl    $0xc,%edx
c0103f82:	39 d0                	cmp    %edx,%eax
c0103f84:	72 24                	jb     c0103faa <basic_check+0x18d>
c0103f86:	c7 44 24 0c 50 e5 10 	movl   $0xc010e550,0xc(%esp)
c0103f8d:	c0 
c0103f8e:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c0103f95:	c0 
c0103f96:	c7 44 24 04 bd 00 00 	movl   $0xbd,0x4(%esp)
c0103f9d:	00 
c0103f9e:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c0103fa5:	e8 29 ce ff ff       	call   c0100dd3 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0103faa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103fad:	89 04 24             	mov    %eax,(%esp)
c0103fb0:	e8 56 f5 ff ff       	call   c010350b <page2pa>
c0103fb5:	8b 15 a0 33 1c c0    	mov    0xc01c33a0,%edx
c0103fbb:	c1 e2 0c             	shl    $0xc,%edx
c0103fbe:	39 d0                	cmp    %edx,%eax
c0103fc0:	72 24                	jb     c0103fe6 <basic_check+0x1c9>
c0103fc2:	c7 44 24 0c 6d e5 10 	movl   $0xc010e56d,0xc(%esp)
c0103fc9:	c0 
c0103fca:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c0103fd1:	c0 
c0103fd2:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c0103fd9:	00 
c0103fda:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c0103fe1:	e8 ed cd ff ff       	call   c0100dd3 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0103fe6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103fe9:	89 04 24             	mov    %eax,(%esp)
c0103fec:	e8 1a f5 ff ff       	call   c010350b <page2pa>
c0103ff1:	8b 15 a0 33 1c c0    	mov    0xc01c33a0,%edx
c0103ff7:	c1 e2 0c             	shl    $0xc,%edx
c0103ffa:	39 d0                	cmp    %edx,%eax
c0103ffc:	72 24                	jb     c0104022 <basic_check+0x205>
c0103ffe:	c7 44 24 0c 8a e5 10 	movl   $0xc010e58a,0xc(%esp)
c0104005:	c0 
c0104006:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c010400d:	c0 
c010400e:	c7 44 24 04 bf 00 00 	movl   $0xbf,0x4(%esp)
c0104015:	00 
c0104016:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c010401d:	e8 b1 cd ff ff       	call   c0100dd3 <__panic>

    list_entry_t free_list_store = free_list;
c0104022:	a1 dc 54 1c c0       	mov    0xc01c54dc,%eax
c0104027:	8b 15 e0 54 1c c0    	mov    0xc01c54e0,%edx
c010402d:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0104030:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0104033:	c7 45 e0 dc 54 1c c0 	movl   $0xc01c54dc,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010403a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010403d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104040:	89 50 04             	mov    %edx,0x4(%eax)
c0104043:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104046:	8b 50 04             	mov    0x4(%eax),%edx
c0104049:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010404c:	89 10                	mov    %edx,(%eax)
c010404e:	c7 45 dc dc 54 1c c0 	movl   $0xc01c54dc,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0104055:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104058:	8b 40 04             	mov    0x4(%eax),%eax
c010405b:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c010405e:	0f 94 c0             	sete   %al
c0104061:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0104064:	85 c0                	test   %eax,%eax
c0104066:	75 24                	jne    c010408c <basic_check+0x26f>
c0104068:	c7 44 24 0c a7 e5 10 	movl   $0xc010e5a7,0xc(%esp)
c010406f:	c0 
c0104070:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c0104077:	c0 
c0104078:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c010407f:	00 
c0104080:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c0104087:	e8 47 cd ff ff       	call   c0100dd3 <__panic>

    unsigned int nr_free_store = nr_free;
c010408c:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c0104091:	89 45 e8             	mov    %eax,-0x18(%ebp)
    nr_free = 0;
c0104094:	c7 05 e4 54 1c c0 00 	movl   $0x0,0xc01c54e4
c010409b:	00 00 00 

    assert(alloc_page() == NULL);
c010409e:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01040a5:	e8 74 13 00 00       	call   c010541e <alloc_pages>
c01040aa:	85 c0                	test   %eax,%eax
c01040ac:	74 24                	je     c01040d2 <basic_check+0x2b5>
c01040ae:	c7 44 24 0c be e5 10 	movl   $0xc010e5be,0xc(%esp)
c01040b5:	c0 
c01040b6:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c01040bd:	c0 
c01040be:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c01040c5:	00 
c01040c6:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c01040cd:	e8 01 cd ff ff       	call   c0100dd3 <__panic>

    free_page(p0);
c01040d2:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01040d9:	00 
c01040da:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01040dd:	89 04 24             	mov    %eax,(%esp)
c01040e0:	e8 a4 13 00 00       	call   c0105489 <free_pages>
    free_page(p1);
c01040e5:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01040ec:	00 
c01040ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01040f0:	89 04 24             	mov    %eax,(%esp)
c01040f3:	e8 91 13 00 00       	call   c0105489 <free_pages>
    free_page(p2);
c01040f8:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01040ff:	00 
c0104100:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104103:	89 04 24             	mov    %eax,(%esp)
c0104106:	e8 7e 13 00 00       	call   c0105489 <free_pages>
    assert(nr_free == 3);
c010410b:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c0104110:	83 f8 03             	cmp    $0x3,%eax
c0104113:	74 24                	je     c0104139 <basic_check+0x31c>
c0104115:	c7 44 24 0c d3 e5 10 	movl   $0xc010e5d3,0xc(%esp)
c010411c:	c0 
c010411d:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c0104124:	c0 
c0104125:	c7 44 24 04 cd 00 00 	movl   $0xcd,0x4(%esp)
c010412c:	00 
c010412d:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c0104134:	e8 9a cc ff ff       	call   c0100dd3 <__panic>

    assert((p0 = alloc_page()) != NULL);
c0104139:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104140:	e8 d9 12 00 00       	call   c010541e <alloc_pages>
c0104145:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104148:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010414c:	75 24                	jne    c0104172 <basic_check+0x355>
c010414e:	c7 44 24 0c 99 e4 10 	movl   $0xc010e499,0xc(%esp)
c0104155:	c0 
c0104156:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c010415d:	c0 
c010415e:	c7 44 24 04 cf 00 00 	movl   $0xcf,0x4(%esp)
c0104165:	00 
c0104166:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c010416d:	e8 61 cc ff ff       	call   c0100dd3 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0104172:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104179:	e8 a0 12 00 00       	call   c010541e <alloc_pages>
c010417e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104181:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104185:	75 24                	jne    c01041ab <basic_check+0x38e>
c0104187:	c7 44 24 0c b5 e4 10 	movl   $0xc010e4b5,0xc(%esp)
c010418e:	c0 
c010418f:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c0104196:	c0 
c0104197:	c7 44 24 04 d0 00 00 	movl   $0xd0,0x4(%esp)
c010419e:	00 
c010419f:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c01041a6:	e8 28 cc ff ff       	call   c0100dd3 <__panic>
    assert((p2 = alloc_page()) != NULL);
c01041ab:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01041b2:	e8 67 12 00 00       	call   c010541e <alloc_pages>
c01041b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01041ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01041be:	75 24                	jne    c01041e4 <basic_check+0x3c7>
c01041c0:	c7 44 24 0c d1 e4 10 	movl   $0xc010e4d1,0xc(%esp)
c01041c7:	c0 
c01041c8:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c01041cf:	c0 
c01041d0:	c7 44 24 04 d1 00 00 	movl   $0xd1,0x4(%esp)
c01041d7:	00 
c01041d8:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c01041df:	e8 ef cb ff ff       	call   c0100dd3 <__panic>

    assert(alloc_page() == NULL);
c01041e4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01041eb:	e8 2e 12 00 00       	call   c010541e <alloc_pages>
c01041f0:	85 c0                	test   %eax,%eax
c01041f2:	74 24                	je     c0104218 <basic_check+0x3fb>
c01041f4:	c7 44 24 0c be e5 10 	movl   $0xc010e5be,0xc(%esp)
c01041fb:	c0 
c01041fc:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c0104203:	c0 
c0104204:	c7 44 24 04 d3 00 00 	movl   $0xd3,0x4(%esp)
c010420b:	00 
c010420c:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c0104213:	e8 bb cb ff ff       	call   c0100dd3 <__panic>

    free_page(p0);
c0104218:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010421f:	00 
c0104220:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104223:	89 04 24             	mov    %eax,(%esp)
c0104226:	e8 5e 12 00 00       	call   c0105489 <free_pages>
c010422b:	c7 45 d8 dc 54 1c c0 	movl   $0xc01c54dc,-0x28(%ebp)
c0104232:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104235:	8b 40 04             	mov    0x4(%eax),%eax
c0104238:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c010423b:	0f 94 c0             	sete   %al
c010423e:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0104241:	85 c0                	test   %eax,%eax
c0104243:	74 24                	je     c0104269 <basic_check+0x44c>
c0104245:	c7 44 24 0c e0 e5 10 	movl   $0xc010e5e0,0xc(%esp)
c010424c:	c0 
c010424d:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c0104254:	c0 
c0104255:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c010425c:	00 
c010425d:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c0104264:	e8 6a cb ff ff       	call   c0100dd3 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0104269:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104270:	e8 a9 11 00 00       	call   c010541e <alloc_pages>
c0104275:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104278:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010427b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010427e:	74 24                	je     c01042a4 <basic_check+0x487>
c0104280:	c7 44 24 0c f8 e5 10 	movl   $0xc010e5f8,0xc(%esp)
c0104287:	c0 
c0104288:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c010428f:	c0 
c0104290:	c7 44 24 04 d9 00 00 	movl   $0xd9,0x4(%esp)
c0104297:	00 
c0104298:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c010429f:	e8 2f cb ff ff       	call   c0100dd3 <__panic>
    assert(alloc_page() == NULL);
c01042a4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01042ab:	e8 6e 11 00 00       	call   c010541e <alloc_pages>
c01042b0:	85 c0                	test   %eax,%eax
c01042b2:	74 24                	je     c01042d8 <basic_check+0x4bb>
c01042b4:	c7 44 24 0c be e5 10 	movl   $0xc010e5be,0xc(%esp)
c01042bb:	c0 
c01042bc:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c01042c3:	c0 
c01042c4:	c7 44 24 04 da 00 00 	movl   $0xda,0x4(%esp)
c01042cb:	00 
c01042cc:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c01042d3:	e8 fb ca ff ff       	call   c0100dd3 <__panic>

    assert(nr_free == 0);
c01042d8:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c01042dd:	85 c0                	test   %eax,%eax
c01042df:	74 24                	je     c0104305 <basic_check+0x4e8>
c01042e1:	c7 44 24 0c 11 e6 10 	movl   $0xc010e611,0xc(%esp)
c01042e8:	c0 
c01042e9:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c01042f0:	c0 
c01042f1:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c01042f8:	00 
c01042f9:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c0104300:	e8 ce ca ff ff       	call   c0100dd3 <__panic>
    free_list = free_list_store;
c0104305:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0104308:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010430b:	a3 dc 54 1c c0       	mov    %eax,0xc01c54dc
c0104310:	89 15 e0 54 1c c0    	mov    %edx,0xc01c54e0
    nr_free = nr_free_store;
c0104316:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104319:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4

    free_page(p);
c010431e:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104325:	00 
c0104326:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104329:	89 04 24             	mov    %eax,(%esp)
c010432c:	e8 58 11 00 00       	call   c0105489 <free_pages>
    free_page(p1);
c0104331:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104338:	00 
c0104339:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010433c:	89 04 24             	mov    %eax,(%esp)
c010433f:	e8 45 11 00 00       	call   c0105489 <free_pages>
    free_page(p2);
c0104344:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010434b:	00 
c010434c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010434f:	89 04 24             	mov    %eax,(%esp)
c0104352:	e8 32 11 00 00       	call   c0105489 <free_pages>
}
c0104357:	c9                   	leave  
c0104358:	c3                   	ret    

c0104359 <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1)
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0104359:	55                   	push   %ebp
c010435a:	89 e5                	mov    %esp,%ebp
c010435c:	53                   	push   %ebx
c010435d:	81 ec 94 00 00 00    	sub    $0x94,%esp
    int count = 0, total = 0;
c0104363:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010436a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0104371:	c7 45 ec dc 54 1c c0 	movl   $0xc01c54dc,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0104378:	eb 6b                	jmp    c01043e5 <default_check+0x8c>
        struct Page *p = le2page(le, page_link);
c010437a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010437d:	83 e8 0c             	sub    $0xc,%eax
c0104380:	89 45 e8             	mov    %eax,-0x18(%ebp)
        assert(PageProperty(p));
c0104383:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104386:	83 c0 04             	add    $0x4,%eax
c0104389:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%ebp)
c0104390:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104393:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0104396:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0104399:	0f a3 10             	bt     %edx,(%eax)
c010439c:	19 c0                	sbb    %eax,%eax
c010439e:	89 45 c8             	mov    %eax,-0x38(%ebp)
    return oldbit != 0;
c01043a1:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c01043a5:	0f 95 c0             	setne  %al
c01043a8:	0f b6 c0             	movzbl %al,%eax
c01043ab:	85 c0                	test   %eax,%eax
c01043ad:	75 24                	jne    c01043d3 <default_check+0x7a>
c01043af:	c7 44 24 0c 1e e6 10 	movl   $0xc010e61e,0xc(%esp)
c01043b6:	c0 
c01043b7:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c01043be:	c0 
c01043bf:	c7 44 24 04 ed 00 00 	movl   $0xed,0x4(%esp)
c01043c6:	00 
c01043c7:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c01043ce:	e8 00 ca ff ff       	call   c0100dd3 <__panic>
        count ++, total += p->property;
c01043d3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01043d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01043da:	8b 50 08             	mov    0x8(%eax),%edx
c01043dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01043e0:	01 d0                	add    %edx,%eax
c01043e2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01043e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01043e8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01043eb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01043ee:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c01043f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01043f4:	81 7d ec dc 54 1c c0 	cmpl   $0xc01c54dc,-0x14(%ebp)
c01043fb:	0f 85 79 ff ff ff    	jne    c010437a <default_check+0x21>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c0104401:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c0104404:	e8 b2 10 00 00       	call   c01054bb <nr_free_pages>
c0104409:	39 c3                	cmp    %eax,%ebx
c010440b:	74 24                	je     c0104431 <default_check+0xd8>
c010440d:	c7 44 24 0c 2e e6 10 	movl   $0xc010e62e,0xc(%esp)
c0104414:	c0 
c0104415:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c010441c:	c0 
c010441d:	c7 44 24 04 f0 00 00 	movl   $0xf0,0x4(%esp)
c0104424:	00 
c0104425:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c010442c:	e8 a2 c9 ff ff       	call   c0100dd3 <__panic>

    basic_check();
c0104431:	e8 e7 f9 ff ff       	call   c0103e1d <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0104436:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c010443d:	e8 dc 0f 00 00       	call   c010541e <alloc_pages>
c0104442:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(p0 != NULL);
c0104445:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104449:	75 24                	jne    c010446f <default_check+0x116>
c010444b:	c7 44 24 0c 47 e6 10 	movl   $0xc010e647,0xc(%esp)
c0104452:	c0 
c0104453:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c010445a:	c0 
c010445b:	c7 44 24 04 f5 00 00 	movl   $0xf5,0x4(%esp)
c0104462:	00 
c0104463:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c010446a:	e8 64 c9 ff ff       	call   c0100dd3 <__panic>
    assert(!PageProperty(p0));
c010446f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104472:	83 c0 04             	add    $0x4,%eax
c0104475:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
c010447c:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010447f:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0104482:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0104485:	0f a3 10             	bt     %edx,(%eax)
c0104488:	19 c0                	sbb    %eax,%eax
c010448a:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c010448d:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0104491:	0f 95 c0             	setne  %al
c0104494:	0f b6 c0             	movzbl %al,%eax
c0104497:	85 c0                	test   %eax,%eax
c0104499:	74 24                	je     c01044bf <default_check+0x166>
c010449b:	c7 44 24 0c 52 e6 10 	movl   $0xc010e652,0xc(%esp)
c01044a2:	c0 
c01044a3:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c01044aa:	c0 
c01044ab:	c7 44 24 04 f6 00 00 	movl   $0xf6,0x4(%esp)
c01044b2:	00 
c01044b3:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c01044ba:	e8 14 c9 ff ff       	call   c0100dd3 <__panic>

    list_entry_t free_list_store = free_list;
c01044bf:	a1 dc 54 1c c0       	mov    0xc01c54dc,%eax
c01044c4:	8b 15 e0 54 1c c0    	mov    0xc01c54e0,%edx
c01044ca:	89 45 80             	mov    %eax,-0x80(%ebp)
c01044cd:	89 55 84             	mov    %edx,-0x7c(%ebp)
c01044d0:	c7 45 b4 dc 54 1c c0 	movl   $0xc01c54dc,-0x4c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01044d7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01044da:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01044dd:	89 50 04             	mov    %edx,0x4(%eax)
c01044e0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01044e3:	8b 50 04             	mov    0x4(%eax),%edx
c01044e6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01044e9:	89 10                	mov    %edx,(%eax)
c01044eb:	c7 45 b0 dc 54 1c c0 	movl   $0xc01c54dc,-0x50(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01044f2:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01044f5:	8b 40 04             	mov    0x4(%eax),%eax
c01044f8:	39 45 b0             	cmp    %eax,-0x50(%ebp)
c01044fb:	0f 94 c0             	sete   %al
c01044fe:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0104501:	85 c0                	test   %eax,%eax
c0104503:	75 24                	jne    c0104529 <default_check+0x1d0>
c0104505:	c7 44 24 0c a7 e5 10 	movl   $0xc010e5a7,0xc(%esp)
c010450c:	c0 
c010450d:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c0104514:	c0 
c0104515:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c010451c:	00 
c010451d:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c0104524:	e8 aa c8 ff ff       	call   c0100dd3 <__panic>
    assert(alloc_page() == NULL);
c0104529:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104530:	e8 e9 0e 00 00       	call   c010541e <alloc_pages>
c0104535:	85 c0                	test   %eax,%eax
c0104537:	74 24                	je     c010455d <default_check+0x204>
c0104539:	c7 44 24 0c be e5 10 	movl   $0xc010e5be,0xc(%esp)
c0104540:	c0 
c0104541:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c0104548:	c0 
c0104549:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c0104550:	00 
c0104551:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c0104558:	e8 76 c8 ff ff       	call   c0100dd3 <__panic>

    unsigned int nr_free_store = nr_free;
c010455d:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c0104562:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c0104565:	c7 05 e4 54 1c c0 00 	movl   $0x0,0xc01c54e4
c010456c:	00 00 00 

    free_pages(p0 + 2, 3);
c010456f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104572:	83 c0 40             	add    $0x40,%eax
c0104575:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c010457c:	00 
c010457d:	89 04 24             	mov    %eax,(%esp)
c0104580:	e8 04 0f 00 00       	call   c0105489 <free_pages>
    assert(alloc_pages(4) == NULL);
c0104585:	c7 04 24 04 00 00 00 	movl   $0x4,(%esp)
c010458c:	e8 8d 0e 00 00       	call   c010541e <alloc_pages>
c0104591:	85 c0                	test   %eax,%eax
c0104593:	74 24                	je     c01045b9 <default_check+0x260>
c0104595:	c7 44 24 0c 64 e6 10 	movl   $0xc010e664,0xc(%esp)
c010459c:	c0 
c010459d:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c01045a4:	c0 
c01045a5:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c01045ac:	00 
c01045ad:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c01045b4:	e8 1a c8 ff ff       	call   c0100dd3 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c01045b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01045bc:	83 c0 40             	add    $0x40,%eax
c01045bf:	83 c0 04             	add    $0x4,%eax
c01045c2:	c7 45 ac 01 00 00 00 	movl   $0x1,-0x54(%ebp)
c01045c9:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01045cc:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01045cf:	8b 55 ac             	mov    -0x54(%ebp),%edx
c01045d2:	0f a3 10             	bt     %edx,(%eax)
c01045d5:	19 c0                	sbb    %eax,%eax
c01045d7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
    return oldbit != 0;
c01045da:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
c01045de:	0f 95 c0             	setne  %al
c01045e1:	0f b6 c0             	movzbl %al,%eax
c01045e4:	85 c0                	test   %eax,%eax
c01045e6:	74 0e                	je     c01045f6 <default_check+0x29d>
c01045e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01045eb:	83 c0 40             	add    $0x40,%eax
c01045ee:	8b 40 08             	mov    0x8(%eax),%eax
c01045f1:	83 f8 03             	cmp    $0x3,%eax
c01045f4:	74 24                	je     c010461a <default_check+0x2c1>
c01045f6:	c7 44 24 0c 7c e6 10 	movl   $0xc010e67c,0xc(%esp)
c01045fd:	c0 
c01045fe:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c0104605:	c0 
c0104606:	c7 44 24 04 02 01 00 	movl   $0x102,0x4(%esp)
c010460d:	00 
c010460e:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c0104615:	e8 b9 c7 ff ff       	call   c0100dd3 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c010461a:	c7 04 24 03 00 00 00 	movl   $0x3,(%esp)
c0104621:	e8 f8 0d 00 00       	call   c010541e <alloc_pages>
c0104626:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0104629:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010462d:	75 24                	jne    c0104653 <default_check+0x2fa>
c010462f:	c7 44 24 0c a8 e6 10 	movl   $0xc010e6a8,0xc(%esp)
c0104636:	c0 
c0104637:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c010463e:	c0 
c010463f:	c7 44 24 04 03 01 00 	movl   $0x103,0x4(%esp)
c0104646:	00 
c0104647:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c010464e:	e8 80 c7 ff ff       	call   c0100dd3 <__panic>
    assert(alloc_page() == NULL);
c0104653:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010465a:	e8 bf 0d 00 00       	call   c010541e <alloc_pages>
c010465f:	85 c0                	test   %eax,%eax
c0104661:	74 24                	je     c0104687 <default_check+0x32e>
c0104663:	c7 44 24 0c be e5 10 	movl   $0xc010e5be,0xc(%esp)
c010466a:	c0 
c010466b:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c0104672:	c0 
c0104673:	c7 44 24 04 04 01 00 	movl   $0x104,0x4(%esp)
c010467a:	00 
c010467b:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c0104682:	e8 4c c7 ff ff       	call   c0100dd3 <__panic>
    assert(p0 + 2 == p1);
c0104687:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010468a:	83 c0 40             	add    $0x40,%eax
c010468d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0104690:	74 24                	je     c01046b6 <default_check+0x35d>
c0104692:	c7 44 24 0c c6 e6 10 	movl   $0xc010e6c6,0xc(%esp)
c0104699:	c0 
c010469a:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c01046a1:	c0 
c01046a2:	c7 44 24 04 05 01 00 	movl   $0x105,0x4(%esp)
c01046a9:	00 
c01046aa:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c01046b1:	e8 1d c7 ff ff       	call   c0100dd3 <__panic>

    p2 = p0 + 1;
c01046b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01046b9:	83 c0 20             	add    $0x20,%eax
c01046bc:	89 45 d8             	mov    %eax,-0x28(%ebp)
    free_page(p0);
c01046bf:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01046c6:	00 
c01046c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01046ca:	89 04 24             	mov    %eax,(%esp)
c01046cd:	e8 b7 0d 00 00       	call   c0105489 <free_pages>
    free_pages(p1, 3);
c01046d2:	c7 44 24 04 03 00 00 	movl   $0x3,0x4(%esp)
c01046d9:	00 
c01046da:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01046dd:	89 04 24             	mov    %eax,(%esp)
c01046e0:	e8 a4 0d 00 00       	call   c0105489 <free_pages>
    assert(PageProperty(p0) && p0->property == 1);
c01046e5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01046e8:	83 c0 04             	add    $0x4,%eax
c01046eb:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
c01046f2:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01046f5:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01046f8:	8b 55 a0             	mov    -0x60(%ebp),%edx
c01046fb:	0f a3 10             	bt     %edx,(%eax)
c01046fe:	19 c0                	sbb    %eax,%eax
c0104700:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0104703:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0104707:	0f 95 c0             	setne  %al
c010470a:	0f b6 c0             	movzbl %al,%eax
c010470d:	85 c0                	test   %eax,%eax
c010470f:	74 0b                	je     c010471c <default_check+0x3c3>
c0104711:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104714:	8b 40 08             	mov    0x8(%eax),%eax
c0104717:	83 f8 01             	cmp    $0x1,%eax
c010471a:	74 24                	je     c0104740 <default_check+0x3e7>
c010471c:	c7 44 24 0c d4 e6 10 	movl   $0xc010e6d4,0xc(%esp)
c0104723:	c0 
c0104724:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c010472b:	c0 
c010472c:	c7 44 24 04 0a 01 00 	movl   $0x10a,0x4(%esp)
c0104733:	00 
c0104734:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c010473b:	e8 93 c6 ff ff       	call   c0100dd3 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c0104740:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104743:	83 c0 04             	add    $0x4,%eax
c0104746:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
c010474d:	89 45 90             	mov    %eax,-0x70(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0104750:	8b 45 90             	mov    -0x70(%ebp),%eax
c0104753:	8b 55 94             	mov    -0x6c(%ebp),%edx
c0104756:	0f a3 10             	bt     %edx,(%eax)
c0104759:	19 c0                	sbb    %eax,%eax
c010475b:	89 45 8c             	mov    %eax,-0x74(%ebp)
    return oldbit != 0;
c010475e:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
c0104762:	0f 95 c0             	setne  %al
c0104765:	0f b6 c0             	movzbl %al,%eax
c0104768:	85 c0                	test   %eax,%eax
c010476a:	74 0b                	je     c0104777 <default_check+0x41e>
c010476c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010476f:	8b 40 08             	mov    0x8(%eax),%eax
c0104772:	83 f8 03             	cmp    $0x3,%eax
c0104775:	74 24                	je     c010479b <default_check+0x442>
c0104777:	c7 44 24 0c fc e6 10 	movl   $0xc010e6fc,0xc(%esp)
c010477e:	c0 
c010477f:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c0104786:	c0 
c0104787:	c7 44 24 04 0b 01 00 	movl   $0x10b,0x4(%esp)
c010478e:	00 
c010478f:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c0104796:	e8 38 c6 ff ff       	call   c0100dd3 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c010479b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01047a2:	e8 77 0c 00 00       	call   c010541e <alloc_pages>
c01047a7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01047aa:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01047ad:	83 e8 20             	sub    $0x20,%eax
c01047b0:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c01047b3:	74 24                	je     c01047d9 <default_check+0x480>
c01047b5:	c7 44 24 0c 22 e7 10 	movl   $0xc010e722,0xc(%esp)
c01047bc:	c0 
c01047bd:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c01047c4:	c0 
c01047c5:	c7 44 24 04 0d 01 00 	movl   $0x10d,0x4(%esp)
c01047cc:	00 
c01047cd:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c01047d4:	e8 fa c5 ff ff       	call   c0100dd3 <__panic>
    free_page(p0);
c01047d9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01047e0:	00 
c01047e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01047e4:	89 04 24             	mov    %eax,(%esp)
c01047e7:	e8 9d 0c 00 00       	call   c0105489 <free_pages>
    assert((p0 = alloc_pages(2)) == p2 + 1);
c01047ec:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c01047f3:	e8 26 0c 00 00       	call   c010541e <alloc_pages>
c01047f8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01047fb:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01047fe:	83 c0 20             	add    $0x20,%eax
c0104801:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0104804:	74 24                	je     c010482a <default_check+0x4d1>
c0104806:	c7 44 24 0c 40 e7 10 	movl   $0xc010e740,0xc(%esp)
c010480d:	c0 
c010480e:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c0104815:	c0 
c0104816:	c7 44 24 04 0f 01 00 	movl   $0x10f,0x4(%esp)
c010481d:	00 
c010481e:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c0104825:	e8 a9 c5 ff ff       	call   c0100dd3 <__panic>

    free_pages(p0, 2);
c010482a:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c0104831:	00 
c0104832:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104835:	89 04 24             	mov    %eax,(%esp)
c0104838:	e8 4c 0c 00 00       	call   c0105489 <free_pages>
    free_page(p2);
c010483d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0104844:	00 
c0104845:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104848:	89 04 24             	mov    %eax,(%esp)
c010484b:	e8 39 0c 00 00       	call   c0105489 <free_pages>

    assert((p0 = alloc_pages(5)) != NULL);
c0104850:	c7 04 24 05 00 00 00 	movl   $0x5,(%esp)
c0104857:	e8 c2 0b 00 00       	call   c010541e <alloc_pages>
c010485c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010485f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104863:	75 24                	jne    c0104889 <default_check+0x530>
c0104865:	c7 44 24 0c 60 e7 10 	movl   $0xc010e760,0xc(%esp)
c010486c:	c0 
c010486d:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c0104874:	c0 
c0104875:	c7 44 24 04 14 01 00 	movl   $0x114,0x4(%esp)
c010487c:	00 
c010487d:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c0104884:	e8 4a c5 ff ff       	call   c0100dd3 <__panic>
    assert(alloc_page() == NULL);
c0104889:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0104890:	e8 89 0b 00 00       	call   c010541e <alloc_pages>
c0104895:	85 c0                	test   %eax,%eax
c0104897:	74 24                	je     c01048bd <default_check+0x564>
c0104899:	c7 44 24 0c be e5 10 	movl   $0xc010e5be,0xc(%esp)
c01048a0:	c0 
c01048a1:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c01048a8:	c0 
c01048a9:	c7 44 24 04 15 01 00 	movl   $0x115,0x4(%esp)
c01048b0:	00 
c01048b1:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c01048b8:	e8 16 c5 ff ff       	call   c0100dd3 <__panic>

    assert(nr_free == 0);
c01048bd:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c01048c2:	85 c0                	test   %eax,%eax
c01048c4:	74 24                	je     c01048ea <default_check+0x591>
c01048c6:	c7 44 24 0c 11 e6 10 	movl   $0xc010e611,0xc(%esp)
c01048cd:	c0 
c01048ce:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c01048d5:	c0 
c01048d6:	c7 44 24 04 17 01 00 	movl   $0x117,0x4(%esp)
c01048dd:	00 
c01048de:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c01048e5:	e8 e9 c4 ff ff       	call   c0100dd3 <__panic>
    nr_free = nr_free_store;
c01048ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01048ed:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4

    free_list = free_list_store;
c01048f2:	8b 45 80             	mov    -0x80(%ebp),%eax
c01048f5:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01048f8:	a3 dc 54 1c c0       	mov    %eax,0xc01c54dc
c01048fd:	89 15 e0 54 1c c0    	mov    %edx,0xc01c54e0
    free_pages(p0, 5);
c0104903:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c010490a:	00 
c010490b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010490e:	89 04 24             	mov    %eax,(%esp)
c0104911:	e8 73 0b 00 00       	call   c0105489 <free_pages>

    le = &free_list;
c0104916:	c7 45 ec dc 54 1c c0 	movl   $0xc01c54dc,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010491d:	eb 1d                	jmp    c010493c <default_check+0x5e3>
        struct Page *p = le2page(le, page_link);
c010491f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104922:	83 e8 0c             	sub    $0xc,%eax
c0104925:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        count --, total -= p->property;
c0104928:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010492c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010492f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104932:	8b 40 08             	mov    0x8(%eax),%eax
c0104935:	29 c2                	sub    %eax,%edx
c0104937:	89 d0                	mov    %edx,%eax
c0104939:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010493c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010493f:	89 45 88             	mov    %eax,-0x78(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104942:	8b 45 88             	mov    -0x78(%ebp),%eax
c0104945:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0104948:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010494b:	81 7d ec dc 54 1c c0 	cmpl   $0xc01c54dc,-0x14(%ebp)
c0104952:	75 cb                	jne    c010491f <default_check+0x5c6>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0104954:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104958:	74 24                	je     c010497e <default_check+0x625>
c010495a:	c7 44 24 0c 7e e7 10 	movl   $0xc010e77e,0xc(%esp)
c0104961:	c0 
c0104962:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c0104969:	c0 
c010496a:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c0104971:	00 
c0104972:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c0104979:	e8 55 c4 ff ff       	call   c0100dd3 <__panic>
    assert(total == 0);
c010497e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104982:	74 24                	je     c01049a8 <default_check+0x64f>
c0104984:	c7 44 24 0c 89 e7 10 	movl   $0xc010e789,0xc(%esp)
c010498b:	c0 
c010498c:	c7 44 24 08 36 e4 10 	movl   $0xc010e436,0x8(%esp)
c0104993:	c0 
c0104994:	c7 44 24 04 23 01 00 	movl   $0x123,0x4(%esp)
c010499b:	00 
c010499c:	c7 04 24 4b e4 10 c0 	movl   $0xc010e44b,(%esp)
c01049a3:	e8 2b c4 ff ff       	call   c0100dd3 <__panic>
}
c01049a8:	81 c4 94 00 00 00    	add    $0x94,%esp
c01049ae:	5b                   	pop    %ebx
c01049af:	5d                   	pop    %ebp
c01049b0:	c3                   	ret    

c01049b1 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c01049b1:	55                   	push   %ebp
c01049b2:	89 e5                	mov    %esp,%ebp
c01049b4:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c01049b7:	9c                   	pushf  
c01049b8:	58                   	pop    %eax
c01049b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c01049bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c01049bf:	25 00 02 00 00       	and    $0x200,%eax
c01049c4:	85 c0                	test   %eax,%eax
c01049c6:	74 0c                	je     c01049d4 <__intr_save+0x23>
        intr_disable();
c01049c8:	e8 5e d6 ff ff       	call   c010202b <intr_disable>
        return 1;
c01049cd:	b8 01 00 00 00       	mov    $0x1,%eax
c01049d2:	eb 05                	jmp    c01049d9 <__intr_save+0x28>
    }
    return 0;
c01049d4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01049d9:	c9                   	leave  
c01049da:	c3                   	ret    

c01049db <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c01049db:	55                   	push   %ebp
c01049dc:	89 e5                	mov    %esp,%ebp
c01049de:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c01049e1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01049e5:	74 05                	je     c01049ec <__intr_restore+0x11>
        intr_enable();
c01049e7:	e8 39 d6 ff ff       	call   c0102025 <intr_enable>
    }
}
c01049ec:	c9                   	leave  
c01049ed:	c3                   	ret    

c01049ee <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01049ee:	55                   	push   %ebp
c01049ef:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01049f1:	8b 55 08             	mov    0x8(%ebp),%edx
c01049f4:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c01049f9:	29 c2                	sub    %eax,%edx
c01049fb:	89 d0                	mov    %edx,%eax
c01049fd:	c1 f8 05             	sar    $0x5,%eax
}
c0104a00:	5d                   	pop    %ebp
c0104a01:	c3                   	ret    

c0104a02 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0104a02:	55                   	push   %ebp
c0104a03:	89 e5                	mov    %esp,%ebp
c0104a05:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c0104a08:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a0b:	89 04 24             	mov    %eax,(%esp)
c0104a0e:	e8 db ff ff ff       	call   c01049ee <page2ppn>
c0104a13:	c1 e0 0c             	shl    $0xc,%eax
}
c0104a16:	c9                   	leave  
c0104a17:	c3                   	ret    

c0104a18 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0104a18:	55                   	push   %ebp
c0104a19:	89 e5                	mov    %esp,%ebp
c0104a1b:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0104a1e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a21:	c1 e8 0c             	shr    $0xc,%eax
c0104a24:	89 c2                	mov    %eax,%edx
c0104a26:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0104a2b:	39 c2                	cmp    %eax,%edx
c0104a2d:	72 1c                	jb     c0104a4b <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0104a2f:	c7 44 24 08 c4 e7 10 	movl   $0xc010e7c4,0x8(%esp)
c0104a36:	c0 
c0104a37:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0104a3e:	00 
c0104a3f:	c7 04 24 e3 e7 10 c0 	movl   $0xc010e7e3,(%esp)
c0104a46:	e8 88 c3 ff ff       	call   c0100dd3 <__panic>
    }
    return &pages[PPN(pa)];
c0104a4b:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c0104a50:	8b 55 08             	mov    0x8(%ebp),%edx
c0104a53:	c1 ea 0c             	shr    $0xc,%edx
c0104a56:	c1 e2 05             	shl    $0x5,%edx
c0104a59:	01 d0                	add    %edx,%eax
}
c0104a5b:	c9                   	leave  
c0104a5c:	c3                   	ret    

c0104a5d <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0104a5d:	55                   	push   %ebp
c0104a5e:	89 e5                	mov    %esp,%ebp
c0104a60:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0104a63:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a66:	89 04 24             	mov    %eax,(%esp)
c0104a69:	e8 94 ff ff ff       	call   c0104a02 <page2pa>
c0104a6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104a71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a74:	c1 e8 0c             	shr    $0xc,%eax
c0104a77:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104a7a:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0104a7f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104a82:	72 23                	jb     c0104aa7 <page2kva+0x4a>
c0104a84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104a87:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104a8b:	c7 44 24 08 f4 e7 10 	movl   $0xc010e7f4,0x8(%esp)
c0104a92:	c0 
c0104a93:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0104a9a:	00 
c0104a9b:	c7 04 24 e3 e7 10 c0 	movl   $0xc010e7e3,(%esp)
c0104aa2:	e8 2c c3 ff ff       	call   c0100dd3 <__panic>
c0104aa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aaa:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0104aaf:	c9                   	leave  
c0104ab0:	c3                   	ret    

c0104ab1 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0104ab1:	55                   	push   %ebp
c0104ab2:	89 e5                	mov    %esp,%ebp
c0104ab4:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c0104ab7:	8b 45 08             	mov    0x8(%ebp),%eax
c0104aba:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104abd:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0104ac4:	77 23                	ja     c0104ae9 <kva2page+0x38>
c0104ac6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ac9:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0104acd:	c7 44 24 08 18 e8 10 	movl   $0xc010e818,0x8(%esp)
c0104ad4:	c0 
c0104ad5:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c0104adc:	00 
c0104add:	c7 04 24 e3 e7 10 c0 	movl   $0xc010e7e3,(%esp)
c0104ae4:	e8 ea c2 ff ff       	call   c0100dd3 <__panic>
c0104ae9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104aec:	05 00 00 00 40       	add    $0x40000000,%eax
c0104af1:	89 04 24             	mov    %eax,(%esp)
c0104af4:	e8 1f ff ff ff       	call   c0104a18 <pa2page>
}
c0104af9:	c9                   	leave  
c0104afa:	c3                   	ret    

c0104afb <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c0104afb:	55                   	push   %ebp
c0104afc:	89 e5                	mov    %esp,%ebp
c0104afe:	83 ec 28             	sub    $0x28,%esp
  struct Page * page = alloc_pages(1 << order);
c0104b01:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104b04:	ba 01 00 00 00       	mov    $0x1,%edx
c0104b09:	89 c1                	mov    %eax,%ecx
c0104b0b:	d3 e2                	shl    %cl,%edx
c0104b0d:	89 d0                	mov    %edx,%eax
c0104b0f:	89 04 24             	mov    %eax,(%esp)
c0104b12:	e8 07 09 00 00       	call   c010541e <alloc_pages>
c0104b17:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c0104b1a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104b1e:	75 07                	jne    c0104b27 <__slob_get_free_pages+0x2c>
    return NULL;
c0104b20:	b8 00 00 00 00       	mov    $0x0,%eax
c0104b25:	eb 0b                	jmp    c0104b32 <__slob_get_free_pages+0x37>
  return page2kva(page);
c0104b27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104b2a:	89 04 24             	mov    %eax,(%esp)
c0104b2d:	e8 2b ff ff ff       	call   c0104a5d <page2kva>
}
c0104b32:	c9                   	leave  
c0104b33:	c3                   	ret    

c0104b34 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c0104b34:	55                   	push   %ebp
c0104b35:	89 e5                	mov    %esp,%ebp
c0104b37:	53                   	push   %ebx
c0104b38:	83 ec 14             	sub    $0x14,%esp
  free_pages(kva2page(kva), 1 << order);
c0104b3b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104b3e:	ba 01 00 00 00       	mov    $0x1,%edx
c0104b43:	89 c1                	mov    %eax,%ecx
c0104b45:	d3 e2                	shl    %cl,%edx
c0104b47:	89 d0                	mov    %edx,%eax
c0104b49:	89 c3                	mov    %eax,%ebx
c0104b4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b4e:	89 04 24             	mov    %eax,(%esp)
c0104b51:	e8 5b ff ff ff       	call   c0104ab1 <kva2page>
c0104b56:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c0104b5a:	89 04 24             	mov    %eax,(%esp)
c0104b5d:	e8 27 09 00 00       	call   c0105489 <free_pages>
}
c0104b62:	83 c4 14             	add    $0x14,%esp
c0104b65:	5b                   	pop    %ebx
c0104b66:	5d                   	pop    %ebp
c0104b67:	c3                   	ret    

c0104b68 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c0104b68:	55                   	push   %ebp
c0104b69:	89 e5                	mov    %esp,%ebp
c0104b6b:	83 ec 38             	sub    $0x38,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c0104b6e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104b71:	83 c0 08             	add    $0x8,%eax
c0104b74:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0104b79:	76 24                	jbe    c0104b9f <slob_alloc+0x37>
c0104b7b:	c7 44 24 0c 3c e8 10 	movl   $0xc010e83c,0xc(%esp)
c0104b82:	c0 
c0104b83:	c7 44 24 08 5b e8 10 	movl   $0xc010e85b,0x8(%esp)
c0104b8a:	c0 
c0104b8b:	c7 44 24 04 64 00 00 	movl   $0x64,0x4(%esp)
c0104b92:	00 
c0104b93:	c7 04 24 70 e8 10 c0 	movl   $0xc010e870,(%esp)
c0104b9a:	e8 34 c2 ff ff       	call   c0100dd3 <__panic>

	slob_t *prev, *cur, *aligned = 0;
c0104b9f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c0104ba6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0104bad:	8b 45 08             	mov    0x8(%ebp),%eax
c0104bb0:	83 c0 07             	add    $0x7,%eax
c0104bb3:	c1 e8 03             	shr    $0x3,%eax
c0104bb6:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c0104bb9:	e8 f3 fd ff ff       	call   c01049b1 <__intr_save>
c0104bbe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c0104bc1:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c0104bc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104bc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104bcc:	8b 40 04             	mov    0x4(%eax),%eax
c0104bcf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c0104bd2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0104bd6:	74 25                	je     c0104bfd <slob_alloc+0x95>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c0104bd8:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104bdb:	8b 45 10             	mov    0x10(%ebp),%eax
c0104bde:	01 d0                	add    %edx,%eax
c0104be0:	8d 50 ff             	lea    -0x1(%eax),%edx
c0104be3:	8b 45 10             	mov    0x10(%ebp),%eax
c0104be6:	f7 d8                	neg    %eax
c0104be8:	21 d0                	and    %edx,%eax
c0104bea:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c0104bed:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104bf0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104bf3:	29 c2                	sub    %eax,%edx
c0104bf5:	89 d0                	mov    %edx,%eax
c0104bf7:	c1 f8 03             	sar    $0x3,%eax
c0104bfa:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0104bfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c00:	8b 00                	mov    (%eax),%eax
c0104c02:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104c05:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0104c08:	01 ca                	add    %ecx,%edx
c0104c0a:	39 d0                	cmp    %edx,%eax
c0104c0c:	0f 8c aa 00 00 00    	jl     c0104cbc <slob_alloc+0x154>
			if (delta) { /* need to fragment head to align? */
c0104c12:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0104c16:	74 38                	je     c0104c50 <slob_alloc+0xe8>
				aligned->units = cur->units - delta;
c0104c18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c1b:	8b 00                	mov    (%eax),%eax
c0104c1d:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0104c20:	89 c2                	mov    %eax,%edx
c0104c22:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c25:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0104c27:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c2a:	8b 50 04             	mov    0x4(%eax),%edx
c0104c2d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c30:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0104c33:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c36:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0104c39:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0104c3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c3f:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0104c42:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0104c44:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c47:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0104c4a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104c4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0104c50:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c53:	8b 00                	mov    (%eax),%eax
c0104c55:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0104c58:	75 0e                	jne    c0104c68 <slob_alloc+0x100>
				prev->next = cur->next; /* unlink */
c0104c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c5d:	8b 50 04             	mov    0x4(%eax),%edx
c0104c60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c63:	89 50 04             	mov    %edx,0x4(%eax)
c0104c66:	eb 3c                	jmp    c0104ca4 <slob_alloc+0x13c>
			else { /* fragment */
				prev->next = cur + units;
c0104c68:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104c6b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104c72:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c75:	01 c2                	add    %eax,%edx
c0104c77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c7a:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c0104c7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c80:	8b 40 04             	mov    0x4(%eax),%eax
c0104c83:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c86:	8b 12                	mov    (%edx),%edx
c0104c88:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0104c8b:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c0104c8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104c90:	8b 40 04             	mov    0x4(%eax),%eax
c0104c93:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104c96:	8b 52 04             	mov    0x4(%edx),%edx
c0104c99:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c0104c9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104c9f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104ca2:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0104ca4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ca7:	a3 08 1a 13 c0       	mov    %eax,0xc0131a08
			spin_unlock_irqrestore(&slob_lock, flags);
c0104cac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104caf:	89 04 24             	mov    %eax,(%esp)
c0104cb2:	e8 24 fd ff ff       	call   c01049db <__intr_restore>
			return cur;
c0104cb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104cba:	eb 7f                	jmp    c0104d3b <slob_alloc+0x1d3>
		}
		if (cur == slobfree) {
c0104cbc:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c0104cc1:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0104cc4:	75 61                	jne    c0104d27 <slob_alloc+0x1bf>
			spin_unlock_irqrestore(&slob_lock, flags);
c0104cc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104cc9:	89 04 24             	mov    %eax,(%esp)
c0104ccc:	e8 0a fd ff ff       	call   c01049db <__intr_restore>

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0104cd1:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104cd8:	75 07                	jne    c0104ce1 <slob_alloc+0x179>
				return 0;
c0104cda:	b8 00 00 00 00       	mov    $0x0,%eax
c0104cdf:	eb 5a                	jmp    c0104d3b <slob_alloc+0x1d3>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0104ce1:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104ce8:	00 
c0104ce9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104cec:	89 04 24             	mov    %eax,(%esp)
c0104cef:	e8 07 fe ff ff       	call   c0104afb <__slob_get_free_pages>
c0104cf4:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0104cf7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104cfb:	75 07                	jne    c0104d04 <slob_alloc+0x19c>
				return 0;
c0104cfd:	b8 00 00 00 00       	mov    $0x0,%eax
c0104d02:	eb 37                	jmp    c0104d3b <slob_alloc+0x1d3>

			slob_free(cur, PAGE_SIZE);
c0104d04:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0104d0b:	00 
c0104d0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d0f:	89 04 24             	mov    %eax,(%esp)
c0104d12:	e8 26 00 00 00       	call   c0104d3d <slob_free>
			spin_lock_irqsave(&slob_lock, flags);
c0104d17:	e8 95 fc ff ff       	call   c01049b1 <__intr_save>
c0104d1c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0104d1f:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c0104d24:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0104d27:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d30:	8b 40 04             	mov    0x4(%eax),%eax
c0104d33:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0104d36:	e9 97 fe ff ff       	jmp    c0104bd2 <slob_alloc+0x6a>
}
c0104d3b:	c9                   	leave  
c0104d3c:	c3                   	ret    

c0104d3d <slob_free>:

static void slob_free(void *block, int size)
{
c0104d3d:	55                   	push   %ebp
c0104d3e:	89 e5                	mov    %esp,%ebp
c0104d40:	83 ec 28             	sub    $0x28,%esp
	slob_t *cur, *b = (slob_t *)block;
c0104d43:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d46:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104d49:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104d4d:	75 05                	jne    c0104d54 <slob_free+0x17>
		return;
c0104d4f:	e9 ff 00 00 00       	jmp    c0104e53 <slob_free+0x116>

	if (size)
c0104d54:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0104d58:	74 10                	je     c0104d6a <slob_free+0x2d>
		b->units = SLOB_UNITS(size);
c0104d5a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104d5d:	83 c0 07             	add    $0x7,%eax
c0104d60:	c1 e8 03             	shr    $0x3,%eax
c0104d63:	89 c2                	mov    %eax,%edx
c0104d65:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d68:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0104d6a:	e8 42 fc ff ff       	call   c01049b1 <__intr_save>
c0104d6f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104d72:	a1 08 1a 13 c0       	mov    0xc0131a08,%eax
c0104d77:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104d7a:	eb 27                	jmp    c0104da3 <slob_free+0x66>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0104d7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d7f:	8b 40 04             	mov    0x4(%eax),%eax
c0104d82:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104d85:	77 13                	ja     c0104d9a <slob_free+0x5d>
c0104d87:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d8a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104d8d:	77 27                	ja     c0104db6 <slob_free+0x79>
c0104d8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d92:	8b 40 04             	mov    0x4(%eax),%eax
c0104d95:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104d98:	77 1c                	ja     c0104db6 <slob_free+0x79>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0104d9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d9d:	8b 40 04             	mov    0x4(%eax),%eax
c0104da0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104da3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104da6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104da9:	76 d1                	jbe    c0104d7c <slob_free+0x3f>
c0104dab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104dae:	8b 40 04             	mov    0x4(%eax),%eax
c0104db1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104db4:	76 c6                	jbe    c0104d7c <slob_free+0x3f>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0104db6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104db9:	8b 00                	mov    (%eax),%eax
c0104dbb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104dc2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dc5:	01 c2                	add    %eax,%edx
c0104dc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104dca:	8b 40 04             	mov    0x4(%eax),%eax
c0104dcd:	39 c2                	cmp    %eax,%edx
c0104dcf:	75 25                	jne    c0104df6 <slob_free+0xb9>
		b->units += cur->next->units;
c0104dd1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dd4:	8b 10                	mov    (%eax),%edx
c0104dd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104dd9:	8b 40 04             	mov    0x4(%eax),%eax
c0104ddc:	8b 00                	mov    (%eax),%eax
c0104dde:	01 c2                	add    %eax,%edx
c0104de0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104de3:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0104de5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104de8:	8b 40 04             	mov    0x4(%eax),%eax
c0104deb:	8b 50 04             	mov    0x4(%eax),%edx
c0104dee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104df1:	89 50 04             	mov    %edx,0x4(%eax)
c0104df4:	eb 0c                	jmp    c0104e02 <slob_free+0xc5>
	} else
		b->next = cur->next;
c0104df6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104df9:	8b 50 04             	mov    0x4(%eax),%edx
c0104dfc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104dff:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0104e02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e05:	8b 00                	mov    (%eax),%eax
c0104e07:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0104e0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e11:	01 d0                	add    %edx,%eax
c0104e13:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104e16:	75 1f                	jne    c0104e37 <slob_free+0xfa>
		cur->units += b->units;
c0104e18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e1b:	8b 10                	mov    (%eax),%edx
c0104e1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e20:	8b 00                	mov    (%eax),%eax
c0104e22:	01 c2                	add    %eax,%edx
c0104e24:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e27:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0104e29:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e2c:	8b 50 04             	mov    0x4(%eax),%edx
c0104e2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e32:	89 50 04             	mov    %edx,0x4(%eax)
c0104e35:	eb 09                	jmp    c0104e40 <slob_free+0x103>
	} else
		cur->next = b;
c0104e37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e3a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104e3d:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0104e40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e43:	a3 08 1a 13 c0       	mov    %eax,0xc0131a08

	spin_unlock_irqrestore(&slob_lock, flags);
c0104e48:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104e4b:	89 04 24             	mov    %eax,(%esp)
c0104e4e:	e8 88 fb ff ff       	call   c01049db <__intr_restore>
}
c0104e53:	c9                   	leave  
c0104e54:	c3                   	ret    

c0104e55 <slob_init>:



void
slob_init(void) {
c0104e55:	55                   	push   %ebp
c0104e56:	89 e5                	mov    %esp,%ebp
c0104e58:	83 ec 18             	sub    $0x18,%esp
  cprintf("use SLOB allocator\n");
c0104e5b:	c7 04 24 82 e8 10 c0 	movl   $0xc010e882,(%esp)
c0104e62:	e8 f1 b4 ff ff       	call   c0100358 <cprintf>
}
c0104e67:	c9                   	leave  
c0104e68:	c3                   	ret    

c0104e69 <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0104e69:	55                   	push   %ebp
c0104e6a:	89 e5                	mov    %esp,%ebp
c0104e6c:	83 ec 18             	sub    $0x18,%esp
    slob_init();
c0104e6f:	e8 e1 ff ff ff       	call   c0104e55 <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c0104e74:	c7 04 24 96 e8 10 c0 	movl   $0xc010e896,(%esp)
c0104e7b:	e8 d8 b4 ff ff       	call   c0100358 <cprintf>
}
c0104e80:	c9                   	leave  
c0104e81:	c3                   	ret    

c0104e82 <slob_allocated>:

size_t
slob_allocated(void) {
c0104e82:	55                   	push   %ebp
c0104e83:	89 e5                	mov    %esp,%ebp
  return 0;
c0104e85:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104e8a:	5d                   	pop    %ebp
c0104e8b:	c3                   	ret    

c0104e8c <kallocated>:

size_t
kallocated(void) {
c0104e8c:	55                   	push   %ebp
c0104e8d:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c0104e8f:	e8 ee ff ff ff       	call   c0104e82 <slob_allocated>
}
c0104e94:	5d                   	pop    %ebp
c0104e95:	c3                   	ret    

c0104e96 <find_order>:

static int find_order(int size)
{
c0104e96:	55                   	push   %ebp
c0104e97:	89 e5                	mov    %esp,%ebp
c0104e99:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0104e9c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0104ea3:	eb 07                	jmp    c0104eac <find_order+0x16>
		order++;
c0104ea5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0104ea9:	d1 7d 08             	sarl   0x8(%ebp)
c0104eac:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0104eb3:	7f f0                	jg     c0104ea5 <find_order+0xf>
		order++;
	return order;
c0104eb5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0104eb8:	c9                   	leave  
c0104eb9:	c3                   	ret    

c0104eba <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0104eba:	55                   	push   %ebp
c0104ebb:	89 e5                	mov    %esp,%ebp
c0104ebd:	83 ec 28             	sub    $0x28,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0104ec0:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0104ec7:	77 38                	ja     c0104f01 <__kmalloc+0x47>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0104ec9:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ecc:	8d 50 08             	lea    0x8(%eax),%edx
c0104ecf:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104ed6:	00 
c0104ed7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104eda:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104ede:	89 14 24             	mov    %edx,(%esp)
c0104ee1:	e8 82 fc ff ff       	call   c0104b68 <slob_alloc>
c0104ee6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0104ee9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104eed:	74 08                	je     c0104ef7 <__kmalloc+0x3d>
c0104eef:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ef2:	83 c0 08             	add    $0x8,%eax
c0104ef5:	eb 05                	jmp    c0104efc <__kmalloc+0x42>
c0104ef7:	b8 00 00 00 00       	mov    $0x0,%eax
c0104efc:	e9 a6 00 00 00       	jmp    c0104fa7 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0104f01:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0104f08:	00 
c0104f09:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104f0c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104f10:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
c0104f17:	e8 4c fc ff ff       	call   c0104b68 <slob_alloc>
c0104f1c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0104f1f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104f23:	75 07                	jne    c0104f2c <__kmalloc+0x72>
		return 0;
c0104f25:	b8 00 00 00 00       	mov    $0x0,%eax
c0104f2a:	eb 7b                	jmp    c0104fa7 <__kmalloc+0xed>

	bb->order = find_order(size);
c0104f2c:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f2f:	89 04 24             	mov    %eax,(%esp)
c0104f32:	e8 5f ff ff ff       	call   c0104e96 <find_order>
c0104f37:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104f3a:	89 02                	mov    %eax,(%edx)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0104f3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f3f:	8b 00                	mov    (%eax),%eax
c0104f41:	89 44 24 04          	mov    %eax,0x4(%esp)
c0104f45:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104f48:	89 04 24             	mov    %eax,(%esp)
c0104f4b:	e8 ab fb ff ff       	call   c0104afb <__slob_get_free_pages>
c0104f50:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104f53:	89 42 04             	mov    %eax,0x4(%edx)

	if (bb->pages) {
c0104f56:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f59:	8b 40 04             	mov    0x4(%eax),%eax
c0104f5c:	85 c0                	test   %eax,%eax
c0104f5e:	74 2f                	je     c0104f8f <__kmalloc+0xd5>
		spin_lock_irqsave(&block_lock, flags);
c0104f60:	e8 4c fa ff ff       	call   c01049b1 <__intr_save>
c0104f65:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0104f68:	8b 15 84 33 1c c0    	mov    0xc01c3384,%edx
c0104f6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f71:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0104f74:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f77:	a3 84 33 1c c0       	mov    %eax,0xc01c3384
		spin_unlock_irqrestore(&block_lock, flags);
c0104f7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104f7f:	89 04 24             	mov    %eax,(%esp)
c0104f82:	e8 54 fa ff ff       	call   c01049db <__intr_restore>
		return bb->pages;
c0104f87:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f8a:	8b 40 04             	mov    0x4(%eax),%eax
c0104f8d:	eb 18                	jmp    c0104fa7 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0104f8f:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0104f96:	00 
c0104f97:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f9a:	89 04 24             	mov    %eax,(%esp)
c0104f9d:	e8 9b fd ff ff       	call   c0104d3d <slob_free>
	return 0;
c0104fa2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104fa7:	c9                   	leave  
c0104fa8:	c3                   	ret    

c0104fa9 <kmalloc>:

void *
kmalloc(size_t size)
{
c0104fa9:	55                   	push   %ebp
c0104faa:	89 e5                	mov    %esp,%ebp
c0104fac:	83 ec 18             	sub    $0x18,%esp
  return __kmalloc(size, 0);
c0104faf:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0104fb6:	00 
c0104fb7:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fba:	89 04 24             	mov    %eax,(%esp)
c0104fbd:	e8 f8 fe ff ff       	call   c0104eba <__kmalloc>
}
c0104fc2:	c9                   	leave  
c0104fc3:	c3                   	ret    

c0104fc4 <kfree>:


void kfree(void *block)
{
c0104fc4:	55                   	push   %ebp
c0104fc5:	89 e5                	mov    %esp,%ebp
c0104fc7:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb, **last = &bigblocks;
c0104fca:	c7 45 f0 84 33 1c c0 	movl   $0xc01c3384,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0104fd1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104fd5:	75 05                	jne    c0104fdc <kfree+0x18>
		return;
c0104fd7:	e9 a2 00 00 00       	jmp    c010507e <kfree+0xba>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0104fdc:	8b 45 08             	mov    0x8(%ebp),%eax
c0104fdf:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104fe4:	85 c0                	test   %eax,%eax
c0104fe6:	75 7f                	jne    c0105067 <kfree+0xa3>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0104fe8:	e8 c4 f9 ff ff       	call   c01049b1 <__intr_save>
c0104fed:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0104ff0:	a1 84 33 1c c0       	mov    0xc01c3384,%eax
c0104ff5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ff8:	eb 5c                	jmp    c0105056 <kfree+0x92>
			if (bb->pages == block) {
c0104ffa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ffd:	8b 40 04             	mov    0x4(%eax),%eax
c0105000:	3b 45 08             	cmp    0x8(%ebp),%eax
c0105003:	75 3f                	jne    c0105044 <kfree+0x80>
				*last = bb->next;
c0105005:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105008:	8b 50 08             	mov    0x8(%eax),%edx
c010500b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010500e:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0105010:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105013:	89 04 24             	mov    %eax,(%esp)
c0105016:	e8 c0 f9 ff ff       	call   c01049db <__intr_restore>
				__slob_free_pages((unsigned long)block, bb->order);
c010501b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010501e:	8b 10                	mov    (%eax),%edx
c0105020:	8b 45 08             	mov    0x8(%ebp),%eax
c0105023:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105027:	89 04 24             	mov    %eax,(%esp)
c010502a:	e8 05 fb ff ff       	call   c0104b34 <__slob_free_pages>
				slob_free(bb, sizeof(bigblock_t));
c010502f:	c7 44 24 04 0c 00 00 	movl   $0xc,0x4(%esp)
c0105036:	00 
c0105037:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010503a:	89 04 24             	mov    %eax,(%esp)
c010503d:	e8 fb fc ff ff       	call   c0104d3d <slob_free>
				return;
c0105042:	eb 3a                	jmp    c010507e <kfree+0xba>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0105044:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105047:	83 c0 08             	add    $0x8,%eax
c010504a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010504d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105050:	8b 40 08             	mov    0x8(%eax),%eax
c0105053:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105056:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010505a:	75 9e                	jne    c0104ffa <kfree+0x36>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c010505c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010505f:	89 04 24             	mov    %eax,(%esp)
c0105062:	e8 74 f9 ff ff       	call   c01049db <__intr_restore>
	}

	slob_free((slob_t *)block - 1, 0);
c0105067:	8b 45 08             	mov    0x8(%ebp),%eax
c010506a:	83 e8 08             	sub    $0x8,%eax
c010506d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105074:	00 
c0105075:	89 04 24             	mov    %eax,(%esp)
c0105078:	e8 c0 fc ff ff       	call   c0104d3d <slob_free>
	return;
c010507d:	90                   	nop
}
c010507e:	c9                   	leave  
c010507f:	c3                   	ret    

c0105080 <ksize>:


unsigned int ksize(const void *block)
{
c0105080:	55                   	push   %ebp
c0105081:	89 e5                	mov    %esp,%ebp
c0105083:	83 ec 28             	sub    $0x28,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0105086:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010508a:	75 07                	jne    c0105093 <ksize+0x13>
		return 0;
c010508c:	b8 00 00 00 00       	mov    $0x0,%eax
c0105091:	eb 6b                	jmp    c01050fe <ksize+0x7e>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0105093:	8b 45 08             	mov    0x8(%ebp),%eax
c0105096:	25 ff 0f 00 00       	and    $0xfff,%eax
c010509b:	85 c0                	test   %eax,%eax
c010509d:	75 54                	jne    c01050f3 <ksize+0x73>
		spin_lock_irqsave(&block_lock, flags);
c010509f:	e8 0d f9 ff ff       	call   c01049b1 <__intr_save>
c01050a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c01050a7:	a1 84 33 1c c0       	mov    0xc01c3384,%eax
c01050ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01050af:	eb 31                	jmp    c01050e2 <ksize+0x62>
			if (bb->pages == block) {
c01050b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01050b4:	8b 40 04             	mov    0x4(%eax),%eax
c01050b7:	3b 45 08             	cmp    0x8(%ebp),%eax
c01050ba:	75 1d                	jne    c01050d9 <ksize+0x59>
				spin_unlock_irqrestore(&slob_lock, flags);
c01050bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050bf:	89 04 24             	mov    %eax,(%esp)
c01050c2:	e8 14 f9 ff ff       	call   c01049db <__intr_restore>
				return PAGE_SIZE << bb->order;
c01050c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01050ca:	8b 00                	mov    (%eax),%eax
c01050cc:	ba 00 10 00 00       	mov    $0x1000,%edx
c01050d1:	89 c1                	mov    %eax,%ecx
c01050d3:	d3 e2                	shl    %cl,%edx
c01050d5:	89 d0                	mov    %edx,%eax
c01050d7:	eb 25                	jmp    c01050fe <ksize+0x7e>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c01050d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01050dc:	8b 40 08             	mov    0x8(%eax),%eax
c01050df:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01050e2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01050e6:	75 c9                	jne    c01050b1 <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c01050e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050eb:	89 04 24             	mov    %eax,(%esp)
c01050ee:	e8 e8 f8 ff ff       	call   c01049db <__intr_restore>
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c01050f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01050f6:	83 e8 08             	sub    $0x8,%eax
c01050f9:	8b 00                	mov    (%eax),%eax
c01050fb:	c1 e0 03             	shl    $0x3,%eax
}
c01050fe:	c9                   	leave  
c01050ff:	c3                   	ret    

c0105100 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0105100:	55                   	push   %ebp
c0105101:	89 e5                	mov    %esp,%ebp
    return page - pages;
c0105103:	8b 55 08             	mov    0x8(%ebp),%edx
c0105106:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c010510b:	29 c2                	sub    %eax,%edx
c010510d:	89 d0                	mov    %edx,%eax
c010510f:	c1 f8 05             	sar    $0x5,%eax
}
c0105112:	5d                   	pop    %ebp
c0105113:	c3                   	ret    

c0105114 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0105114:	55                   	push   %ebp
c0105115:	89 e5                	mov    %esp,%ebp
c0105117:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010511a:	8b 45 08             	mov    0x8(%ebp),%eax
c010511d:	89 04 24             	mov    %eax,(%esp)
c0105120:	e8 db ff ff ff       	call   c0105100 <page2ppn>
c0105125:	c1 e0 0c             	shl    $0xc,%eax
}
c0105128:	c9                   	leave  
c0105129:	c3                   	ret    

c010512a <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010512a:	55                   	push   %ebp
c010512b:	89 e5                	mov    %esp,%ebp
c010512d:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0105130:	8b 45 08             	mov    0x8(%ebp),%eax
c0105133:	c1 e8 0c             	shr    $0xc,%eax
c0105136:	89 c2                	mov    %eax,%edx
c0105138:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c010513d:	39 c2                	cmp    %eax,%edx
c010513f:	72 1c                	jb     c010515d <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0105141:	c7 44 24 08 b4 e8 10 	movl   $0xc010e8b4,0x8(%esp)
c0105148:	c0 
c0105149:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0105150:	00 
c0105151:	c7 04 24 d3 e8 10 c0 	movl   $0xc010e8d3,(%esp)
c0105158:	e8 76 bc ff ff       	call   c0100dd3 <__panic>
    }
    return &pages[PPN(pa)];
c010515d:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c0105162:	8b 55 08             	mov    0x8(%ebp),%edx
c0105165:	c1 ea 0c             	shr    $0xc,%edx
c0105168:	c1 e2 05             	shl    $0x5,%edx
c010516b:	01 d0                	add    %edx,%eax
}
c010516d:	c9                   	leave  
c010516e:	c3                   	ret    

c010516f <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010516f:	55                   	push   %ebp
c0105170:	89 e5                	mov    %esp,%ebp
c0105172:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c0105175:	8b 45 08             	mov    0x8(%ebp),%eax
c0105178:	89 04 24             	mov    %eax,(%esp)
c010517b:	e8 94 ff ff ff       	call   c0105114 <page2pa>
c0105180:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105183:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105186:	c1 e8 0c             	shr    $0xc,%eax
c0105189:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010518c:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0105191:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0105194:	72 23                	jb     c01051b9 <page2kva+0x4a>
c0105196:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105199:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010519d:	c7 44 24 08 e4 e8 10 	movl   $0xc010e8e4,0x8(%esp)
c01051a4:	c0 
c01051a5:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c01051ac:	00 
c01051ad:	c7 04 24 d3 e8 10 c0 	movl   $0xc010e8d3,(%esp)
c01051b4:	e8 1a bc ff ff       	call   c0100dd3 <__panic>
c01051b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01051bc:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c01051c1:	c9                   	leave  
c01051c2:	c3                   	ret    

c01051c3 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c01051c3:	55                   	push   %ebp
c01051c4:	89 e5                	mov    %esp,%ebp
c01051c6:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c01051c9:	8b 45 08             	mov    0x8(%ebp),%eax
c01051cc:	83 e0 01             	and    $0x1,%eax
c01051cf:	85 c0                	test   %eax,%eax
c01051d1:	75 1c                	jne    c01051ef <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c01051d3:	c7 44 24 08 08 e9 10 	movl   $0xc010e908,0x8(%esp)
c01051da:	c0 
c01051db:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c01051e2:	00 
c01051e3:	c7 04 24 d3 e8 10 c0 	movl   $0xc010e8d3,(%esp)
c01051ea:	e8 e4 bb ff ff       	call   c0100dd3 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c01051ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01051f2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01051f7:	89 04 24             	mov    %eax,(%esp)
c01051fa:	e8 2b ff ff ff       	call   c010512a <pa2page>
}
c01051ff:	c9                   	leave  
c0105200:	c3                   	ret    

c0105201 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0105201:	55                   	push   %ebp
c0105202:	89 e5                	mov    %esp,%ebp
c0105204:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0105207:	8b 45 08             	mov    0x8(%ebp),%eax
c010520a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010520f:	89 04 24             	mov    %eax,(%esp)
c0105212:	e8 13 ff ff ff       	call   c010512a <pa2page>
}
c0105217:	c9                   	leave  
c0105218:	c3                   	ret    

c0105219 <page_ref>:

static inline int
page_ref(struct Page *page) {
c0105219:	55                   	push   %ebp
c010521a:	89 e5                	mov    %esp,%ebp
    return page->ref;
c010521c:	8b 45 08             	mov    0x8(%ebp),%eax
c010521f:	8b 00                	mov    (%eax),%eax
}
c0105221:	5d                   	pop    %ebp
c0105222:	c3                   	ret    

c0105223 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0105223:	55                   	push   %ebp
c0105224:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c0105226:	8b 45 08             	mov    0x8(%ebp),%eax
c0105229:	8b 55 0c             	mov    0xc(%ebp),%edx
c010522c:	89 10                	mov    %edx,(%eax)
}
c010522e:	5d                   	pop    %ebp
c010522f:	c3                   	ret    

c0105230 <page_ref_inc>:

static inline int
page_ref_inc(struct Page *page) {
c0105230:	55                   	push   %ebp
c0105231:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c0105233:	8b 45 08             	mov    0x8(%ebp),%eax
c0105236:	8b 00                	mov    (%eax),%eax
c0105238:	8d 50 01             	lea    0x1(%eax),%edx
c010523b:	8b 45 08             	mov    0x8(%ebp),%eax
c010523e:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0105240:	8b 45 08             	mov    0x8(%ebp),%eax
c0105243:	8b 00                	mov    (%eax),%eax
}
c0105245:	5d                   	pop    %ebp
c0105246:	c3                   	ret    

c0105247 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0105247:	55                   	push   %ebp
c0105248:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c010524a:	8b 45 08             	mov    0x8(%ebp),%eax
c010524d:	8b 00                	mov    (%eax),%eax
c010524f:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105252:	8b 45 08             	mov    0x8(%ebp),%eax
c0105255:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0105257:	8b 45 08             	mov    0x8(%ebp),%eax
c010525a:	8b 00                	mov    (%eax),%eax
}
c010525c:	5d                   	pop    %ebp
c010525d:	c3                   	ret    

c010525e <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010525e:	55                   	push   %ebp
c010525f:	89 e5                	mov    %esp,%ebp
c0105261:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0105264:	9c                   	pushf  
c0105265:	58                   	pop    %eax
c0105266:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0105269:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010526c:	25 00 02 00 00       	and    $0x200,%eax
c0105271:	85 c0                	test   %eax,%eax
c0105273:	74 0c                	je     c0105281 <__intr_save+0x23>
        intr_disable();
c0105275:	e8 b1 cd ff ff       	call   c010202b <intr_disable>
        return 1;
c010527a:	b8 01 00 00 00       	mov    $0x1,%eax
c010527f:	eb 05                	jmp    c0105286 <__intr_save+0x28>
    }
    return 0;
c0105281:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105286:	c9                   	leave  
c0105287:	c3                   	ret    

c0105288 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0105288:	55                   	push   %ebp
c0105289:	89 e5                	mov    %esp,%ebp
c010528b:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010528e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105292:	74 05                	je     c0105299 <__intr_restore+0x11>
        intr_enable();
c0105294:	e8 8c cd ff ff       	call   c0102025 <intr_enable>
    }
}
c0105299:	c9                   	leave  
c010529a:	c3                   	ret    

c010529b <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c010529b:	55                   	push   %ebp
c010529c:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c010529e:	8b 45 08             	mov    0x8(%ebp),%eax
c01052a1:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c01052a4:	b8 23 00 00 00       	mov    $0x23,%eax
c01052a9:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c01052ab:	b8 23 00 00 00       	mov    $0x23,%eax
c01052b0:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c01052b2:	b8 10 00 00 00       	mov    $0x10,%eax
c01052b7:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c01052b9:	b8 10 00 00 00       	mov    $0x10,%eax
c01052be:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c01052c0:	b8 10 00 00 00       	mov    $0x10,%eax
c01052c5:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c01052c7:	ea ce 52 10 c0 08 00 	ljmp   $0x8,$0xc01052ce
}
c01052ce:	5d                   	pop    %ebp
c01052cf:	c3                   	ret    

c01052d0 <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c01052d0:	55                   	push   %ebp
c01052d1:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c01052d3:	8b 45 08             	mov    0x8(%ebp),%eax
c01052d6:	a3 c4 33 1c c0       	mov    %eax,0xc01c33c4
}
c01052db:	5d                   	pop    %ebp
c01052dc:	c3                   	ret    

c01052dd <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c01052dd:	55                   	push   %ebp
c01052de:	89 e5                	mov    %esp,%ebp
c01052e0:	83 ec 14             	sub    $0x14,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c01052e3:	b8 00 10 13 c0       	mov    $0xc0131000,%eax
c01052e8:	89 04 24             	mov    %eax,(%esp)
c01052eb:	e8 e0 ff ff ff       	call   c01052d0 <load_esp0>
    ts.ts_ss0 = KERNEL_DS;
c01052f0:	66 c7 05 c8 33 1c c0 	movw   $0x10,0xc01c33c8
c01052f7:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c01052f9:	66 c7 05 48 1a 13 c0 	movw   $0x68,0xc0131a48
c0105300:	68 00 
c0105302:	b8 c0 33 1c c0       	mov    $0xc01c33c0,%eax
c0105307:	66 a3 4a 1a 13 c0    	mov    %ax,0xc0131a4a
c010530d:	b8 c0 33 1c c0       	mov    $0xc01c33c0,%eax
c0105312:	c1 e8 10             	shr    $0x10,%eax
c0105315:	a2 4c 1a 13 c0       	mov    %al,0xc0131a4c
c010531a:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
c0105321:	83 e0 f0             	and    $0xfffffff0,%eax
c0105324:	83 c8 09             	or     $0x9,%eax
c0105327:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
c010532c:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
c0105333:	83 e0 ef             	and    $0xffffffef,%eax
c0105336:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
c010533b:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
c0105342:	83 e0 9f             	and    $0xffffff9f,%eax
c0105345:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
c010534a:	0f b6 05 4d 1a 13 c0 	movzbl 0xc0131a4d,%eax
c0105351:	83 c8 80             	or     $0xffffff80,%eax
c0105354:	a2 4d 1a 13 c0       	mov    %al,0xc0131a4d
c0105359:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c0105360:	83 e0 f0             	and    $0xfffffff0,%eax
c0105363:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c0105368:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c010536f:	83 e0 ef             	and    $0xffffffef,%eax
c0105372:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c0105377:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c010537e:	83 e0 df             	and    $0xffffffdf,%eax
c0105381:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c0105386:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c010538d:	83 c8 40             	or     $0x40,%eax
c0105390:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c0105395:	0f b6 05 4e 1a 13 c0 	movzbl 0xc0131a4e,%eax
c010539c:	83 e0 7f             	and    $0x7f,%eax
c010539f:	a2 4e 1a 13 c0       	mov    %al,0xc0131a4e
c01053a4:	b8 c0 33 1c c0       	mov    $0xc01c33c0,%eax
c01053a9:	c1 e8 18             	shr    $0x18,%eax
c01053ac:	a2 4f 1a 13 c0       	mov    %al,0xc0131a4f

    // reload all segment registers
    lgdt(&gdt_pd);
c01053b1:	c7 04 24 50 1a 13 c0 	movl   $0xc0131a50,(%esp)
c01053b8:	e8 de fe ff ff       	call   c010529b <lgdt>
c01053bd:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c01053c3:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c01053c7:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c01053ca:	c9                   	leave  
c01053cb:	c3                   	ret    

c01053cc <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c01053cc:	55                   	push   %ebp
c01053cd:	89 e5                	mov    %esp,%ebp
c01053cf:	83 ec 18             	sub    $0x18,%esp
    pmm_manager = &default_pmm_manager;
c01053d2:	c7 05 e8 54 1c c0 a8 	movl   $0xc010e7a8,0xc01c54e8
c01053d9:	e7 10 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c01053dc:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
c01053e1:	8b 00                	mov    (%eax),%eax
c01053e3:	89 44 24 04          	mov    %eax,0x4(%esp)
c01053e7:	c7 04 24 34 e9 10 c0 	movl   $0xc010e934,(%esp)
c01053ee:	e8 65 af ff ff       	call   c0100358 <cprintf>
    pmm_manager->init();
c01053f3:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
c01053f8:	8b 40 04             	mov    0x4(%eax),%eax
c01053fb:	ff d0                	call   *%eax
}
c01053fd:	c9                   	leave  
c01053fe:	c3                   	ret    

c01053ff <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory
static void
init_memmap(struct Page *base, size_t n) {
c01053ff:	55                   	push   %ebp
c0105400:	89 e5                	mov    %esp,%ebp
c0105402:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->init_memmap(base, n);
c0105405:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
c010540a:	8b 40 08             	mov    0x8(%eax),%eax
c010540d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105410:	89 54 24 04          	mov    %edx,0x4(%esp)
c0105414:	8b 55 08             	mov    0x8(%ebp),%edx
c0105417:	89 14 24             	mov    %edx,(%esp)
c010541a:	ff d0                	call   *%eax
}
c010541c:	c9                   	leave  
c010541d:	c3                   	ret    

c010541e <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory
struct Page *
alloc_pages(size_t n) {
c010541e:	55                   	push   %ebp
c010541f:	89 e5                	mov    %esp,%ebp
c0105421:	83 ec 28             	sub    $0x28,%esp
    struct Page *page=NULL;
c0105424:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;

    while (1)
    {
         local_intr_save(intr_flag);
c010542b:	e8 2e fe ff ff       	call   c010525e <__intr_save>
c0105430:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c0105433:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
c0105438:	8b 40 0c             	mov    0xc(%eax),%eax
c010543b:	8b 55 08             	mov    0x8(%ebp),%edx
c010543e:	89 14 24             	mov    %edx,(%esp)
c0105441:	ff d0                	call   *%eax
c0105443:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c0105446:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105449:	89 04 24             	mov    %eax,(%esp)
c010544c:	e8 37 fe ff ff       	call   c0105288 <__intr_restore>

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c0105451:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105455:	75 2d                	jne    c0105484 <alloc_pages+0x66>
c0105457:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c010545b:	77 27                	ja     c0105484 <alloc_pages+0x66>
c010545d:	a1 2c 34 1c c0       	mov    0xc01c342c,%eax
c0105462:	85 c0                	test   %eax,%eax
c0105464:	74 1e                	je     c0105484 <alloc_pages+0x66>

         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c0105466:	8b 55 08             	mov    0x8(%ebp),%edx
c0105469:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c010546e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105475:	00 
c0105476:	89 54 24 04          	mov    %edx,0x4(%esp)
c010547a:	89 04 24             	mov    %eax,(%esp)
c010547d:	e8 af 1d 00 00       	call   c0107231 <swap_out>
    }
c0105482:	eb a7                	jmp    c010542b <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c0105484:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105487:	c9                   	leave  
c0105488:	c3                   	ret    

c0105489 <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory
void
free_pages(struct Page *base, size_t n) {
c0105489:	55                   	push   %ebp
c010548a:	89 e5                	mov    %esp,%ebp
c010548c:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010548f:	e8 ca fd ff ff       	call   c010525e <__intr_save>
c0105494:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c0105497:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
c010549c:	8b 40 10             	mov    0x10(%eax),%eax
c010549f:	8b 55 0c             	mov    0xc(%ebp),%edx
c01054a2:	89 54 24 04          	mov    %edx,0x4(%esp)
c01054a6:	8b 55 08             	mov    0x8(%ebp),%edx
c01054a9:	89 14 24             	mov    %edx,(%esp)
c01054ac:	ff d0                	call   *%eax
    }
    local_intr_restore(intr_flag);
c01054ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01054b1:	89 04 24             	mov    %eax,(%esp)
c01054b4:	e8 cf fd ff ff       	call   c0105288 <__intr_restore>
}
c01054b9:	c9                   	leave  
c01054ba:	c3                   	ret    

c01054bb <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE)
//of current free memory
size_t
nr_free_pages(void) {
c01054bb:	55                   	push   %ebp
c01054bc:	89 e5                	mov    %esp,%ebp
c01054be:	83 ec 28             	sub    $0x28,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c01054c1:	e8 98 fd ff ff       	call   c010525e <__intr_save>
c01054c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c01054c9:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
c01054ce:	8b 40 14             	mov    0x14(%eax),%eax
c01054d1:	ff d0                	call   *%eax
c01054d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c01054d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01054d9:	89 04 24             	mov    %eax,(%esp)
c01054dc:	e8 a7 fd ff ff       	call   c0105288 <__intr_restore>
    return ret;
c01054e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01054e4:	c9                   	leave  
c01054e5:	c3                   	ret    

c01054e6 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c01054e6:	55                   	push   %ebp
c01054e7:	89 e5                	mov    %esp,%ebp
c01054e9:	57                   	push   %edi
c01054ea:	56                   	push   %esi
c01054eb:	53                   	push   %ebx
c01054ec:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c01054f2:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c01054f9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c0105500:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c0105507:	c7 04 24 4b e9 10 c0 	movl   $0xc010e94b,(%esp)
c010550e:	e8 45 ae ff ff       	call   c0100358 <cprintf>
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0105513:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010551a:	e9 15 01 00 00       	jmp    c0105634 <page_init+0x14e>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c010551f:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105522:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105525:	89 d0                	mov    %edx,%eax
c0105527:	c1 e0 02             	shl    $0x2,%eax
c010552a:	01 d0                	add    %edx,%eax
c010552c:	c1 e0 02             	shl    $0x2,%eax
c010552f:	01 c8                	add    %ecx,%eax
c0105531:	8b 50 08             	mov    0x8(%eax),%edx
c0105534:	8b 40 04             	mov    0x4(%eax),%eax
c0105537:	89 45 b8             	mov    %eax,-0x48(%ebp)
c010553a:	89 55 bc             	mov    %edx,-0x44(%ebp)
c010553d:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105540:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105543:	89 d0                	mov    %edx,%eax
c0105545:	c1 e0 02             	shl    $0x2,%eax
c0105548:	01 d0                	add    %edx,%eax
c010554a:	c1 e0 02             	shl    $0x2,%eax
c010554d:	01 c8                	add    %ecx,%eax
c010554f:	8b 48 0c             	mov    0xc(%eax),%ecx
c0105552:	8b 58 10             	mov    0x10(%eax),%ebx
c0105555:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0105558:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010555b:	01 c8                	add    %ecx,%eax
c010555d:	11 da                	adc    %ebx,%edx
c010555f:	89 45 b0             	mov    %eax,-0x50(%ebp)
c0105562:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c0105565:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105568:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010556b:	89 d0                	mov    %edx,%eax
c010556d:	c1 e0 02             	shl    $0x2,%eax
c0105570:	01 d0                	add    %edx,%eax
c0105572:	c1 e0 02             	shl    $0x2,%eax
c0105575:	01 c8                	add    %ecx,%eax
c0105577:	83 c0 14             	add    $0x14,%eax
c010557a:	8b 00                	mov    (%eax),%eax
c010557c:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
c0105582:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105585:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0105588:	83 c0 ff             	add    $0xffffffff,%eax
c010558b:	83 d2 ff             	adc    $0xffffffff,%edx
c010558e:	89 c6                	mov    %eax,%esi
c0105590:	89 d7                	mov    %edx,%edi
c0105592:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105595:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105598:	89 d0                	mov    %edx,%eax
c010559a:	c1 e0 02             	shl    $0x2,%eax
c010559d:	01 d0                	add    %edx,%eax
c010559f:	c1 e0 02             	shl    $0x2,%eax
c01055a2:	01 c8                	add    %ecx,%eax
c01055a4:	8b 48 0c             	mov    0xc(%eax),%ecx
c01055a7:	8b 58 10             	mov    0x10(%eax),%ebx
c01055aa:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
c01055b0:	89 44 24 1c          	mov    %eax,0x1c(%esp)
c01055b4:	89 74 24 14          	mov    %esi,0x14(%esp)
c01055b8:	89 7c 24 18          	mov    %edi,0x18(%esp)
c01055bc:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01055bf:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01055c2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01055c6:	89 54 24 10          	mov    %edx,0x10(%esp)
c01055ca:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c01055ce:	89 5c 24 08          	mov    %ebx,0x8(%esp)
c01055d2:	c7 04 24 58 e9 10 c0 	movl   $0xc010e958,(%esp)
c01055d9:	e8 7a ad ff ff       	call   c0100358 <cprintf>
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c01055de:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01055e1:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01055e4:	89 d0                	mov    %edx,%eax
c01055e6:	c1 e0 02             	shl    $0x2,%eax
c01055e9:	01 d0                	add    %edx,%eax
c01055eb:	c1 e0 02             	shl    $0x2,%eax
c01055ee:	01 c8                	add    %ecx,%eax
c01055f0:	83 c0 14             	add    $0x14,%eax
c01055f3:	8b 00                	mov    (%eax),%eax
c01055f5:	83 f8 01             	cmp    $0x1,%eax
c01055f8:	75 36                	jne    c0105630 <page_init+0x14a>
            if (maxpa < end && begin < KMEMSIZE) {
c01055fa:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01055fd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105600:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0105603:	77 2b                	ja     c0105630 <page_init+0x14a>
c0105605:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c0105608:	72 05                	jb     c010560f <page_init+0x129>
c010560a:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c010560d:	73 21                	jae    c0105630 <page_init+0x14a>
c010560f:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0105613:	77 1b                	ja     c0105630 <page_init+0x14a>
c0105615:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0105619:	72 09                	jb     c0105624 <page_init+0x13e>
c010561b:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c0105622:	77 0c                	ja     c0105630 <page_init+0x14a>
                maxpa = end;
c0105624:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0105627:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c010562a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010562d:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c0105630:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0105634:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0105637:	8b 00                	mov    (%eax),%eax
c0105639:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c010563c:	0f 8f dd fe ff ff    	jg     c010551f <page_init+0x39>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c0105642:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0105646:	72 1d                	jb     c0105665 <page_init+0x17f>
c0105648:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010564c:	77 09                	ja     c0105657 <page_init+0x171>
c010564e:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c0105655:	76 0e                	jbe    c0105665 <page_init+0x17f>
        maxpa = KMEMSIZE;
c0105657:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c010565e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c0105665:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105668:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010566b:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010566f:	c1 ea 0c             	shr    $0xc,%edx
c0105672:	a3 a0 33 1c c0       	mov    %eax,0xc01c33a0
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c0105677:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c010567e:	b8 c4 56 1c c0       	mov    $0xc01c56c4,%eax
c0105683:	8d 50 ff             	lea    -0x1(%eax),%edx
c0105686:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0105689:	01 d0                	add    %edx,%eax
c010568b:	89 45 a8             	mov    %eax,-0x58(%ebp)
c010568e:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0105691:	ba 00 00 00 00       	mov    $0x0,%edx
c0105696:	f7 75 ac             	divl   -0x54(%ebp)
c0105699:	89 d0                	mov    %edx,%eax
c010569b:	8b 55 a8             	mov    -0x58(%ebp),%edx
c010569e:	29 c2                	sub    %eax,%edx
c01056a0:	89 d0                	mov    %edx,%eax
c01056a2:	a3 f0 54 1c c0       	mov    %eax,0xc01c54f0

    for (i = 0; i < npage; i ++) {
c01056a7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01056ae:	eb 27                	jmp    c01056d7 <page_init+0x1f1>
        SetPageReserved(pages + i);
c01056b0:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c01056b5:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01056b8:	c1 e2 05             	shl    $0x5,%edx
c01056bb:	01 d0                	add    %edx,%eax
c01056bd:	83 c0 04             	add    $0x4,%eax
c01056c0:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c01056c7:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01056ca:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01056cd:	8b 55 90             	mov    -0x70(%ebp),%edx
c01056d0:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c01056d3:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01056d7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01056da:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c01056df:	39 c2                	cmp    %eax,%edx
c01056e1:	72 cd                	jb     c01056b0 <page_init+0x1ca>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c01056e3:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c01056e8:	c1 e0 05             	shl    $0x5,%eax
c01056eb:	89 c2                	mov    %eax,%edx
c01056ed:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c01056f2:	01 d0                	add    %edx,%eax
c01056f4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c01056f7:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c01056fe:	77 23                	ja     c0105723 <page_init+0x23d>
c0105700:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105703:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105707:	c7 44 24 08 88 e9 10 	movl   $0xc010e988,0x8(%esp)
c010570e:	c0 
c010570f:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0105716:	00 
c0105717:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c010571e:	e8 b0 b6 ff ff       	call   c0100dd3 <__panic>
c0105723:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0105726:	05 00 00 00 40       	add    $0x40000000,%eax
c010572b:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c010572e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0105735:	e9 74 01 00 00       	jmp    c01058ae <page_init+0x3c8>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c010573a:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010573d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105740:	89 d0                	mov    %edx,%eax
c0105742:	c1 e0 02             	shl    $0x2,%eax
c0105745:	01 d0                	add    %edx,%eax
c0105747:	c1 e0 02             	shl    $0x2,%eax
c010574a:	01 c8                	add    %ecx,%eax
c010574c:	8b 50 08             	mov    0x8(%eax),%edx
c010574f:	8b 40 04             	mov    0x4(%eax),%eax
c0105752:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105755:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0105758:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010575b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010575e:	89 d0                	mov    %edx,%eax
c0105760:	c1 e0 02             	shl    $0x2,%eax
c0105763:	01 d0                	add    %edx,%eax
c0105765:	c1 e0 02             	shl    $0x2,%eax
c0105768:	01 c8                	add    %ecx,%eax
c010576a:	8b 48 0c             	mov    0xc(%eax),%ecx
c010576d:	8b 58 10             	mov    0x10(%eax),%ebx
c0105770:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105773:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105776:	01 c8                	add    %ecx,%eax
c0105778:	11 da                	adc    %ebx,%edx
c010577a:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010577d:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c0105780:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0105783:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0105786:	89 d0                	mov    %edx,%eax
c0105788:	c1 e0 02             	shl    $0x2,%eax
c010578b:	01 d0                	add    %edx,%eax
c010578d:	c1 e0 02             	shl    $0x2,%eax
c0105790:	01 c8                	add    %ecx,%eax
c0105792:	83 c0 14             	add    $0x14,%eax
c0105795:	8b 00                	mov    (%eax),%eax
c0105797:	83 f8 01             	cmp    $0x1,%eax
c010579a:	0f 85 0a 01 00 00    	jne    c01058aa <page_init+0x3c4>
            if (begin < freemem) {
c01057a0:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01057a3:	ba 00 00 00 00       	mov    $0x0,%edx
c01057a8:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01057ab:	72 17                	jb     c01057c4 <page_init+0x2de>
c01057ad:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c01057b0:	77 05                	ja     c01057b7 <page_init+0x2d1>
c01057b2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c01057b5:	76 0d                	jbe    c01057c4 <page_init+0x2de>
                begin = freemem;
c01057b7:	8b 45 a0             	mov    -0x60(%ebp),%eax
c01057ba:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01057bd:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c01057c4:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01057c8:	72 1d                	jb     c01057e7 <page_init+0x301>
c01057ca:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c01057ce:	77 09                	ja     c01057d9 <page_init+0x2f3>
c01057d0:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c01057d7:	76 0e                	jbe    c01057e7 <page_init+0x301>
                end = KMEMSIZE;
c01057d9:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c01057e0:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c01057e7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01057ea:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01057ed:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01057f0:	0f 87 b4 00 00 00    	ja     c01058aa <page_init+0x3c4>
c01057f6:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01057f9:	72 09                	jb     c0105804 <page_init+0x31e>
c01057fb:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01057fe:	0f 83 a6 00 00 00    	jae    c01058aa <page_init+0x3c4>
                begin = ROUNDUP(begin, PGSIZE);
c0105804:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c010580b:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010580e:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0105811:	01 d0                	add    %edx,%eax
c0105813:	83 e8 01             	sub    $0x1,%eax
c0105816:	89 45 98             	mov    %eax,-0x68(%ebp)
c0105819:	8b 45 98             	mov    -0x68(%ebp),%eax
c010581c:	ba 00 00 00 00       	mov    $0x0,%edx
c0105821:	f7 75 9c             	divl   -0x64(%ebp)
c0105824:	89 d0                	mov    %edx,%eax
c0105826:	8b 55 98             	mov    -0x68(%ebp),%edx
c0105829:	29 c2                	sub    %eax,%edx
c010582b:	89 d0                	mov    %edx,%eax
c010582d:	ba 00 00 00 00       	mov    $0x0,%edx
c0105832:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0105835:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c0105838:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010583b:	89 45 94             	mov    %eax,-0x6c(%ebp)
c010583e:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0105841:	ba 00 00 00 00       	mov    $0x0,%edx
c0105846:	89 c7                	mov    %eax,%edi
c0105848:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
c010584e:	89 7d 80             	mov    %edi,-0x80(%ebp)
c0105851:	89 d0                	mov    %edx,%eax
c0105853:	83 e0 00             	and    $0x0,%eax
c0105856:	89 45 84             	mov    %eax,-0x7c(%ebp)
c0105859:	8b 45 80             	mov    -0x80(%ebp),%eax
c010585c:	8b 55 84             	mov    -0x7c(%ebp),%edx
c010585f:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0105862:	89 55 cc             	mov    %edx,-0x34(%ebp)
                if (begin < end) {
c0105865:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105868:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010586b:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c010586e:	77 3a                	ja     c01058aa <page_init+0x3c4>
c0105870:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0105873:	72 05                	jb     c010587a <page_init+0x394>
c0105875:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0105878:	73 30                	jae    c01058aa <page_init+0x3c4>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c010587a:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010587d:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
c0105880:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105883:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0105886:	29 c8                	sub    %ecx,%eax
c0105888:	19 da                	sbb    %ebx,%edx
c010588a:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010588e:	c1 ea 0c             	shr    $0xc,%edx
c0105891:	89 c3                	mov    %eax,%ebx
c0105893:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105896:	89 04 24             	mov    %eax,(%esp)
c0105899:	e8 8c f8 ff ff       	call   c010512a <pa2page>
c010589e:	89 5c 24 04          	mov    %ebx,0x4(%esp)
c01058a2:	89 04 24             	mov    %eax,(%esp)
c01058a5:	e8 55 fb ff ff       	call   c01053ff <init_memmap>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c01058aa:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01058ae:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01058b1:	8b 00                	mov    (%eax),%eax
c01058b3:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01058b6:	0f 8f 7e fe ff ff    	jg     c010573a <page_init+0x254>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c01058bc:	81 c4 9c 00 00 00    	add    $0x9c,%esp
c01058c2:	5b                   	pop    %ebx
c01058c3:	5e                   	pop    %esi
c01058c4:	5f                   	pop    %edi
c01058c5:	5d                   	pop    %ebp
c01058c6:	c3                   	ret    

c01058c7 <enable_paging>:

static void
enable_paging(void) {
c01058c7:	55                   	push   %ebp
c01058c8:	89 e5                	mov    %esp,%ebp
c01058ca:	83 ec 10             	sub    $0x10,%esp
    lcr3(boot_cr3);
c01058cd:	a1 ec 54 1c c0       	mov    0xc01c54ec,%eax
c01058d2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c01058d5:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01058d8:	0f 22 d8             	mov    %eax,%cr3
}

static inline uintptr_t
rcr0(void) {
    uintptr_t cr0;
    asm volatile ("mov %%cr0, %0" : "=r" (cr0) :: "memory");
c01058db:	0f 20 c0             	mov    %cr0,%eax
c01058de:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr0;
c01058e1:	8b 45 f4             	mov    -0xc(%ebp),%eax

    // turn on paging
    uint32_t cr0 = rcr0();
c01058e4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    cr0 |= CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP;
c01058e7:	81 4d fc 2f 00 05 80 	orl    $0x8005002f,-0x4(%ebp)
    cr0 &= ~(CR0_TS | CR0_EM);
c01058ee:	83 65 fc f3          	andl   $0xfffffff3,-0x4(%ebp)
c01058f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01058f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    asm volatile ("pushl %0; popfl" :: "r" (eflags));
}

static inline void
lcr0(uintptr_t cr0) {
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
c01058f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01058fb:	0f 22 c0             	mov    %eax,%cr0
    lcr0(cr0);
}
c01058fe:	c9                   	leave  
c01058ff:	c3                   	ret    

c0105900 <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c0105900:	55                   	push   %ebp
c0105901:	89 e5                	mov    %esp,%ebp
c0105903:	83 ec 38             	sub    $0x38,%esp
    assert(PGOFF(la) == PGOFF(pa));
c0105906:	8b 45 14             	mov    0x14(%ebp),%eax
c0105909:	8b 55 0c             	mov    0xc(%ebp),%edx
c010590c:	31 d0                	xor    %edx,%eax
c010590e:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105913:	85 c0                	test   %eax,%eax
c0105915:	74 24                	je     c010593b <boot_map_segment+0x3b>
c0105917:	c7 44 24 0c ba e9 10 	movl   $0xc010e9ba,0xc(%esp)
c010591e:	c0 
c010591f:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0105926:	c0 
c0105927:	c7 44 24 04 12 01 00 	movl   $0x112,0x4(%esp)
c010592e:	00 
c010592f:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0105936:	e8 98 b4 ff ff       	call   c0100dd3 <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c010593b:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c0105942:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105945:	25 ff 0f 00 00       	and    $0xfff,%eax
c010594a:	89 c2                	mov    %eax,%edx
c010594c:	8b 45 10             	mov    0x10(%ebp),%eax
c010594f:	01 c2                	add    %eax,%edx
c0105951:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105954:	01 d0                	add    %edx,%eax
c0105956:	83 e8 01             	sub    $0x1,%eax
c0105959:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010595c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010595f:	ba 00 00 00 00       	mov    $0x0,%edx
c0105964:	f7 75 f0             	divl   -0x10(%ebp)
c0105967:	89 d0                	mov    %edx,%eax
c0105969:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010596c:	29 c2                	sub    %eax,%edx
c010596e:	89 d0                	mov    %edx,%eax
c0105970:	c1 e8 0c             	shr    $0xc,%eax
c0105973:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c0105976:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105979:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010597c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010597f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105984:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c0105987:	8b 45 14             	mov    0x14(%ebp),%eax
c010598a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010598d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105990:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105995:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0105998:	eb 6b                	jmp    c0105a05 <boot_map_segment+0x105>
        pte_t *ptep = get_pte(pgdir, la, 1);
c010599a:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01059a1:	00 
c01059a2:	8b 45 0c             	mov    0xc(%ebp),%eax
c01059a5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01059a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01059ac:	89 04 24             	mov    %eax,(%esp)
c01059af:	e8 d1 01 00 00       	call   c0105b85 <get_pte>
c01059b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c01059b7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01059bb:	75 24                	jne    c01059e1 <boot_map_segment+0xe1>
c01059bd:	c7 44 24 0c e6 e9 10 	movl   $0xc010e9e6,0xc(%esp)
c01059c4:	c0 
c01059c5:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c01059cc:	c0 
c01059cd:	c7 44 24 04 18 01 00 	movl   $0x118,0x4(%esp)
c01059d4:	00 
c01059d5:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c01059dc:	e8 f2 b3 ff ff       	call   c0100dd3 <__panic>
        *ptep = pa | PTE_P | perm;
c01059e1:	8b 45 18             	mov    0x18(%ebp),%eax
c01059e4:	8b 55 14             	mov    0x14(%ebp),%edx
c01059e7:	09 d0                	or     %edx,%eax
c01059e9:	83 c8 01             	or     $0x1,%eax
c01059ec:	89 c2                	mov    %eax,%edx
c01059ee:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01059f1:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c01059f3:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01059f7:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c01059fe:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c0105a05:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105a09:	75 8f                	jne    c010599a <boot_map_segment+0x9a>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c0105a0b:	c9                   	leave  
c0105a0c:	c3                   	ret    

c0105a0d <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1)
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c0105a0d:	55                   	push   %ebp
c0105a0e:	89 e5                	mov    %esp,%ebp
c0105a10:	83 ec 28             	sub    $0x28,%esp
    struct Page *p = alloc_page();
c0105a13:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105a1a:	e8 ff f9 ff ff       	call   c010541e <alloc_pages>
c0105a1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0105a22:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105a26:	75 1c                	jne    c0105a44 <boot_alloc_page+0x37>
        panic("boot_alloc_page failed.\n");
c0105a28:	c7 44 24 08 f3 e9 10 	movl   $0xc010e9f3,0x8(%esp)
c0105a2f:	c0 
c0105a30:	c7 44 24 04 24 01 00 	movl   $0x124,0x4(%esp)
c0105a37:	00 
c0105a38:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0105a3f:	e8 8f b3 ff ff       	call   c0100dd3 <__panic>
    }
    return page2kva(p);
c0105a44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105a47:	89 04 24             	mov    %eax,(%esp)
c0105a4a:	e8 20 f7 ff ff       	call   c010516f <page2kva>
}
c0105a4f:	c9                   	leave  
c0105a50:	c3                   	ret    

c0105a51 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c0105a51:	55                   	push   %ebp
c0105a52:	89 e5                	mov    %esp,%ebp
c0105a54:	83 ec 38             	sub    $0x38,%esp
    //We need to alloc/free the physical memory (granularity is 4KB or other size).
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory.
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0105a57:	e8 70 f9 ff ff       	call   c01053cc <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c0105a5c:	e8 85 fa ff ff       	call   c01054e6 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c0105a61:	e8 70 09 00 00       	call   c01063d6 <check_alloc_page>

    // create boot_pgdir, an initial page directory(Page Directory Table, PDT)
    boot_pgdir = boot_alloc_page();
c0105a66:	e8 a2 ff ff ff       	call   c0105a0d <boot_alloc_page>
c0105a6b:	a3 a4 33 1c c0       	mov    %eax,0xc01c33a4
    memset(boot_pgdir, 0, PGSIZE);
c0105a70:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0105a75:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105a7c:	00 
c0105a7d:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105a84:	00 
c0105a85:	89 04 24             	mov    %eax,(%esp)
c0105a88:	e8 d9 7e 00 00       	call   c010d966 <memset>
    boot_cr3 = PADDR(boot_pgdir);
c0105a8d:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0105a92:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105a95:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0105a9c:	77 23                	ja     c0105ac1 <pmm_init+0x70>
c0105a9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105aa1:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105aa5:	c7 44 24 08 88 e9 10 	movl   $0xc010e988,0x8(%esp)
c0105aac:	c0 
c0105aad:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c0105ab4:	00 
c0105ab5:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0105abc:	e8 12 b3 ff ff       	call   c0100dd3 <__panic>
c0105ac1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105ac4:	05 00 00 00 40       	add    $0x40000000,%eax
c0105ac9:	a3 ec 54 1c c0       	mov    %eax,0xc01c54ec

    check_pgdir();
c0105ace:	e8 21 09 00 00       	call   c01063f4 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c0105ad3:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0105ad8:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0105ade:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0105ae3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105ae6:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0105aed:	77 23                	ja     c0105b12 <pmm_init+0xc1>
c0105aef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105af2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105af6:	c7 44 24 08 88 e9 10 	movl   $0xc010e988,0x8(%esp)
c0105afd:	c0 
c0105afe:	c7 44 24 04 46 01 00 	movl   $0x146,0x4(%esp)
c0105b05:	00 
c0105b06:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0105b0d:	e8 c1 b2 ff ff       	call   c0100dd3 <__panic>
c0105b12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b15:	05 00 00 00 40       	add    $0x40000000,%eax
c0105b1a:	83 c8 03             	or     $0x3,%eax
c0105b1d:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    //linear_addr KERNBASE~KERNBASE+KMEMSIZE = phy_addr 0~KMEMSIZE
    //But shouldn't use this map until enable_paging() & gdt_init() finished.
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c0105b1f:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0105b24:	c7 44 24 10 02 00 00 	movl   $0x2,0x10(%esp)
c0105b2b:	00 
c0105b2c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c0105b33:	00 
c0105b34:	c7 44 24 08 00 00 00 	movl   $0x38000000,0x8(%esp)
c0105b3b:	38 
c0105b3c:	c7 44 24 04 00 00 00 	movl   $0xc0000000,0x4(%esp)
c0105b43:	c0 
c0105b44:	89 04 24             	mov    %eax,(%esp)
c0105b47:	e8 b4 fd ff ff       	call   c0105900 <boot_map_segment>

    //temporary map:
    //virtual_addr 3G~3G+4M = linear_addr 0~4M = linear_addr 3G~3G+4M = phy_addr 0~4M
    boot_pgdir[0] = boot_pgdir[PDX(KERNBASE)];
c0105b4c:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0105b51:	8b 15 a4 33 1c c0    	mov    0xc01c33a4,%edx
c0105b57:	8b 92 00 0c 00 00    	mov    0xc00(%edx),%edx
c0105b5d:	89 10                	mov    %edx,(%eax)

    enable_paging();
c0105b5f:	e8 63 fd ff ff       	call   c01058c7 <enable_paging>

    //reload gdt(third time,the last time) to map all physical memory
    //virtual_addr 0~4G=liear_addr 0~4G
    //then set kernel stack(ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c0105b64:	e8 74 f7 ff ff       	call   c01052dd <gdt_init>

    //disable the map of virtual_addr 0~4M
    boot_pgdir[0] = 0;
c0105b69:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0105b6e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c0105b74:	e8 16 0f 00 00       	call   c0106a8f <check_boot_pgdir>

    print_pgdir();
c0105b79:	e8 9e 13 00 00       	call   c0106f1c <print_pgdir>

    kmalloc_init();
c0105b7e:	e8 e6 f2 ff ff       	call   c0104e69 <kmalloc_init>

}
c0105b83:	c9                   	leave  
c0105b84:	c3                   	ret    

c0105b85 <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c0105b85:	55                   	push   %ebp
c0105b86:	89 e5                	mov    %esp,%ebp
c0105b88:	83 ec 38             	sub    $0x38,%esp
     * DEFINEs:
     *   PTE_P           0x001                   // page table/directory entry flags bit : Present
     *   PTE_W           0x002                   // page table/directory entry flags bit : Writeable
     *   PTE_U           0x004                   // page table/directory entry flags bit : User can access
     */
     pde_t *pdep = &pgdir[PDX(la)];                      // (1) find page directory entry
c0105b8b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105b8e:	c1 e8 16             	shr    $0x16,%eax
c0105b91:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105b98:	8b 45 08             	mov    0x8(%ebp),%eax
c0105b9b:	01 d0                	add    %edx,%eax
c0105b9d:	89 45 f0             	mov    %eax,-0x10(%ebp)
     uintptr_t pa;
     if (!(*pdep & PTE_P))                               // (2) check if entry is not present
c0105ba0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ba3:	8b 00                	mov    (%eax),%eax
c0105ba5:	83 e0 01             	and    $0x1,%eax
c0105ba8:	85 c0                	test   %eax,%eax
c0105baa:	0f 85 bc 00 00 00    	jne    c0105c6c <get_pte+0xe7>
         if (create) {                                   // (3) check if creating is needed, then alloc page for page table
c0105bb0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105bb4:	0f 84 ab 00 00 00    	je     c0105c65 <get_pte+0xe0>
             struct Page *p = alloc_page();              // CAUTION: this page is used for page table, not for common data page
c0105bba:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0105bc1:	e8 58 f8 ff ff       	call   c010541e <alloc_pages>
c0105bc6:	89 45 ec             	mov    %eax,-0x14(%ebp)
             if (!p) return NULL;
c0105bc9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0105bcd:	75 0a                	jne    c0105bd9 <get_pte+0x54>
c0105bcf:	b8 00 00 00 00       	mov    $0x0,%eax
c0105bd4:	e9 f5 00 00 00       	jmp    c0105cce <get_pte+0x149>
             set_page_ref(p, 1);                         // (4) set page reference
c0105bd9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105be0:	00 
c0105be1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105be4:	89 04 24             	mov    %eax,(%esp)
c0105be7:	e8 37 f6 ff ff       	call   c0105223 <set_page_ref>
             pa = page2pa(p);                            // (5) get linear address of page
c0105bec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105bef:	89 04 24             	mov    %eax,(%esp)
c0105bf2:	e8 1d f5 ff ff       	call   c0105114 <page2pa>
c0105bf7:	89 45 f4             	mov    %eax,-0xc(%ebp)
             memset(KADDR(pa), 0, 1 << PGSHIFT);         // (6) clear page content using memset
c0105bfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105bfd:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105c00:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105c03:	c1 e8 0c             	shr    $0xc,%eax
c0105c06:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0105c09:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0105c0e:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c0105c11:	72 23                	jb     c0105c36 <get_pte+0xb1>
c0105c13:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105c16:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105c1a:	c7 44 24 08 e4 e8 10 	movl   $0xc010e8e4,0x8(%esp)
c0105c21:	c0 
c0105c22:	c7 44 24 04 8b 01 00 	movl   $0x18b,0x4(%esp)
c0105c29:	00 
c0105c2a:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0105c31:	e8 9d b1 ff ff       	call   c0100dd3 <__panic>
c0105c36:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105c39:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105c3e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0105c45:	00 
c0105c46:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0105c4d:	00 
c0105c4e:	89 04 24             	mov    %eax,(%esp)
c0105c51:	e8 10 7d 00 00       	call   c010d966 <memset>
             *pdep = pa | PTE_P | PTE_W | PTE_U;         // (7) set page directory entry's permission
c0105c56:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c59:	83 c8 07             	or     $0x7,%eax
c0105c5c:	89 c2                	mov    %eax,%edx
c0105c5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c61:	89 10                	mov    %edx,(%eax)
c0105c63:	eb 14                	jmp    c0105c79 <get_pte+0xf4>
         } else
             return NULL;
c0105c65:	b8 00 00 00 00       	mov    $0x0,%eax
c0105c6a:	eb 62                	jmp    c0105cce <get_pte+0x149>
     else
         pa = PDE_ADDR(*pdep);                           // (5) get linear address of page
c0105c6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105c6f:	8b 00                	mov    (%eax),%eax
c0105c71:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105c76:	89 45 f4             	mov    %eax,-0xc(%ebp)

     return &((pte_t *) KADDR(pa))[PTX(la)];             // (8) return page table entry
c0105c79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c7c:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0105c7f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105c82:	c1 e8 0c             	shr    $0xc,%eax
c0105c85:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0105c88:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0105c8d:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0105c90:	72 23                	jb     c0105cb5 <get_pte+0x130>
c0105c92:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105c95:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0105c99:	c7 44 24 08 e4 e8 10 	movl   $0xc010e8e4,0x8(%esp)
c0105ca0:	c0 
c0105ca1:	c7 44 24 04 92 01 00 	movl   $0x192,0x4(%esp)
c0105ca8:	00 
c0105ca9:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0105cb0:	e8 1e b1 ff ff       	call   c0100dd3 <__panic>
c0105cb5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105cb8:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0105cbd:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105cc0:	c1 ea 0c             	shr    $0xc,%edx
c0105cc3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
c0105cc9:	c1 e2 02             	shl    $0x2,%edx
c0105ccc:	01 d0                	add    %edx,%eax
}
c0105cce:	c9                   	leave  
c0105ccf:	c3                   	ret    

c0105cd0 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0105cd0:	55                   	push   %ebp
c0105cd1:	89 e5                	mov    %esp,%ebp
c0105cd3:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0105cd6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105cdd:	00 
c0105cde:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ce1:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105ce5:	8b 45 08             	mov    0x8(%ebp),%eax
c0105ce8:	89 04 24             	mov    %eax,(%esp)
c0105ceb:	e8 95 fe ff ff       	call   c0105b85 <get_pte>
c0105cf0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0105cf3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0105cf7:	74 08                	je     c0105d01 <get_page+0x31>
        *ptep_store = ptep;
c0105cf9:	8b 45 10             	mov    0x10(%ebp),%eax
c0105cfc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105cff:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0105d01:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105d05:	74 1b                	je     c0105d22 <get_page+0x52>
c0105d07:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d0a:	8b 00                	mov    (%eax),%eax
c0105d0c:	83 e0 01             	and    $0x1,%eax
c0105d0f:	85 c0                	test   %eax,%eax
c0105d11:	74 0f                	je     c0105d22 <get_page+0x52>
        return pte2page(*ptep);
c0105d13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d16:	8b 00                	mov    (%eax),%eax
c0105d18:	89 04 24             	mov    %eax,(%esp)
c0105d1b:	e8 a3 f4 ff ff       	call   c01051c3 <pte2page>
c0105d20:	eb 05                	jmp    c0105d27 <get_page+0x57>
    }
    return NULL;
c0105d22:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0105d27:	c9                   	leave  
c0105d28:	c3                   	ret    

c0105d29 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0105d29:	55                   	push   %ebp
c0105d2a:	89 e5                	mov    %esp,%ebp
c0105d2c:	83 ec 28             	sub    $0x28,%esp
     *   tlb_invalidate(pde_t *pgdir, uintptr_t la) : Invalidate a TLB entry, but only if the page tables being
     *                        edited are the ones currently in use by the processor.
     * DEFINEs:
     *   PTE_P           0x001                   // page table/directory entry flags bit : Present
     */
     if (*ptep & PTE_P) {                                //(1) check if this page table entry is present
c0105d2f:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d32:	8b 00                	mov    (%eax),%eax
c0105d34:	83 e0 01             	and    $0x1,%eax
c0105d37:	85 c0                	test   %eax,%eax
c0105d39:	74 4d                	je     c0105d88 <page_remove_pte+0x5f>
         struct Page *p = pte2page(*ptep);               //(2) find corresponding page to pte
c0105d3b:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d3e:	8b 00                	mov    (%eax),%eax
c0105d40:	89 04 24             	mov    %eax,(%esp)
c0105d43:	e8 7b f4 ff ff       	call   c01051c3 <pte2page>
c0105d48:	89 45 f4             	mov    %eax,-0xc(%ebp)
         if (!page_ref_dec(p))                           //(3) decrease page reference
c0105d4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d4e:	89 04 24             	mov    %eax,(%esp)
c0105d51:	e8 f1 f4 ff ff       	call   c0105247 <page_ref_dec>
c0105d56:	85 c0                	test   %eax,%eax
c0105d58:	75 13                	jne    c0105d6d <page_remove_pte+0x44>
             free_page(p);                               //(4) and free this page when page reference reachs 0
c0105d5a:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105d61:	00 
c0105d62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d65:	89 04 24             	mov    %eax,(%esp)
c0105d68:	e8 1c f7 ff ff       	call   c0105489 <free_pages>
         *ptep = 0;                                      //(5) clear second page table entry
c0105d6d:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d70:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
         tlb_invalidate(pgdir, la);                      //(6) flush tlb
c0105d76:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d79:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105d7d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d80:	89 04 24             	mov    %eax,(%esp)
c0105d83:	e8 1d 05 00 00       	call   c01062a5 <tlb_invalidate>
     }
}
c0105d88:	c9                   	leave  
c0105d89:	c3                   	ret    

c0105d8a <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105d8a:	55                   	push   %ebp
c0105d8b:	89 e5                	mov    %esp,%ebp
c0105d8d:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105d90:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105d93:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105d98:	85 c0                	test   %eax,%eax
c0105d9a:	75 0c                	jne    c0105da8 <unmap_range+0x1e>
c0105d9c:	8b 45 10             	mov    0x10(%ebp),%eax
c0105d9f:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105da4:	85 c0                	test   %eax,%eax
c0105da6:	74 24                	je     c0105dcc <unmap_range+0x42>
c0105da8:	c7 44 24 0c 0c ea 10 	movl   $0xc010ea0c,0xc(%esp)
c0105daf:	c0 
c0105db0:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0105db7:	c0 
c0105db8:	c7 44 24 04 c2 01 00 	movl   $0x1c2,0x4(%esp)
c0105dbf:	00 
c0105dc0:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0105dc7:	e8 07 b0 ff ff       	call   c0100dd3 <__panic>
    assert(USER_ACCESS(start, end));
c0105dcc:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105dd3:	76 11                	jbe    c0105de6 <unmap_range+0x5c>
c0105dd5:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105dd8:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105ddb:	73 09                	jae    c0105de6 <unmap_range+0x5c>
c0105ddd:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105de4:	76 24                	jbe    c0105e0a <unmap_range+0x80>
c0105de6:	c7 44 24 0c 35 ea 10 	movl   $0xc010ea35,0xc(%esp)
c0105ded:	c0 
c0105dee:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0105df5:	c0 
c0105df6:	c7 44 24 04 c3 01 00 	movl   $0x1c3,0x4(%esp)
c0105dfd:	00 
c0105dfe:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0105e05:	e8 c9 af ff ff       	call   c0100dd3 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0105e0a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0105e11:	00 
c0105e12:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e15:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e19:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e1c:	89 04 24             	mov    %eax,(%esp)
c0105e1f:	e8 61 fd ff ff       	call   c0105b85 <get_pte>
c0105e24:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0105e27:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105e2b:	75 18                	jne    c0105e45 <unmap_range+0xbb>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0105e2d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e30:	05 00 00 40 00       	add    $0x400000,%eax
c0105e35:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105e38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105e3b:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105e40:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0105e43:	eb 29                	jmp    c0105e6e <unmap_range+0xe4>
        }
        if (*ptep != 0) {
c0105e45:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e48:	8b 00                	mov    (%eax),%eax
c0105e4a:	85 c0                	test   %eax,%eax
c0105e4c:	74 19                	je     c0105e67 <unmap_range+0xdd>
            page_remove_pte(pgdir, start, ptep);
c0105e4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105e51:	89 44 24 08          	mov    %eax,0x8(%esp)
c0105e55:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e58:	89 44 24 04          	mov    %eax,0x4(%esp)
c0105e5c:	8b 45 08             	mov    0x8(%ebp),%eax
c0105e5f:	89 04 24             	mov    %eax,(%esp)
c0105e62:	e8 c2 fe ff ff       	call   c0105d29 <page_remove_pte>
        }
        start += PGSIZE;
c0105e67:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105e6e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105e72:	74 08                	je     c0105e7c <unmap_range+0xf2>
c0105e74:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e77:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105e7a:	72 8e                	jb     c0105e0a <unmap_range+0x80>
}
c0105e7c:	c9                   	leave  
c0105e7d:	c3                   	ret    

c0105e7e <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0105e7e:	55                   	push   %ebp
c0105e7f:	89 e5                	mov    %esp,%ebp
c0105e81:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105e84:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105e87:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105e8c:	85 c0                	test   %eax,%eax
c0105e8e:	75 0c                	jne    c0105e9c <exit_range+0x1e>
c0105e90:	8b 45 10             	mov    0x10(%ebp),%eax
c0105e93:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105e98:	85 c0                	test   %eax,%eax
c0105e9a:	74 24                	je     c0105ec0 <exit_range+0x42>
c0105e9c:	c7 44 24 0c 0c ea 10 	movl   $0xc010ea0c,0xc(%esp)
c0105ea3:	c0 
c0105ea4:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0105eab:	c0 
c0105eac:	c7 44 24 04 d4 01 00 	movl   $0x1d4,0x4(%esp)
c0105eb3:	00 
c0105eb4:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0105ebb:	e8 13 af ff ff       	call   c0100dd3 <__panic>
    assert(USER_ACCESS(start, end));
c0105ec0:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105ec7:	76 11                	jbe    c0105eda <exit_range+0x5c>
c0105ec9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ecc:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105ecf:	73 09                	jae    c0105eda <exit_range+0x5c>
c0105ed1:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0105ed8:	76 24                	jbe    c0105efe <exit_range+0x80>
c0105eda:	c7 44 24 0c 35 ea 10 	movl   $0xc010ea35,0xc(%esp)
c0105ee1:	c0 
c0105ee2:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0105ee9:	c0 
c0105eea:	c7 44 24 04 d5 01 00 	movl   $0x1d5,0x4(%esp)
c0105ef1:	00 
c0105ef2:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0105ef9:	e8 d5 ae ff ff       	call   c0100dd3 <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0105efe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f01:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105f04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105f07:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0105f0c:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0105f0f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f12:	c1 e8 16             	shr    $0x16,%eax
c0105f15:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0105f18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f1b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105f22:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f25:	01 d0                	add    %edx,%eax
c0105f27:	8b 00                	mov    (%eax),%eax
c0105f29:	83 e0 01             	and    $0x1,%eax
c0105f2c:	85 c0                	test   %eax,%eax
c0105f2e:	74 3e                	je     c0105f6e <exit_range+0xf0>
            free_page(pde2page(pgdir[pde_idx]));
c0105f30:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f33:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105f3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f3d:	01 d0                	add    %edx,%eax
c0105f3f:	8b 00                	mov    (%eax),%eax
c0105f41:	89 04 24             	mov    %eax,(%esp)
c0105f44:	e8 b8 f2 ff ff       	call   c0105201 <pde2page>
c0105f49:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0105f50:	00 
c0105f51:	89 04 24             	mov    %eax,(%esp)
c0105f54:	e8 30 f5 ff ff       	call   c0105489 <free_pages>
            pgdir[pde_idx] = 0;
c0105f59:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105f5c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0105f63:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f66:	01 d0                	add    %edx,%eax
c0105f68:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0105f6e:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0105f75:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105f79:	74 08                	je     c0105f83 <exit_range+0x105>
c0105f7b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105f7e:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105f81:	72 8c                	jb     c0105f0f <exit_range+0x91>
}
c0105f83:	c9                   	leave  
c0105f84:	c3                   	ret    

c0105f85 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0105f85:	55                   	push   %ebp
c0105f86:	89 e5                	mov    %esp,%ebp
c0105f88:	83 ec 48             	sub    $0x48,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0105f8b:	8b 45 10             	mov    0x10(%ebp),%eax
c0105f8e:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105f93:	85 c0                	test   %eax,%eax
c0105f95:	75 0c                	jne    c0105fa3 <copy_range+0x1e>
c0105f97:	8b 45 14             	mov    0x14(%ebp),%eax
c0105f9a:	25 ff 0f 00 00       	and    $0xfff,%eax
c0105f9f:	85 c0                	test   %eax,%eax
c0105fa1:	74 24                	je     c0105fc7 <copy_range+0x42>
c0105fa3:	c7 44 24 0c 0c ea 10 	movl   $0xc010ea0c,0xc(%esp)
c0105faa:	c0 
c0105fab:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0105fb2:	c0 
c0105fb3:	c7 44 24 04 ea 01 00 	movl   $0x1ea,0x4(%esp)
c0105fba:	00 
c0105fbb:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0105fc2:	e8 0c ae ff ff       	call   c0100dd3 <__panic>
    assert(USER_ACCESS(start, end));
c0105fc7:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0105fce:	76 11                	jbe    c0105fe1 <copy_range+0x5c>
c0105fd0:	8b 45 10             	mov    0x10(%ebp),%eax
c0105fd3:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105fd6:	73 09                	jae    c0105fe1 <copy_range+0x5c>
c0105fd8:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0105fdf:	76 24                	jbe    c0106005 <copy_range+0x80>
c0105fe1:	c7 44 24 0c 35 ea 10 	movl   $0xc010ea35,0xc(%esp)
c0105fe8:	c0 
c0105fe9:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0105ff0:	c0 
c0105ff1:	c7 44 24 04 eb 01 00 	movl   $0x1eb,0x4(%esp)
c0105ff8:	00 
c0105ff9:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106000:	e8 ce ad ff ff       	call   c0100dd3 <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0106005:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010600c:	00 
c010600d:	8b 45 10             	mov    0x10(%ebp),%eax
c0106010:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106014:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106017:	89 04 24             	mov    %eax,(%esp)
c010601a:	e8 66 fb ff ff       	call   c0105b85 <get_pte>
c010601f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0106022:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106026:	75 1b                	jne    c0106043 <copy_range+0xbe>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0106028:	8b 45 10             	mov    0x10(%ebp),%eax
c010602b:	05 00 00 40 00       	add    $0x400000,%eax
c0106030:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106033:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106036:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c010603b:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c010603e:	e9 4c 01 00 00       	jmp    c010618f <copy_range+0x20a>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0106043:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106046:	8b 00                	mov    (%eax),%eax
c0106048:	83 e0 01             	and    $0x1,%eax
c010604b:	85 c0                	test   %eax,%eax
c010604d:	0f 84 35 01 00 00    	je     c0106188 <copy_range+0x203>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0106053:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c010605a:	00 
c010605b:	8b 45 10             	mov    0x10(%ebp),%eax
c010605e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106062:	8b 45 08             	mov    0x8(%ebp),%eax
c0106065:	89 04 24             	mov    %eax,(%esp)
c0106068:	e8 18 fb ff ff       	call   c0105b85 <get_pte>
c010606d:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106070:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0106074:	75 0a                	jne    c0106080 <copy_range+0xfb>
                return -E_NO_MEM;
c0106076:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010607b:	e9 26 01 00 00       	jmp    c01061a6 <copy_range+0x221>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0106080:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106083:	8b 00                	mov    (%eax),%eax
c0106085:	83 e0 07             	and    $0x7,%eax
c0106088:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c010608b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010608e:	8b 00                	mov    (%eax),%eax
c0106090:	89 04 24             	mov    %eax,(%esp)
c0106093:	e8 2b f1 ff ff       	call   c01051c3 <pte2page>
c0106098:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c010609b:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01060a2:	e8 77 f3 ff ff       	call   c010541e <alloc_pages>
c01060a7:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c01060aa:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01060ae:	75 24                	jne    c01060d4 <copy_range+0x14f>
c01060b0:	c7 44 24 0c 4d ea 10 	movl   $0xc010ea4d,0xc(%esp)
c01060b7:	c0 
c01060b8:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c01060bf:	c0 
c01060c0:	c7 44 24 04 fe 01 00 	movl   $0x1fe,0x4(%esp)
c01060c7:	00 
c01060c8:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c01060cf:	e8 ff ac ff ff       	call   c0100dd3 <__panic>
        assert(npage!=NULL);
c01060d4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01060d8:	75 24                	jne    c01060fe <copy_range+0x179>
c01060da:	c7 44 24 0c 58 ea 10 	movl   $0xc010ea58,0xc(%esp)
c01060e1:	c0 
c01060e2:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c01060e9:	c0 
c01060ea:	c7 44 24 04 ff 01 00 	movl   $0x1ff,0x4(%esp)
c01060f1:	00 
c01060f2:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c01060f9:	e8 d5 ac ff ff       	call   c0100dd3 <__panic>
        int ret=0;
c01060fe:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
             void *src_kvaddr = page2kva(page);
c0106105:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106108:	89 04 24             	mov    %eax,(%esp)
c010610b:	e8 5f f0 ff ff       	call   c010516f <page2kva>
c0106110:	89 45 d8             	mov    %eax,-0x28(%ebp)
             void *dst_kvaddr = page2kva(npage);
c0106113:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106116:	89 04 24             	mov    %eax,(%esp)
c0106119:	e8 51 f0 ff ff       	call   c010516f <page2kva>
c010611e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
             memcpy(dst_kvaddr, src_kvaddr, PGSIZE);
c0106121:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106128:	00 
c0106129:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010612c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106130:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106133:	89 04 24             	mov    %eax,(%esp)
c0106136:	e8 0d 79 00 00       	call   c010da48 <memcpy>
             ret = page_insert(to, npage, start, perm);
c010613b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010613e:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106142:	8b 45 10             	mov    0x10(%ebp),%eax
c0106145:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106149:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010614c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106150:	8b 45 08             	mov    0x8(%ebp),%eax
c0106153:	89 04 24             	mov    %eax,(%esp)
c0106156:	e8 91 00 00 00       	call   c01061ec <page_insert>
c010615b:	89 45 dc             	mov    %eax,-0x24(%ebp)
             assert(ret == 0);
c010615e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0106162:	74 24                	je     c0106188 <copy_range+0x203>
c0106164:	c7 44 24 0c 64 ea 10 	movl   $0xc010ea64,0xc(%esp)
c010616b:	c0 
c010616c:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106173:	c0 
c0106174:	c7 44 24 04 13 02 00 	movl   $0x213,0x4(%esp)
c010617b:	00 
c010617c:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106183:	e8 4b ac ff ff       	call   c0100dd3 <__panic>
        }
        start += PGSIZE;
c0106188:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c010618f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0106193:	74 0c                	je     c01061a1 <copy_range+0x21c>
c0106195:	8b 45 10             	mov    0x10(%ebp),%eax
c0106198:	3b 45 14             	cmp    0x14(%ebp),%eax
c010619b:	0f 82 64 fe ff ff    	jb     c0106005 <copy_range+0x80>
    return 0;
c01061a1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01061a6:	c9                   	leave  
c01061a7:	c3                   	ret    

c01061a8 <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c01061a8:	55                   	push   %ebp
c01061a9:	89 e5                	mov    %esp,%ebp
c01061ab:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c01061ae:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01061b5:	00 
c01061b6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01061b9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01061bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01061c0:	89 04 24             	mov    %eax,(%esp)
c01061c3:	e8 bd f9 ff ff       	call   c0105b85 <get_pte>
c01061c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep != NULL) {
c01061cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01061cf:	74 19                	je     c01061ea <page_remove+0x42>
        page_remove_pte(pgdir, la, ptep);
c01061d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01061d4:	89 44 24 08          	mov    %eax,0x8(%esp)
c01061d8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01061db:	89 44 24 04          	mov    %eax,0x4(%esp)
c01061df:	8b 45 08             	mov    0x8(%ebp),%eax
c01061e2:	89 04 24             	mov    %eax,(%esp)
c01061e5:	e8 3f fb ff ff       	call   c0105d29 <page_remove_pte>
    }
}
c01061ea:	c9                   	leave  
c01061eb:	c3                   	ret    

c01061ec <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c01061ec:	55                   	push   %ebp
c01061ed:	89 e5                	mov    %esp,%ebp
c01061ef:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c01061f2:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c01061f9:	00 
c01061fa:	8b 45 10             	mov    0x10(%ebp),%eax
c01061fd:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106201:	8b 45 08             	mov    0x8(%ebp),%eax
c0106204:	89 04 24             	mov    %eax,(%esp)
c0106207:	e8 79 f9 ff ff       	call   c0105b85 <get_pte>
c010620c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c010620f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106213:	75 0a                	jne    c010621f <page_insert+0x33>
        return -E_NO_MEM;
c0106215:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010621a:	e9 84 00 00 00       	jmp    c01062a3 <page_insert+0xb7>
    }
    page_ref_inc(page);
c010621f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106222:	89 04 24             	mov    %eax,(%esp)
c0106225:	e8 06 f0 ff ff       	call   c0105230 <page_ref_inc>
    if (*ptep & PTE_P) {
c010622a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010622d:	8b 00                	mov    (%eax),%eax
c010622f:	83 e0 01             	and    $0x1,%eax
c0106232:	85 c0                	test   %eax,%eax
c0106234:	74 3e                	je     c0106274 <page_insert+0x88>
        struct Page *p = pte2page(*ptep);
c0106236:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106239:	8b 00                	mov    (%eax),%eax
c010623b:	89 04 24             	mov    %eax,(%esp)
c010623e:	e8 80 ef ff ff       	call   c01051c3 <pte2page>
c0106243:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0106246:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106249:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010624c:	75 0d                	jne    c010625b <page_insert+0x6f>
            page_ref_dec(page);
c010624e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106251:	89 04 24             	mov    %eax,(%esp)
c0106254:	e8 ee ef ff ff       	call   c0105247 <page_ref_dec>
c0106259:	eb 19                	jmp    c0106274 <page_insert+0x88>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c010625b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010625e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0106262:	8b 45 10             	mov    0x10(%ebp),%eax
c0106265:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106269:	8b 45 08             	mov    0x8(%ebp),%eax
c010626c:	89 04 24             	mov    %eax,(%esp)
c010626f:	e8 b5 fa ff ff       	call   c0105d29 <page_remove_pte>
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c0106274:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106277:	89 04 24             	mov    %eax,(%esp)
c010627a:	e8 95 ee ff ff       	call   c0105114 <page2pa>
c010627f:	0b 45 14             	or     0x14(%ebp),%eax
c0106282:	83 c8 01             	or     $0x1,%eax
c0106285:	89 c2                	mov    %eax,%edx
c0106287:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010628a:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c010628c:	8b 45 10             	mov    0x10(%ebp),%eax
c010628f:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106293:	8b 45 08             	mov    0x8(%ebp),%eax
c0106296:	89 04 24             	mov    %eax,(%esp)
c0106299:	e8 07 00 00 00       	call   c01062a5 <tlb_invalidate>
    return 0;
c010629e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01062a3:	c9                   	leave  
c01062a4:	c3                   	ret    

c01062a5 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c01062a5:	55                   	push   %ebp
c01062a6:	89 e5                	mov    %esp,%ebp
c01062a8:	83 ec 28             	sub    $0x28,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c01062ab:	0f 20 d8             	mov    %cr3,%eax
c01062ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr3;
c01062b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
    if (rcr3() == PADDR(pgdir)) {
c01062b4:	89 c2                	mov    %eax,%edx
c01062b6:	8b 45 08             	mov    0x8(%ebp),%eax
c01062b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01062bc:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c01062c3:	77 23                	ja     c01062e8 <tlb_invalidate+0x43>
c01062c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062c8:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01062cc:	c7 44 24 08 88 e9 10 	movl   $0xc010e988,0x8(%esp)
c01062d3:	c0 
c01062d4:	c7 44 24 04 44 02 00 	movl   $0x244,0x4(%esp)
c01062db:	00 
c01062dc:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c01062e3:	e8 eb aa ff ff       	call   c0100dd3 <__panic>
c01062e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01062eb:	05 00 00 00 40       	add    $0x40000000,%eax
c01062f0:	39 c2                	cmp    %eax,%edx
c01062f2:	75 0c                	jne    c0106300 <tlb_invalidate+0x5b>
        invlpg((void *)la);
c01062f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01062f7:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c01062fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01062fd:	0f 01 38             	invlpg (%eax)
    }
}
c0106300:	c9                   	leave  
c0106301:	c3                   	ret    

c0106302 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0106302:	55                   	push   %ebp
c0106303:	89 e5                	mov    %esp,%ebp
c0106305:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_page();
c0106308:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010630f:	e8 0a f1 ff ff       	call   c010541e <alloc_pages>
c0106314:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0106317:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010631b:	0f 84 b0 00 00 00    	je     c01063d1 <pgdir_alloc_page+0xcf>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0106321:	8b 45 10             	mov    0x10(%ebp),%eax
c0106324:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106328:	8b 45 0c             	mov    0xc(%ebp),%eax
c010632b:	89 44 24 08          	mov    %eax,0x8(%esp)
c010632f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106332:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106336:	8b 45 08             	mov    0x8(%ebp),%eax
c0106339:	89 04 24             	mov    %eax,(%esp)
c010633c:	e8 ab fe ff ff       	call   c01061ec <page_insert>
c0106341:	85 c0                	test   %eax,%eax
c0106343:	74 1a                	je     c010635f <pgdir_alloc_page+0x5d>
            free_page(page);
c0106345:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010634c:	00 
c010634d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106350:	89 04 24             	mov    %eax,(%esp)
c0106353:	e8 31 f1 ff ff       	call   c0105489 <free_pages>
            return NULL;
c0106358:	b8 00 00 00 00       	mov    $0x0,%eax
c010635d:	eb 75                	jmp    c01063d4 <pgdir_alloc_page+0xd2>
        }
        if (swap_init_ok){
c010635f:	a1 2c 34 1c c0       	mov    0xc01c342c,%eax
c0106364:	85 c0                	test   %eax,%eax
c0106366:	74 69                	je     c01063d1 <pgdir_alloc_page+0xcf>
            if(check_mm_struct!=NULL) {
c0106368:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c010636d:	85 c0                	test   %eax,%eax
c010636f:	74 60                	je     c01063d1 <pgdir_alloc_page+0xcf>
                swap_map_swappable(check_mm_struct, la, page, 0);
c0106371:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c0106376:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010637d:	00 
c010637e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106381:	89 54 24 08          	mov    %edx,0x8(%esp)
c0106385:	8b 55 0c             	mov    0xc(%ebp),%edx
c0106388:	89 54 24 04          	mov    %edx,0x4(%esp)
c010638c:	89 04 24             	mov    %eax,(%esp)
c010638f:	e8 51 0e 00 00       	call   c01071e5 <swap_map_swappable>
                page->pra_vaddr=la;
c0106394:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106397:	8b 55 0c             	mov    0xc(%ebp),%edx
c010639a:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c010639d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01063a0:	89 04 24             	mov    %eax,(%esp)
c01063a3:	e8 71 ee ff ff       	call   c0105219 <page_ref>
c01063a8:	83 f8 01             	cmp    $0x1,%eax
c01063ab:	74 24                	je     c01063d1 <pgdir_alloc_page+0xcf>
c01063ad:	c7 44 24 0c 6d ea 10 	movl   $0xc010ea6d,0xc(%esp)
c01063b4:	c0 
c01063b5:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c01063bc:	c0 
c01063bd:	c7 44 24 04 58 02 00 	movl   $0x258,0x4(%esp)
c01063c4:	00 
c01063c5:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c01063cc:	e8 02 aa ff ff       	call   c0100dd3 <__panic>
            }
        }

    }

    return page;
c01063d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01063d4:	c9                   	leave  
c01063d5:	c3                   	ret    

c01063d6 <check_alloc_page>:

static void
check_alloc_page(void) {
c01063d6:	55                   	push   %ebp
c01063d7:	89 e5                	mov    %esp,%ebp
c01063d9:	83 ec 18             	sub    $0x18,%esp
    pmm_manager->check();
c01063dc:	a1 e8 54 1c c0       	mov    0xc01c54e8,%eax
c01063e1:	8b 40 18             	mov    0x18(%eax),%eax
c01063e4:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c01063e6:	c7 04 24 84 ea 10 c0 	movl   $0xc010ea84,(%esp)
c01063ed:	e8 66 9f ff ff       	call   c0100358 <cprintf>
}
c01063f2:	c9                   	leave  
c01063f3:	c3                   	ret    

c01063f4 <check_pgdir>:

static void
check_pgdir(void) {
c01063f4:	55                   	push   %ebp
c01063f5:	89 e5                	mov    %esp,%ebp
c01063f7:	83 ec 38             	sub    $0x38,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c01063fa:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c01063ff:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0106404:	76 24                	jbe    c010642a <check_pgdir+0x36>
c0106406:	c7 44 24 0c a3 ea 10 	movl   $0xc010eaa3,0xc(%esp)
c010640d:	c0 
c010640e:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106415:	c0 
c0106416:	c7 44 24 04 70 02 00 	movl   $0x270,0x4(%esp)
c010641d:	00 
c010641e:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106425:	e8 a9 a9 ff ff       	call   c0100dd3 <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c010642a:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c010642f:	85 c0                	test   %eax,%eax
c0106431:	74 0e                	je     c0106441 <check_pgdir+0x4d>
c0106433:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106438:	25 ff 0f 00 00       	and    $0xfff,%eax
c010643d:	85 c0                	test   %eax,%eax
c010643f:	74 24                	je     c0106465 <check_pgdir+0x71>
c0106441:	c7 44 24 0c c0 ea 10 	movl   $0xc010eac0,0xc(%esp)
c0106448:	c0 
c0106449:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106450:	c0 
c0106451:	c7 44 24 04 71 02 00 	movl   $0x271,0x4(%esp)
c0106458:	00 
c0106459:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106460:	e8 6e a9 ff ff       	call   c0100dd3 <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0106465:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c010646a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106471:	00 
c0106472:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106479:	00 
c010647a:	89 04 24             	mov    %eax,(%esp)
c010647d:	e8 4e f8 ff ff       	call   c0105cd0 <get_page>
c0106482:	85 c0                	test   %eax,%eax
c0106484:	74 24                	je     c01064aa <check_pgdir+0xb6>
c0106486:	c7 44 24 0c f8 ea 10 	movl   $0xc010eaf8,0xc(%esp)
c010648d:	c0 
c010648e:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106495:	c0 
c0106496:	c7 44 24 04 72 02 00 	movl   $0x272,0x4(%esp)
c010649d:	00 
c010649e:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c01064a5:	e8 29 a9 ff ff       	call   c0100dd3 <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c01064aa:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01064b1:	e8 68 ef ff ff       	call   c010541e <alloc_pages>
c01064b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c01064b9:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01064be:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01064c5:	00 
c01064c6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01064cd:	00 
c01064ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01064d1:	89 54 24 04          	mov    %edx,0x4(%esp)
c01064d5:	89 04 24             	mov    %eax,(%esp)
c01064d8:	e8 0f fd ff ff       	call   c01061ec <page_insert>
c01064dd:	85 c0                	test   %eax,%eax
c01064df:	74 24                	je     c0106505 <check_pgdir+0x111>
c01064e1:	c7 44 24 0c 20 eb 10 	movl   $0xc010eb20,0xc(%esp)
c01064e8:	c0 
c01064e9:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c01064f0:	c0 
c01064f1:	c7 44 24 04 76 02 00 	movl   $0x276,0x4(%esp)
c01064f8:	00 
c01064f9:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106500:	e8 ce a8 ff ff       	call   c0100dd3 <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c0106505:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c010650a:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106511:	00 
c0106512:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0106519:	00 
c010651a:	89 04 24             	mov    %eax,(%esp)
c010651d:	e8 63 f6 ff ff       	call   c0105b85 <get_pte>
c0106522:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106525:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106529:	75 24                	jne    c010654f <check_pgdir+0x15b>
c010652b:	c7 44 24 0c 4c eb 10 	movl   $0xc010eb4c,0xc(%esp)
c0106532:	c0 
c0106533:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c010653a:	c0 
c010653b:	c7 44 24 04 79 02 00 	movl   $0x279,0x4(%esp)
c0106542:	00 
c0106543:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c010654a:	e8 84 a8 ff ff       	call   c0100dd3 <__panic>
    assert(pte2page(*ptep) == p1);
c010654f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106552:	8b 00                	mov    (%eax),%eax
c0106554:	89 04 24             	mov    %eax,(%esp)
c0106557:	e8 67 ec ff ff       	call   c01051c3 <pte2page>
c010655c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010655f:	74 24                	je     c0106585 <check_pgdir+0x191>
c0106561:	c7 44 24 0c 79 eb 10 	movl   $0xc010eb79,0xc(%esp)
c0106568:	c0 
c0106569:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106570:	c0 
c0106571:	c7 44 24 04 7a 02 00 	movl   $0x27a,0x4(%esp)
c0106578:	00 
c0106579:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106580:	e8 4e a8 ff ff       	call   c0100dd3 <__panic>
    assert(page_ref(p1) == 1);
c0106585:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106588:	89 04 24             	mov    %eax,(%esp)
c010658b:	e8 89 ec ff ff       	call   c0105219 <page_ref>
c0106590:	83 f8 01             	cmp    $0x1,%eax
c0106593:	74 24                	je     c01065b9 <check_pgdir+0x1c5>
c0106595:	c7 44 24 0c 8f eb 10 	movl   $0xc010eb8f,0xc(%esp)
c010659c:	c0 
c010659d:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c01065a4:	c0 
c01065a5:	c7 44 24 04 7b 02 00 	movl   $0x27b,0x4(%esp)
c01065ac:	00 
c01065ad:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c01065b4:	e8 1a a8 ff ff       	call   c0100dd3 <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c01065b9:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01065be:	8b 00                	mov    (%eax),%eax
c01065c0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01065c5:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01065c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01065cb:	c1 e8 0c             	shr    $0xc,%eax
c01065ce:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01065d1:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c01065d6:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c01065d9:	72 23                	jb     c01065fe <check_pgdir+0x20a>
c01065db:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01065de:	89 44 24 0c          	mov    %eax,0xc(%esp)
c01065e2:	c7 44 24 08 e4 e8 10 	movl   $0xc010e8e4,0x8(%esp)
c01065e9:	c0 
c01065ea:	c7 44 24 04 7d 02 00 	movl   $0x27d,0x4(%esp)
c01065f1:	00 
c01065f2:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c01065f9:	e8 d5 a7 ff ff       	call   c0100dd3 <__panic>
c01065fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106601:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106606:	83 c0 04             	add    $0x4,%eax
c0106609:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c010660c:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106611:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106618:	00 
c0106619:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106620:	00 
c0106621:	89 04 24             	mov    %eax,(%esp)
c0106624:	e8 5c f5 ff ff       	call   c0105b85 <get_pte>
c0106629:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010662c:	74 24                	je     c0106652 <check_pgdir+0x25e>
c010662e:	c7 44 24 0c a4 eb 10 	movl   $0xc010eba4,0xc(%esp)
c0106635:	c0 
c0106636:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c010663d:	c0 
c010663e:	c7 44 24 04 7e 02 00 	movl   $0x27e,0x4(%esp)
c0106645:	00 
c0106646:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c010664d:	e8 81 a7 ff ff       	call   c0100dd3 <__panic>

    p2 = alloc_page();
c0106652:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106659:	e8 c0 ed ff ff       	call   c010541e <alloc_pages>
c010665e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c0106661:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106666:	c7 44 24 0c 06 00 00 	movl   $0x6,0xc(%esp)
c010666d:	00 
c010666e:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c0106675:	00 
c0106676:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0106679:	89 54 24 04          	mov    %edx,0x4(%esp)
c010667d:	89 04 24             	mov    %eax,(%esp)
c0106680:	e8 67 fb ff ff       	call   c01061ec <page_insert>
c0106685:	85 c0                	test   %eax,%eax
c0106687:	74 24                	je     c01066ad <check_pgdir+0x2b9>
c0106689:	c7 44 24 0c cc eb 10 	movl   $0xc010ebcc,0xc(%esp)
c0106690:	c0 
c0106691:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106698:	c0 
c0106699:	c7 44 24 04 81 02 00 	movl   $0x281,0x4(%esp)
c01066a0:	00 
c01066a1:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c01066a8:	e8 26 a7 ff ff       	call   c0100dd3 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c01066ad:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01066b2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01066b9:	00 
c01066ba:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01066c1:	00 
c01066c2:	89 04 24             	mov    %eax,(%esp)
c01066c5:	e8 bb f4 ff ff       	call   c0105b85 <get_pte>
c01066ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01066cd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01066d1:	75 24                	jne    c01066f7 <check_pgdir+0x303>
c01066d3:	c7 44 24 0c 04 ec 10 	movl   $0xc010ec04,0xc(%esp)
c01066da:	c0 
c01066db:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c01066e2:	c0 
c01066e3:	c7 44 24 04 82 02 00 	movl   $0x282,0x4(%esp)
c01066ea:	00 
c01066eb:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c01066f2:	e8 dc a6 ff ff       	call   c0100dd3 <__panic>
    assert(*ptep & PTE_U);
c01066f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01066fa:	8b 00                	mov    (%eax),%eax
c01066fc:	83 e0 04             	and    $0x4,%eax
c01066ff:	85 c0                	test   %eax,%eax
c0106701:	75 24                	jne    c0106727 <check_pgdir+0x333>
c0106703:	c7 44 24 0c 34 ec 10 	movl   $0xc010ec34,0xc(%esp)
c010670a:	c0 
c010670b:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106712:	c0 
c0106713:	c7 44 24 04 83 02 00 	movl   $0x283,0x4(%esp)
c010671a:	00 
c010671b:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106722:	e8 ac a6 ff ff       	call   c0100dd3 <__panic>
    assert(*ptep & PTE_W);
c0106727:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010672a:	8b 00                	mov    (%eax),%eax
c010672c:	83 e0 02             	and    $0x2,%eax
c010672f:	85 c0                	test   %eax,%eax
c0106731:	75 24                	jne    c0106757 <check_pgdir+0x363>
c0106733:	c7 44 24 0c 42 ec 10 	movl   $0xc010ec42,0xc(%esp)
c010673a:	c0 
c010673b:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106742:	c0 
c0106743:	c7 44 24 04 84 02 00 	movl   $0x284,0x4(%esp)
c010674a:	00 
c010674b:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106752:	e8 7c a6 ff ff       	call   c0100dd3 <__panic>
    assert(boot_pgdir[0] & PTE_U);
c0106757:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c010675c:	8b 00                	mov    (%eax),%eax
c010675e:	83 e0 04             	and    $0x4,%eax
c0106761:	85 c0                	test   %eax,%eax
c0106763:	75 24                	jne    c0106789 <check_pgdir+0x395>
c0106765:	c7 44 24 0c 50 ec 10 	movl   $0xc010ec50,0xc(%esp)
c010676c:	c0 
c010676d:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106774:	c0 
c0106775:	c7 44 24 04 85 02 00 	movl   $0x285,0x4(%esp)
c010677c:	00 
c010677d:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106784:	e8 4a a6 ff ff       	call   c0100dd3 <__panic>
    assert(page_ref(p2) == 1);
c0106789:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010678c:	89 04 24             	mov    %eax,(%esp)
c010678f:	e8 85 ea ff ff       	call   c0105219 <page_ref>
c0106794:	83 f8 01             	cmp    $0x1,%eax
c0106797:	74 24                	je     c01067bd <check_pgdir+0x3c9>
c0106799:	c7 44 24 0c 66 ec 10 	movl   $0xc010ec66,0xc(%esp)
c01067a0:	c0 
c01067a1:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c01067a8:	c0 
c01067a9:	c7 44 24 04 86 02 00 	movl   $0x286,0x4(%esp)
c01067b0:	00 
c01067b1:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c01067b8:	e8 16 a6 ff ff       	call   c0100dd3 <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c01067bd:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01067c2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c01067c9:	00 
c01067ca:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c01067d1:	00 
c01067d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01067d5:	89 54 24 04          	mov    %edx,0x4(%esp)
c01067d9:	89 04 24             	mov    %eax,(%esp)
c01067dc:	e8 0b fa ff ff       	call   c01061ec <page_insert>
c01067e1:	85 c0                	test   %eax,%eax
c01067e3:	74 24                	je     c0106809 <check_pgdir+0x415>
c01067e5:	c7 44 24 0c 78 ec 10 	movl   $0xc010ec78,0xc(%esp)
c01067ec:	c0 
c01067ed:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c01067f4:	c0 
c01067f5:	c7 44 24 04 88 02 00 	movl   $0x288,0x4(%esp)
c01067fc:	00 
c01067fd:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106804:	e8 ca a5 ff ff       	call   c0100dd3 <__panic>
    assert(page_ref(p1) == 2);
c0106809:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010680c:	89 04 24             	mov    %eax,(%esp)
c010680f:	e8 05 ea ff ff       	call   c0105219 <page_ref>
c0106814:	83 f8 02             	cmp    $0x2,%eax
c0106817:	74 24                	je     c010683d <check_pgdir+0x449>
c0106819:	c7 44 24 0c a4 ec 10 	movl   $0xc010eca4,0xc(%esp)
c0106820:	c0 
c0106821:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106828:	c0 
c0106829:	c7 44 24 04 89 02 00 	movl   $0x289,0x4(%esp)
c0106830:	00 
c0106831:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106838:	e8 96 a5 ff ff       	call   c0100dd3 <__panic>
    assert(page_ref(p2) == 0);
c010683d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106840:	89 04 24             	mov    %eax,(%esp)
c0106843:	e8 d1 e9 ff ff       	call   c0105219 <page_ref>
c0106848:	85 c0                	test   %eax,%eax
c010684a:	74 24                	je     c0106870 <check_pgdir+0x47c>
c010684c:	c7 44 24 0c b6 ec 10 	movl   $0xc010ecb6,0xc(%esp)
c0106853:	c0 
c0106854:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c010685b:	c0 
c010685c:	c7 44 24 04 8a 02 00 	movl   $0x28a,0x4(%esp)
c0106863:	00 
c0106864:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c010686b:	e8 63 a5 ff ff       	call   c0100dd3 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c0106870:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106875:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010687c:	00 
c010687d:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c0106884:	00 
c0106885:	89 04 24             	mov    %eax,(%esp)
c0106888:	e8 f8 f2 ff ff       	call   c0105b85 <get_pte>
c010688d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106890:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106894:	75 24                	jne    c01068ba <check_pgdir+0x4c6>
c0106896:	c7 44 24 0c 04 ec 10 	movl   $0xc010ec04,0xc(%esp)
c010689d:	c0 
c010689e:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c01068a5:	c0 
c01068a6:	c7 44 24 04 8b 02 00 	movl   $0x28b,0x4(%esp)
c01068ad:	00 
c01068ae:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c01068b5:	e8 19 a5 ff ff       	call   c0100dd3 <__panic>
    assert(pte2page(*ptep) == p1);
c01068ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068bd:	8b 00                	mov    (%eax),%eax
c01068bf:	89 04 24             	mov    %eax,(%esp)
c01068c2:	e8 fc e8 ff ff       	call   c01051c3 <pte2page>
c01068c7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01068ca:	74 24                	je     c01068f0 <check_pgdir+0x4fc>
c01068cc:	c7 44 24 0c 79 eb 10 	movl   $0xc010eb79,0xc(%esp)
c01068d3:	c0 
c01068d4:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c01068db:	c0 
c01068dc:	c7 44 24 04 8c 02 00 	movl   $0x28c,0x4(%esp)
c01068e3:	00 
c01068e4:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c01068eb:	e8 e3 a4 ff ff       	call   c0100dd3 <__panic>
    assert((*ptep & PTE_U) == 0);
c01068f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01068f3:	8b 00                	mov    (%eax),%eax
c01068f5:	83 e0 04             	and    $0x4,%eax
c01068f8:	85 c0                	test   %eax,%eax
c01068fa:	74 24                	je     c0106920 <check_pgdir+0x52c>
c01068fc:	c7 44 24 0c c8 ec 10 	movl   $0xc010ecc8,0xc(%esp)
c0106903:	c0 
c0106904:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c010690b:	c0 
c010690c:	c7 44 24 04 8d 02 00 	movl   $0x28d,0x4(%esp)
c0106913:	00 
c0106914:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c010691b:	e8 b3 a4 ff ff       	call   c0100dd3 <__panic>

    page_remove(boot_pgdir, 0x0);
c0106920:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106925:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010692c:	00 
c010692d:	89 04 24             	mov    %eax,(%esp)
c0106930:	e8 73 f8 ff ff       	call   c01061a8 <page_remove>
    assert(page_ref(p1) == 1);
c0106935:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106938:	89 04 24             	mov    %eax,(%esp)
c010693b:	e8 d9 e8 ff ff       	call   c0105219 <page_ref>
c0106940:	83 f8 01             	cmp    $0x1,%eax
c0106943:	74 24                	je     c0106969 <check_pgdir+0x575>
c0106945:	c7 44 24 0c 8f eb 10 	movl   $0xc010eb8f,0xc(%esp)
c010694c:	c0 
c010694d:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106954:	c0 
c0106955:	c7 44 24 04 90 02 00 	movl   $0x290,0x4(%esp)
c010695c:	00 
c010695d:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106964:	e8 6a a4 ff ff       	call   c0100dd3 <__panic>
    assert(page_ref(p2) == 0);
c0106969:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010696c:	89 04 24             	mov    %eax,(%esp)
c010696f:	e8 a5 e8 ff ff       	call   c0105219 <page_ref>
c0106974:	85 c0                	test   %eax,%eax
c0106976:	74 24                	je     c010699c <check_pgdir+0x5a8>
c0106978:	c7 44 24 0c b6 ec 10 	movl   $0xc010ecb6,0xc(%esp)
c010697f:	c0 
c0106980:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106987:	c0 
c0106988:	c7 44 24 04 91 02 00 	movl   $0x291,0x4(%esp)
c010698f:	00 
c0106990:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106997:	e8 37 a4 ff ff       	call   c0100dd3 <__panic>

    page_remove(boot_pgdir, PGSIZE);
c010699c:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c01069a1:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c01069a8:	00 
c01069a9:	89 04 24             	mov    %eax,(%esp)
c01069ac:	e8 f7 f7 ff ff       	call   c01061a8 <page_remove>
    assert(page_ref(p1) == 0);
c01069b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01069b4:	89 04 24             	mov    %eax,(%esp)
c01069b7:	e8 5d e8 ff ff       	call   c0105219 <page_ref>
c01069bc:	85 c0                	test   %eax,%eax
c01069be:	74 24                	je     c01069e4 <check_pgdir+0x5f0>
c01069c0:	c7 44 24 0c dd ec 10 	movl   $0xc010ecdd,0xc(%esp)
c01069c7:	c0 
c01069c8:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c01069cf:	c0 
c01069d0:	c7 44 24 04 94 02 00 	movl   $0x294,0x4(%esp)
c01069d7:	00 
c01069d8:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c01069df:	e8 ef a3 ff ff       	call   c0100dd3 <__panic>
    assert(page_ref(p2) == 0);
c01069e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01069e7:	89 04 24             	mov    %eax,(%esp)
c01069ea:	e8 2a e8 ff ff       	call   c0105219 <page_ref>
c01069ef:	85 c0                	test   %eax,%eax
c01069f1:	74 24                	je     c0106a17 <check_pgdir+0x623>
c01069f3:	c7 44 24 0c b6 ec 10 	movl   $0xc010ecb6,0xc(%esp)
c01069fa:	c0 
c01069fb:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106a02:	c0 
c0106a03:	c7 44 24 04 95 02 00 	movl   $0x295,0x4(%esp)
c0106a0a:	00 
c0106a0b:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106a12:	e8 bc a3 ff ff       	call   c0100dd3 <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c0106a17:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106a1c:	8b 00                	mov    (%eax),%eax
c0106a1e:	89 04 24             	mov    %eax,(%esp)
c0106a21:	e8 db e7 ff ff       	call   c0105201 <pde2page>
c0106a26:	89 04 24             	mov    %eax,(%esp)
c0106a29:	e8 eb e7 ff ff       	call   c0105219 <page_ref>
c0106a2e:	83 f8 01             	cmp    $0x1,%eax
c0106a31:	74 24                	je     c0106a57 <check_pgdir+0x663>
c0106a33:	c7 44 24 0c f0 ec 10 	movl   $0xc010ecf0,0xc(%esp)
c0106a3a:	c0 
c0106a3b:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106a42:	c0 
c0106a43:	c7 44 24 04 97 02 00 	movl   $0x297,0x4(%esp)
c0106a4a:	00 
c0106a4b:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106a52:	e8 7c a3 ff ff       	call   c0100dd3 <__panic>
    free_page(pde2page(boot_pgdir[0]));
c0106a57:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106a5c:	8b 00                	mov    (%eax),%eax
c0106a5e:	89 04 24             	mov    %eax,(%esp)
c0106a61:	e8 9b e7 ff ff       	call   c0105201 <pde2page>
c0106a66:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106a6d:	00 
c0106a6e:	89 04 24             	mov    %eax,(%esp)
c0106a71:	e8 13 ea ff ff       	call   c0105489 <free_pages>
    boot_pgdir[0] = 0;
c0106a76:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106a7b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c0106a81:	c7 04 24 17 ed 10 c0 	movl   $0xc010ed17,(%esp)
c0106a88:	e8 cb 98 ff ff       	call   c0100358 <cprintf>
}
c0106a8d:	c9                   	leave  
c0106a8e:	c3                   	ret    

c0106a8f <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c0106a8f:	55                   	push   %ebp
c0106a90:	89 e5                	mov    %esp,%ebp
c0106a92:	83 ec 38             	sub    $0x38,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0106a95:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106a9c:	e9 ca 00 00 00       	jmp    c0106b6b <check_boot_pgdir+0xdc>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c0106aa1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106aa4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106aa7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106aaa:	c1 e8 0c             	shr    $0xc,%eax
c0106aad:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0106ab0:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0106ab5:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0106ab8:	72 23                	jb     c0106add <check_boot_pgdir+0x4e>
c0106aba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106abd:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106ac1:	c7 44 24 08 e4 e8 10 	movl   $0xc010e8e4,0x8(%esp)
c0106ac8:	c0 
c0106ac9:	c7 44 24 04 a3 02 00 	movl   $0x2a3,0x4(%esp)
c0106ad0:	00 
c0106ad1:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106ad8:	e8 f6 a2 ff ff       	call   c0100dd3 <__panic>
c0106add:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106ae0:	2d 00 00 00 40       	sub    $0x40000000,%eax
c0106ae5:	89 c2                	mov    %eax,%edx
c0106ae7:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106aec:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0106af3:	00 
c0106af4:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106af8:	89 04 24             	mov    %eax,(%esp)
c0106afb:	e8 85 f0 ff ff       	call   c0105b85 <get_pte>
c0106b00:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106b03:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106b07:	75 24                	jne    c0106b2d <check_boot_pgdir+0x9e>
c0106b09:	c7 44 24 0c 34 ed 10 	movl   $0xc010ed34,0xc(%esp)
c0106b10:	c0 
c0106b11:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106b18:	c0 
c0106b19:	c7 44 24 04 a3 02 00 	movl   $0x2a3,0x4(%esp)
c0106b20:	00 
c0106b21:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106b28:	e8 a6 a2 ff ff       	call   c0100dd3 <__panic>
        assert(PTE_ADDR(*ptep) == i);
c0106b2d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106b30:	8b 00                	mov    (%eax),%eax
c0106b32:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106b37:	89 c2                	mov    %eax,%edx
c0106b39:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b3c:	39 c2                	cmp    %eax,%edx
c0106b3e:	74 24                	je     c0106b64 <check_boot_pgdir+0xd5>
c0106b40:	c7 44 24 0c 71 ed 10 	movl   $0xc010ed71,0xc(%esp)
c0106b47:	c0 
c0106b48:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106b4f:	c0 
c0106b50:	c7 44 24 04 a4 02 00 	movl   $0x2a4,0x4(%esp)
c0106b57:	00 
c0106b58:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106b5f:	e8 6f a2 ff ff       	call   c0100dd3 <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0106b64:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c0106b6b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0106b6e:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0106b73:	39 c2                	cmp    %eax,%edx
c0106b75:	0f 82 26 ff ff ff    	jb     c0106aa1 <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c0106b7b:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106b80:	05 ac 0f 00 00       	add    $0xfac,%eax
c0106b85:	8b 00                	mov    (%eax),%eax
c0106b87:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0106b8c:	89 c2                	mov    %eax,%edx
c0106b8e:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106b93:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0106b96:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c0106b9d:	77 23                	ja     c0106bc2 <check_boot_pgdir+0x133>
c0106b9f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106ba2:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0106ba6:	c7 44 24 08 88 e9 10 	movl   $0xc010e988,0x8(%esp)
c0106bad:	c0 
c0106bae:	c7 44 24 04 a7 02 00 	movl   $0x2a7,0x4(%esp)
c0106bb5:	00 
c0106bb6:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106bbd:	e8 11 a2 ff ff       	call   c0100dd3 <__panic>
c0106bc2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106bc5:	05 00 00 00 40       	add    $0x40000000,%eax
c0106bca:	39 c2                	cmp    %eax,%edx
c0106bcc:	74 24                	je     c0106bf2 <check_boot_pgdir+0x163>
c0106bce:	c7 44 24 0c 88 ed 10 	movl   $0xc010ed88,0xc(%esp)
c0106bd5:	c0 
c0106bd6:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106bdd:	c0 
c0106bde:	c7 44 24 04 a7 02 00 	movl   $0x2a7,0x4(%esp)
c0106be5:	00 
c0106be6:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106bed:	e8 e1 a1 ff ff       	call   c0100dd3 <__panic>

    assert(boot_pgdir[0] == 0);
c0106bf2:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106bf7:	8b 00                	mov    (%eax),%eax
c0106bf9:	85 c0                	test   %eax,%eax
c0106bfb:	74 24                	je     c0106c21 <check_boot_pgdir+0x192>
c0106bfd:	c7 44 24 0c bc ed 10 	movl   $0xc010edbc,0xc(%esp)
c0106c04:	c0 
c0106c05:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106c0c:	c0 
c0106c0d:	c7 44 24 04 a9 02 00 	movl   $0x2a9,0x4(%esp)
c0106c14:	00 
c0106c15:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106c1c:	e8 b2 a1 ff ff       	call   c0100dd3 <__panic>

    struct Page *p;
    p = alloc_page();
c0106c21:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c0106c28:	e8 f1 e7 ff ff       	call   c010541e <alloc_pages>
c0106c2d:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c0106c30:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106c35:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106c3c:	00 
c0106c3d:	c7 44 24 08 00 01 00 	movl   $0x100,0x8(%esp)
c0106c44:	00 
c0106c45:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106c48:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106c4c:	89 04 24             	mov    %eax,(%esp)
c0106c4f:	e8 98 f5 ff ff       	call   c01061ec <page_insert>
c0106c54:	85 c0                	test   %eax,%eax
c0106c56:	74 24                	je     c0106c7c <check_boot_pgdir+0x1ed>
c0106c58:	c7 44 24 0c d0 ed 10 	movl   $0xc010edd0,0xc(%esp)
c0106c5f:	c0 
c0106c60:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106c67:	c0 
c0106c68:	c7 44 24 04 ad 02 00 	movl   $0x2ad,0x4(%esp)
c0106c6f:	00 
c0106c70:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106c77:	e8 57 a1 ff ff       	call   c0100dd3 <__panic>
    assert(page_ref(p) == 1);
c0106c7c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106c7f:	89 04 24             	mov    %eax,(%esp)
c0106c82:	e8 92 e5 ff ff       	call   c0105219 <page_ref>
c0106c87:	83 f8 01             	cmp    $0x1,%eax
c0106c8a:	74 24                	je     c0106cb0 <check_boot_pgdir+0x221>
c0106c8c:	c7 44 24 0c fe ed 10 	movl   $0xc010edfe,0xc(%esp)
c0106c93:	c0 
c0106c94:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106c9b:	c0 
c0106c9c:	c7 44 24 04 ae 02 00 	movl   $0x2ae,0x4(%esp)
c0106ca3:	00 
c0106ca4:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106cab:	e8 23 a1 ff ff       	call   c0100dd3 <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c0106cb0:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106cb5:	c7 44 24 0c 02 00 00 	movl   $0x2,0xc(%esp)
c0106cbc:	00 
c0106cbd:	c7 44 24 08 00 11 00 	movl   $0x1100,0x8(%esp)
c0106cc4:	00 
c0106cc5:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106cc8:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106ccc:	89 04 24             	mov    %eax,(%esp)
c0106ccf:	e8 18 f5 ff ff       	call   c01061ec <page_insert>
c0106cd4:	85 c0                	test   %eax,%eax
c0106cd6:	74 24                	je     c0106cfc <check_boot_pgdir+0x26d>
c0106cd8:	c7 44 24 0c 10 ee 10 	movl   $0xc010ee10,0xc(%esp)
c0106cdf:	c0 
c0106ce0:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106ce7:	c0 
c0106ce8:	c7 44 24 04 af 02 00 	movl   $0x2af,0x4(%esp)
c0106cef:	00 
c0106cf0:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106cf7:	e8 d7 a0 ff ff       	call   c0100dd3 <__panic>
    assert(page_ref(p) == 2);
c0106cfc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106cff:	89 04 24             	mov    %eax,(%esp)
c0106d02:	e8 12 e5 ff ff       	call   c0105219 <page_ref>
c0106d07:	83 f8 02             	cmp    $0x2,%eax
c0106d0a:	74 24                	je     c0106d30 <check_boot_pgdir+0x2a1>
c0106d0c:	c7 44 24 0c 47 ee 10 	movl   $0xc010ee47,0xc(%esp)
c0106d13:	c0 
c0106d14:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106d1b:	c0 
c0106d1c:	c7 44 24 04 b0 02 00 	movl   $0x2b0,0x4(%esp)
c0106d23:	00 
c0106d24:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106d2b:	e8 a3 a0 ff ff       	call   c0100dd3 <__panic>

    const char *str = "ucore: Hello world!!";
c0106d30:	c7 45 dc 58 ee 10 c0 	movl   $0xc010ee58,-0x24(%ebp)
    strcpy((void *)0x100, str);
c0106d37:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0106d3a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0106d3e:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106d45:	e8 45 69 00 00       	call   c010d68f <strcpy>
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c0106d4a:	c7 44 24 04 00 11 00 	movl   $0x1100,0x4(%esp)
c0106d51:	00 
c0106d52:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106d59:	e8 aa 69 00 00       	call   c010d708 <strcmp>
c0106d5e:	85 c0                	test   %eax,%eax
c0106d60:	74 24                	je     c0106d86 <check_boot_pgdir+0x2f7>
c0106d62:	c7 44 24 0c 70 ee 10 	movl   $0xc010ee70,0xc(%esp)
c0106d69:	c0 
c0106d6a:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106d71:	c0 
c0106d72:	c7 44 24 04 b4 02 00 	movl   $0x2b4,0x4(%esp)
c0106d79:	00 
c0106d7a:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106d81:	e8 4d a0 ff ff       	call   c0100dd3 <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c0106d86:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106d89:	89 04 24             	mov    %eax,(%esp)
c0106d8c:	e8 de e3 ff ff       	call   c010516f <page2kva>
c0106d91:	05 00 01 00 00       	add    $0x100,%eax
c0106d96:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c0106d99:	c7 04 24 00 01 00 00 	movl   $0x100,(%esp)
c0106da0:	e8 92 68 00 00       	call   c010d637 <strlen>
c0106da5:	85 c0                	test   %eax,%eax
c0106da7:	74 24                	je     c0106dcd <check_boot_pgdir+0x33e>
c0106da9:	c7 44 24 0c a8 ee 10 	movl   $0xc010eea8,0xc(%esp)
c0106db0:	c0 
c0106db1:	c7 44 24 08 d1 e9 10 	movl   $0xc010e9d1,0x8(%esp)
c0106db8:	c0 
c0106db9:	c7 44 24 04 b7 02 00 	movl   $0x2b7,0x4(%esp)
c0106dc0:	00 
c0106dc1:	c7 04 24 ac e9 10 c0 	movl   $0xc010e9ac,(%esp)
c0106dc8:	e8 06 a0 ff ff       	call   c0100dd3 <__panic>

    free_page(p);
c0106dcd:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106dd4:	00 
c0106dd5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106dd8:	89 04 24             	mov    %eax,(%esp)
c0106ddb:	e8 a9 e6 ff ff       	call   c0105489 <free_pages>
    free_page(pde2page(boot_pgdir[0]));
c0106de0:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106de5:	8b 00                	mov    (%eax),%eax
c0106de7:	89 04 24             	mov    %eax,(%esp)
c0106dea:	e8 12 e4 ff ff       	call   c0105201 <pde2page>
c0106def:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0106df6:	00 
c0106df7:	89 04 24             	mov    %eax,(%esp)
c0106dfa:	e8 8a e6 ff ff       	call   c0105489 <free_pages>
    boot_pgdir[0] = 0;
c0106dff:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c0106e04:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0106e0a:	c7 04 24 cc ee 10 c0 	movl   $0xc010eecc,(%esp)
c0106e11:	e8 42 95 ff ff       	call   c0100358 <cprintf>
}
c0106e16:	c9                   	leave  
c0106e17:	c3                   	ret    

c0106e18 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0106e18:	55                   	push   %ebp
c0106e19:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0106e1b:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e1e:	83 e0 04             	and    $0x4,%eax
c0106e21:	85 c0                	test   %eax,%eax
c0106e23:	74 07                	je     c0106e2c <perm2str+0x14>
c0106e25:	b8 75 00 00 00       	mov    $0x75,%eax
c0106e2a:	eb 05                	jmp    c0106e31 <perm2str+0x19>
c0106e2c:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106e31:	a2 28 34 1c c0       	mov    %al,0xc01c3428
    str[1] = 'r';
c0106e36:	c6 05 29 34 1c c0 72 	movb   $0x72,0xc01c3429
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0106e3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e40:	83 e0 02             	and    $0x2,%eax
c0106e43:	85 c0                	test   %eax,%eax
c0106e45:	74 07                	je     c0106e4e <perm2str+0x36>
c0106e47:	b8 77 00 00 00       	mov    $0x77,%eax
c0106e4c:	eb 05                	jmp    c0106e53 <perm2str+0x3b>
c0106e4e:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0106e53:	a2 2a 34 1c c0       	mov    %al,0xc01c342a
    str[3] = '\0';
c0106e58:	c6 05 2b 34 1c c0 00 	movb   $0x0,0xc01c342b
    return str;
c0106e5f:	b8 28 34 1c c0       	mov    $0xc01c3428,%eax
}
c0106e64:	5d                   	pop    %ebp
c0106e65:	c3                   	ret    

c0106e66 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0106e66:	55                   	push   %ebp
c0106e67:	89 e5                	mov    %esp,%ebp
c0106e69:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0106e6c:	8b 45 10             	mov    0x10(%ebp),%eax
c0106e6f:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106e72:	72 0a                	jb     c0106e7e <get_pgtable_items+0x18>
        return 0;
c0106e74:	b8 00 00 00 00       	mov    $0x0,%eax
c0106e79:	e9 9c 00 00 00       	jmp    c0106f1a <get_pgtable_items+0xb4>
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106e7e:	eb 04                	jmp    c0106e84 <get_pgtable_items+0x1e>
        start ++;
c0106e80:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0106e84:	8b 45 10             	mov    0x10(%ebp),%eax
c0106e87:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106e8a:	73 18                	jae    c0106ea4 <get_pgtable_items+0x3e>
c0106e8c:	8b 45 10             	mov    0x10(%ebp),%eax
c0106e8f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106e96:	8b 45 14             	mov    0x14(%ebp),%eax
c0106e99:	01 d0                	add    %edx,%eax
c0106e9b:	8b 00                	mov    (%eax),%eax
c0106e9d:	83 e0 01             	and    $0x1,%eax
c0106ea0:	85 c0                	test   %eax,%eax
c0106ea2:	74 dc                	je     c0106e80 <get_pgtable_items+0x1a>
        start ++;
    }
    if (start < right) {
c0106ea4:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ea7:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106eaa:	73 69                	jae    c0106f15 <get_pgtable_items+0xaf>
        if (left_store != NULL) {
c0106eac:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0106eb0:	74 08                	je     c0106eba <get_pgtable_items+0x54>
            *left_store = start;
c0106eb2:	8b 45 18             	mov    0x18(%ebp),%eax
c0106eb5:	8b 55 10             	mov    0x10(%ebp),%edx
c0106eb8:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0106eba:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ebd:	8d 50 01             	lea    0x1(%eax),%edx
c0106ec0:	89 55 10             	mov    %edx,0x10(%ebp)
c0106ec3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106eca:	8b 45 14             	mov    0x14(%ebp),%eax
c0106ecd:	01 d0                	add    %edx,%eax
c0106ecf:	8b 00                	mov    (%eax),%eax
c0106ed1:	83 e0 07             	and    $0x7,%eax
c0106ed4:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106ed7:	eb 04                	jmp    c0106edd <get_pgtable_items+0x77>
            start ++;
c0106ed9:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0106edd:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ee0:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106ee3:	73 1d                	jae    c0106f02 <get_pgtable_items+0x9c>
c0106ee5:	8b 45 10             	mov    0x10(%ebp),%eax
c0106ee8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0106eef:	8b 45 14             	mov    0x14(%ebp),%eax
c0106ef2:	01 d0                	add    %edx,%eax
c0106ef4:	8b 00                	mov    (%eax),%eax
c0106ef6:	83 e0 07             	and    $0x7,%eax
c0106ef9:	89 c2                	mov    %eax,%edx
c0106efb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106efe:	39 c2                	cmp    %eax,%edx
c0106f00:	74 d7                	je     c0106ed9 <get_pgtable_items+0x73>
            start ++;
        }
        if (right_store != NULL) {
c0106f02:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0106f06:	74 08                	je     c0106f10 <get_pgtable_items+0xaa>
            *right_store = start;
c0106f08:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0106f0b:	8b 55 10             	mov    0x10(%ebp),%edx
c0106f0e:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0106f10:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106f13:	eb 05                	jmp    c0106f1a <get_pgtable_items+0xb4>
    }
    return 0;
c0106f15:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106f1a:	c9                   	leave  
c0106f1b:	c3                   	ret    

c0106f1c <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0106f1c:	55                   	push   %ebp
c0106f1d:	89 e5                	mov    %esp,%ebp
c0106f1f:	57                   	push   %edi
c0106f20:	56                   	push   %esi
c0106f21:	53                   	push   %ebx
c0106f22:	83 ec 4c             	sub    $0x4c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0106f25:	c7 04 24 ec ee 10 c0 	movl   $0xc010eeec,(%esp)
c0106f2c:	e8 27 94 ff ff       	call   c0100358 <cprintf>
    size_t left, right = 0, perm;
c0106f31:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0106f38:	e9 fa 00 00 00       	jmp    c0107037 <print_pgdir+0x11b>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106f3d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f40:	89 04 24             	mov    %eax,(%esp)
c0106f43:	e8 d0 fe ff ff       	call   c0106e18 <perm2str>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0106f48:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106f4b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106f4e:	29 d1                	sub    %edx,%ecx
c0106f50:	89 ca                	mov    %ecx,%edx
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0106f52:	89 d6                	mov    %edx,%esi
c0106f54:	c1 e6 16             	shl    $0x16,%esi
c0106f57:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0106f5a:	89 d3                	mov    %edx,%ebx
c0106f5c:	c1 e3 16             	shl    $0x16,%ebx
c0106f5f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106f62:	89 d1                	mov    %edx,%ecx
c0106f64:	c1 e1 16             	shl    $0x16,%ecx
c0106f67:	8b 7d dc             	mov    -0x24(%ebp),%edi
c0106f6a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106f6d:	29 d7                	sub    %edx,%edi
c0106f6f:	89 fa                	mov    %edi,%edx
c0106f71:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106f75:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106f79:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106f7d:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106f81:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106f85:	c7 04 24 1d ef 10 c0 	movl   $0xc010ef1d,(%esp)
c0106f8c:	e8 c7 93 ff ff       	call   c0100358 <cprintf>
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0106f91:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106f94:	c1 e0 0a             	shl    $0xa,%eax
c0106f97:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106f9a:	eb 54                	jmp    c0106ff0 <print_pgdir+0xd4>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106f9c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106f9f:	89 04 24             	mov    %eax,(%esp)
c0106fa2:	e8 71 fe ff ff       	call   c0106e18 <perm2str>
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0106fa7:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c0106faa:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106fad:	29 d1                	sub    %edx,%ecx
c0106faf:	89 ca                	mov    %ecx,%edx
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0106fb1:	89 d6                	mov    %edx,%esi
c0106fb3:	c1 e6 0c             	shl    $0xc,%esi
c0106fb6:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0106fb9:	89 d3                	mov    %edx,%ebx
c0106fbb:	c1 e3 0c             	shl    $0xc,%ebx
c0106fbe:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106fc1:	c1 e2 0c             	shl    $0xc,%edx
c0106fc4:	89 d1                	mov    %edx,%ecx
c0106fc6:	8b 7d d4             	mov    -0x2c(%ebp),%edi
c0106fc9:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0106fcc:	29 d7                	sub    %edx,%edi
c0106fce:	89 fa                	mov    %edi,%edx
c0106fd0:	89 44 24 14          	mov    %eax,0x14(%esp)
c0106fd4:	89 74 24 10          	mov    %esi,0x10(%esp)
c0106fd8:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0106fdc:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0106fe0:	89 54 24 04          	mov    %edx,0x4(%esp)
c0106fe4:	c7 04 24 3c ef 10 c0 	movl   $0xc010ef3c,(%esp)
c0106feb:	e8 68 93 ff ff       	call   c0100358 <cprintf>
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0106ff0:	ba 00 00 c0 fa       	mov    $0xfac00000,%edx
c0106ff5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106ff8:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0106ffb:	89 ce                	mov    %ecx,%esi
c0106ffd:	c1 e6 0a             	shl    $0xa,%esi
c0107000:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0107003:	89 cb                	mov    %ecx,%ebx
c0107005:	c1 e3 0a             	shl    $0xa,%ebx
c0107008:	8d 4d d4             	lea    -0x2c(%ebp),%ecx
c010700b:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c010700f:	8d 4d d8             	lea    -0x28(%ebp),%ecx
c0107012:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c0107016:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010701a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010701e:	89 74 24 04          	mov    %esi,0x4(%esp)
c0107022:	89 1c 24             	mov    %ebx,(%esp)
c0107025:	e8 3c fe ff ff       	call   c0106e66 <get_pgtable_items>
c010702a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010702d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107031:	0f 85 65 ff ff ff    	jne    c0106f9c <print_pgdir+0x80>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0107037:	ba 00 b0 fe fa       	mov    $0xfafeb000,%edx
c010703c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010703f:	8d 4d dc             	lea    -0x24(%ebp),%ecx
c0107042:	89 4c 24 14          	mov    %ecx,0x14(%esp)
c0107046:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c0107049:	89 4c 24 10          	mov    %ecx,0x10(%esp)
c010704d:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0107051:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107055:	c7 44 24 04 00 04 00 	movl   $0x400,0x4(%esp)
c010705c:	00 
c010705d:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0107064:	e8 fd fd ff ff       	call   c0106e66 <get_pgtable_items>
c0107069:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010706c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0107070:	0f 85 c7 fe ff ff    	jne    c0106f3d <print_pgdir+0x21>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0107076:	c7 04 24 60 ef 10 c0 	movl   $0xc010ef60,(%esp)
c010707d:	e8 d6 92 ff ff       	call   c0100358 <cprintf>
}
c0107082:	83 c4 4c             	add    $0x4c,%esp
c0107085:	5b                   	pop    %ebx
c0107086:	5e                   	pop    %esi
c0107087:	5f                   	pop    %edi
c0107088:	5d                   	pop    %ebp
c0107089:	c3                   	ret    

c010708a <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c010708a:	55                   	push   %ebp
c010708b:	89 e5                	mov    %esp,%ebp
c010708d:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0107090:	8b 45 08             	mov    0x8(%ebp),%eax
c0107093:	c1 e8 0c             	shr    $0xc,%eax
c0107096:	89 c2                	mov    %eax,%edx
c0107098:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c010709d:	39 c2                	cmp    %eax,%edx
c010709f:	72 1c                	jb     c01070bd <pa2page+0x33>
        panic("pa2page called with invalid pa");
c01070a1:	c7 44 24 08 94 ef 10 	movl   $0xc010ef94,0x8(%esp)
c01070a8:	c0 
c01070a9:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c01070b0:	00 
c01070b1:	c7 04 24 b3 ef 10 c0 	movl   $0xc010efb3,(%esp)
c01070b8:	e8 16 9d ff ff       	call   c0100dd3 <__panic>
    }
    return &pages[PPN(pa)];
c01070bd:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c01070c2:	8b 55 08             	mov    0x8(%ebp),%edx
c01070c5:	c1 ea 0c             	shr    $0xc,%edx
c01070c8:	c1 e2 05             	shl    $0x5,%edx
c01070cb:	01 d0                	add    %edx,%eax
}
c01070cd:	c9                   	leave  
c01070ce:	c3                   	ret    

c01070cf <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c01070cf:	55                   	push   %ebp
c01070d0:	89 e5                	mov    %esp,%ebp
c01070d2:	83 ec 18             	sub    $0x18,%esp
    if (!(pte & PTE_P)) {
c01070d5:	8b 45 08             	mov    0x8(%ebp),%eax
c01070d8:	83 e0 01             	and    $0x1,%eax
c01070db:	85 c0                	test   %eax,%eax
c01070dd:	75 1c                	jne    c01070fb <pte2page+0x2c>
        panic("pte2page called with invalid pte");
c01070df:	c7 44 24 08 c4 ef 10 	movl   $0xc010efc4,0x8(%esp)
c01070e6:	c0 
c01070e7:	c7 44 24 04 70 00 00 	movl   $0x70,0x4(%esp)
c01070ee:	00 
c01070ef:	c7 04 24 b3 ef 10 c0 	movl   $0xc010efb3,(%esp)
c01070f6:	e8 d8 9c ff ff       	call   c0100dd3 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c01070fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01070fe:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0107103:	89 04 24             	mov    %eax,(%esp)
c0107106:	e8 7f ff ff ff       	call   c010708a <pa2page>
}
c010710b:	c9                   	leave  
c010710c:	c3                   	ret    

c010710d <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c010710d:	55                   	push   %ebp
c010710e:	89 e5                	mov    %esp,%ebp
c0107110:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c0107113:	8b 45 08             	mov    0x8(%ebp),%eax
c0107116:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010711b:	89 04 24             	mov    %eax,(%esp)
c010711e:	e8 67 ff ff ff       	call   c010708a <pa2page>
}
c0107123:	c9                   	leave  
c0107124:	c3                   	ret    

c0107125 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0107125:	55                   	push   %ebp
c0107126:	89 e5                	mov    %esp,%ebp
c0107128:	83 ec 28             	sub    $0x28,%esp
     swapfs_init();
c010712b:	e8 6c 33 00 00       	call   c010a49c <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0107130:	a1 9c 55 1c c0       	mov    0xc01c559c,%eax
c0107135:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c010713a:	76 0c                	jbe    c0107148 <swap_init+0x23>
c010713c:	a1 9c 55 1c c0       	mov    0xc01c559c,%eax
c0107141:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0107146:	76 25                	jbe    c010716d <swap_init+0x48>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0107148:	a1 9c 55 1c c0       	mov    0xc01c559c,%eax
c010714d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107151:	c7 44 24 08 e5 ef 10 	movl   $0xc010efe5,0x8(%esp)
c0107158:	c0 
c0107159:	c7 44 24 04 27 00 00 	movl   $0x27,0x4(%esp)
c0107160:	00 
c0107161:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c0107168:	e8 66 9c ff ff       	call   c0100dd3 <__panic>
     }
     

     sm = &swap_manager_fifo;
c010716d:	c7 05 34 34 1c c0 60 	movl   $0xc0131a60,0xc01c3434
c0107174:	1a 13 c0 
     int r = sm->init();
c0107177:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c010717c:	8b 40 04             	mov    0x4(%eax),%eax
c010717f:	ff d0                	call   *%eax
c0107181:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0107184:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107188:	75 26                	jne    c01071b0 <swap_init+0x8b>
     {
          swap_init_ok = 1;
c010718a:	c7 05 2c 34 1c c0 01 	movl   $0x1,0xc01c342c
c0107191:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0107194:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c0107199:	8b 00                	mov    (%eax),%eax
c010719b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010719f:	c7 04 24 0f f0 10 c0 	movl   $0xc010f00f,(%esp)
c01071a6:	e8 ad 91 ff ff       	call   c0100358 <cprintf>
          check_swap();
c01071ab:	e8 a4 04 00 00       	call   c0107654 <check_swap>
     }

     return r;
c01071b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01071b3:	c9                   	leave  
c01071b4:	c3                   	ret    

c01071b5 <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c01071b5:	55                   	push   %ebp
c01071b6:	89 e5                	mov    %esp,%ebp
c01071b8:	83 ec 18             	sub    $0x18,%esp
     return sm->init_mm(mm);
c01071bb:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c01071c0:	8b 40 08             	mov    0x8(%eax),%eax
c01071c3:	8b 55 08             	mov    0x8(%ebp),%edx
c01071c6:	89 14 24             	mov    %edx,(%esp)
c01071c9:	ff d0                	call   *%eax
}
c01071cb:	c9                   	leave  
c01071cc:	c3                   	ret    

c01071cd <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c01071cd:	55                   	push   %ebp
c01071ce:	89 e5                	mov    %esp,%ebp
c01071d0:	83 ec 18             	sub    $0x18,%esp
     return sm->tick_event(mm);
c01071d3:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c01071d8:	8b 40 0c             	mov    0xc(%eax),%eax
c01071db:	8b 55 08             	mov    0x8(%ebp),%edx
c01071de:	89 14 24             	mov    %edx,(%esp)
c01071e1:	ff d0                	call   *%eax
}
c01071e3:	c9                   	leave  
c01071e4:	c3                   	ret    

c01071e5 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c01071e5:	55                   	push   %ebp
c01071e6:	89 e5                	mov    %esp,%ebp
c01071e8:	83 ec 18             	sub    $0x18,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c01071eb:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c01071f0:	8b 40 10             	mov    0x10(%eax),%eax
c01071f3:	8b 55 14             	mov    0x14(%ebp),%edx
c01071f6:	89 54 24 0c          	mov    %edx,0xc(%esp)
c01071fa:	8b 55 10             	mov    0x10(%ebp),%edx
c01071fd:	89 54 24 08          	mov    %edx,0x8(%esp)
c0107201:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107204:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107208:	8b 55 08             	mov    0x8(%ebp),%edx
c010720b:	89 14 24             	mov    %edx,(%esp)
c010720e:	ff d0                	call   *%eax
}
c0107210:	c9                   	leave  
c0107211:	c3                   	ret    

c0107212 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0107212:	55                   	push   %ebp
c0107213:	89 e5                	mov    %esp,%ebp
c0107215:	83 ec 18             	sub    $0x18,%esp
     return sm->set_unswappable(mm, addr);
c0107218:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c010721d:	8b 40 14             	mov    0x14(%eax),%eax
c0107220:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107223:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107227:	8b 55 08             	mov    0x8(%ebp),%edx
c010722a:	89 14 24             	mov    %edx,(%esp)
c010722d:	ff d0                	call   *%eax
}
c010722f:	c9                   	leave  
c0107230:	c3                   	ret    

c0107231 <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0107231:	55                   	push   %ebp
c0107232:	89 e5                	mov    %esp,%ebp
c0107234:	83 ec 38             	sub    $0x38,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0107237:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010723e:	e9 5a 01 00 00       	jmp    c010739d <swap_out+0x16c>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0107243:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c0107248:	8b 40 18             	mov    0x18(%eax),%eax
c010724b:	8b 55 10             	mov    0x10(%ebp),%edx
c010724e:	89 54 24 08          	mov    %edx,0x8(%esp)
c0107252:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0107255:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107259:	8b 55 08             	mov    0x8(%ebp),%edx
c010725c:	89 14 24             	mov    %edx,(%esp)
c010725f:	ff d0                	call   *%eax
c0107261:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0107264:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107268:	74 18                	je     c0107282 <swap_out+0x51>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c010726a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010726d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107271:	c7 04 24 24 f0 10 c0 	movl   $0xc010f024,(%esp)
c0107278:	e8 db 90 ff ff       	call   c0100358 <cprintf>
c010727d:	e9 27 01 00 00       	jmp    c01073a9 <swap_out+0x178>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0107282:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107285:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107288:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c010728b:	8b 45 08             	mov    0x8(%ebp),%eax
c010728e:	8b 40 0c             	mov    0xc(%eax),%eax
c0107291:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107298:	00 
c0107299:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010729c:	89 54 24 04          	mov    %edx,0x4(%esp)
c01072a0:	89 04 24             	mov    %eax,(%esp)
c01072a3:	e8 dd e8 ff ff       	call   c0105b85 <get_pte>
c01072a8:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c01072ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01072ae:	8b 00                	mov    (%eax),%eax
c01072b0:	83 e0 01             	and    $0x1,%eax
c01072b3:	85 c0                	test   %eax,%eax
c01072b5:	75 24                	jne    c01072db <swap_out+0xaa>
c01072b7:	c7 44 24 0c 51 f0 10 	movl   $0xc010f051,0xc(%esp)
c01072be:	c0 
c01072bf:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c01072c6:	c0 
c01072c7:	c7 44 24 04 67 00 00 	movl   $0x67,0x4(%esp)
c01072ce:	00 
c01072cf:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c01072d6:	e8 f8 9a ff ff       	call   c0100dd3 <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c01072db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01072de:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01072e1:	8b 52 1c             	mov    0x1c(%edx),%edx
c01072e4:	c1 ea 0c             	shr    $0xc,%edx
c01072e7:	83 c2 01             	add    $0x1,%edx
c01072ea:	c1 e2 08             	shl    $0x8,%edx
c01072ed:	89 44 24 04          	mov    %eax,0x4(%esp)
c01072f1:	89 14 24             	mov    %edx,(%esp)
c01072f4:	e8 5d 32 00 00       	call   c010a556 <swapfs_write>
c01072f9:	85 c0                	test   %eax,%eax
c01072fb:	74 34                	je     c0107331 <swap_out+0x100>
                    cprintf("SWAP: failed to save\n");
c01072fd:	c7 04 24 7b f0 10 c0 	movl   $0xc010f07b,(%esp)
c0107304:	e8 4f 90 ff ff       	call   c0100358 <cprintf>
                    sm->map_swappable(mm, v, page, 0);
c0107309:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c010730e:	8b 40 10             	mov    0x10(%eax),%eax
c0107311:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107314:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010731b:	00 
c010731c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0107320:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107323:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107327:	8b 55 08             	mov    0x8(%ebp),%edx
c010732a:	89 14 24             	mov    %edx,(%esp)
c010732d:	ff d0                	call   *%eax
c010732f:	eb 68                	jmp    c0107399 <swap_out+0x168>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c0107331:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107334:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107337:	c1 e8 0c             	shr    $0xc,%eax
c010733a:	83 c0 01             	add    $0x1,%eax
c010733d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c0107341:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107344:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107348:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010734b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010734f:	c7 04 24 94 f0 10 c0 	movl   $0xc010f094,(%esp)
c0107356:	e8 fd 8f ff ff       	call   c0100358 <cprintf>
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c010735b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010735e:	8b 40 1c             	mov    0x1c(%eax),%eax
c0107361:	c1 e8 0c             	shr    $0xc,%eax
c0107364:	83 c0 01             	add    $0x1,%eax
c0107367:	c1 e0 08             	shl    $0x8,%eax
c010736a:	89 c2                	mov    %eax,%edx
c010736c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010736f:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c0107371:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107374:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010737b:	00 
c010737c:	89 04 24             	mov    %eax,(%esp)
c010737f:	e8 05 e1 ff ff       	call   c0105489 <free_pages>
          }
          
          tlb_invalidate(mm->pgdir, v);
c0107384:	8b 45 08             	mov    0x8(%ebp),%eax
c0107387:	8b 40 0c             	mov    0xc(%eax),%eax
c010738a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010738d:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107391:	89 04 24             	mov    %eax,(%esp)
c0107394:	e8 0c ef ff ff       	call   c01062a5 <tlb_invalidate>

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c0107399:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010739d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01073a0:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01073a3:	0f 85 9a fe ff ff    	jne    c0107243 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c01073a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01073ac:	c9                   	leave  
c01073ad:	c3                   	ret    

c01073ae <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c01073ae:	55                   	push   %ebp
c01073af:	89 e5                	mov    %esp,%ebp
c01073b1:	83 ec 28             	sub    $0x28,%esp
     struct Page *result = alloc_page();
c01073b4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01073bb:	e8 5e e0 ff ff       	call   c010541e <alloc_pages>
c01073c0:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c01073c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01073c7:	75 24                	jne    c01073ed <swap_in+0x3f>
c01073c9:	c7 44 24 0c d4 f0 10 	movl   $0xc010f0d4,0xc(%esp)
c01073d0:	c0 
c01073d1:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c01073d8:	c0 
c01073d9:	c7 44 24 04 7d 00 00 	movl   $0x7d,0x4(%esp)
c01073e0:	00 
c01073e1:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c01073e8:	e8 e6 99 ff ff       	call   c0100dd3 <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c01073ed:	8b 45 08             	mov    0x8(%ebp),%eax
c01073f0:	8b 40 0c             	mov    0xc(%eax),%eax
c01073f3:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c01073fa:	00 
c01073fb:	8b 55 0c             	mov    0xc(%ebp),%edx
c01073fe:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107402:	89 04 24             	mov    %eax,(%esp)
c0107405:	e8 7b e7 ff ff       	call   c0105b85 <get_pte>
c010740a:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c010740d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107410:	8b 00                	mov    (%eax),%eax
c0107412:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0107415:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107419:	89 04 24             	mov    %eax,(%esp)
c010741c:	e8 c3 30 00 00       	call   c010a4e4 <swapfs_read>
c0107421:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107424:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107428:	74 2a                	je     c0107454 <swap_in+0xa6>
     {
        assert(r!=0);
c010742a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010742e:	75 24                	jne    c0107454 <swap_in+0xa6>
c0107430:	c7 44 24 0c e1 f0 10 	movl   $0xc010f0e1,0xc(%esp)
c0107437:	c0 
c0107438:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c010743f:	c0 
c0107440:	c7 44 24 04 85 00 00 	movl   $0x85,0x4(%esp)
c0107447:	00 
c0107448:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c010744f:	e8 7f 99 ff ff       	call   c0100dd3 <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c0107454:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107457:	8b 00                	mov    (%eax),%eax
c0107459:	c1 e8 08             	shr    $0x8,%eax
c010745c:	89 c2                	mov    %eax,%edx
c010745e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107461:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107465:	89 54 24 04          	mov    %edx,0x4(%esp)
c0107469:	c7 04 24 e8 f0 10 c0 	movl   $0xc010f0e8,(%esp)
c0107470:	e8 e3 8e ff ff       	call   c0100358 <cprintf>
     *ptr_result=result;
c0107475:	8b 45 10             	mov    0x10(%ebp),%eax
c0107478:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010747b:	89 10                	mov    %edx,(%eax)
     return 0;
c010747d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107482:	c9                   	leave  
c0107483:	c3                   	ret    

c0107484 <check_content_set>:



static inline void
check_content_set(void)
{
c0107484:	55                   	push   %ebp
c0107485:	89 e5                	mov    %esp,%ebp
c0107487:	83 ec 18             	sub    $0x18,%esp
     *(unsigned char *)0x1000 = 0x0a;
c010748a:	b8 00 10 00 00       	mov    $0x1000,%eax
c010748f:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0107492:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107497:	83 f8 01             	cmp    $0x1,%eax
c010749a:	74 24                	je     c01074c0 <check_content_set+0x3c>
c010749c:	c7 44 24 0c 26 f1 10 	movl   $0xc010f126,0xc(%esp)
c01074a3:	c0 
c01074a4:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c01074ab:	c0 
c01074ac:	c7 44 24 04 92 00 00 	movl   $0x92,0x4(%esp)
c01074b3:	00 
c01074b4:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c01074bb:	e8 13 99 ff ff       	call   c0100dd3 <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c01074c0:	b8 10 10 00 00       	mov    $0x1010,%eax
c01074c5:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c01074c8:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c01074cd:	83 f8 01             	cmp    $0x1,%eax
c01074d0:	74 24                	je     c01074f6 <check_content_set+0x72>
c01074d2:	c7 44 24 0c 26 f1 10 	movl   $0xc010f126,0xc(%esp)
c01074d9:	c0 
c01074da:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c01074e1:	c0 
c01074e2:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c01074e9:	00 
c01074ea:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c01074f1:	e8 dd 98 ff ff       	call   c0100dd3 <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c01074f6:	b8 00 20 00 00       	mov    $0x2000,%eax
c01074fb:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c01074fe:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107503:	83 f8 02             	cmp    $0x2,%eax
c0107506:	74 24                	je     c010752c <check_content_set+0xa8>
c0107508:	c7 44 24 0c 35 f1 10 	movl   $0xc010f135,0xc(%esp)
c010750f:	c0 
c0107510:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c0107517:	c0 
c0107518:	c7 44 24 04 96 00 00 	movl   $0x96,0x4(%esp)
c010751f:	00 
c0107520:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c0107527:	e8 a7 98 ff ff       	call   c0100dd3 <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c010752c:	b8 10 20 00 00       	mov    $0x2010,%eax
c0107531:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0107534:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107539:	83 f8 02             	cmp    $0x2,%eax
c010753c:	74 24                	je     c0107562 <check_content_set+0xde>
c010753e:	c7 44 24 0c 35 f1 10 	movl   $0xc010f135,0xc(%esp)
c0107545:	c0 
c0107546:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c010754d:	c0 
c010754e:	c7 44 24 04 98 00 00 	movl   $0x98,0x4(%esp)
c0107555:	00 
c0107556:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c010755d:	e8 71 98 ff ff       	call   c0100dd3 <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c0107562:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107567:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c010756a:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c010756f:	83 f8 03             	cmp    $0x3,%eax
c0107572:	74 24                	je     c0107598 <check_content_set+0x114>
c0107574:	c7 44 24 0c 44 f1 10 	movl   $0xc010f144,0xc(%esp)
c010757b:	c0 
c010757c:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c0107583:	c0 
c0107584:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c010758b:	00 
c010758c:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c0107593:	e8 3b 98 ff ff       	call   c0100dd3 <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c0107598:	b8 10 30 00 00       	mov    $0x3010,%eax
c010759d:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c01075a0:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c01075a5:	83 f8 03             	cmp    $0x3,%eax
c01075a8:	74 24                	je     c01075ce <check_content_set+0x14a>
c01075aa:	c7 44 24 0c 44 f1 10 	movl   $0xc010f144,0xc(%esp)
c01075b1:	c0 
c01075b2:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c01075b9:	c0 
c01075ba:	c7 44 24 04 9c 00 00 	movl   $0x9c,0x4(%esp)
c01075c1:	00 
c01075c2:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c01075c9:	e8 05 98 ff ff       	call   c0100dd3 <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c01075ce:	b8 00 40 00 00       	mov    $0x4000,%eax
c01075d3:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c01075d6:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c01075db:	83 f8 04             	cmp    $0x4,%eax
c01075de:	74 24                	je     c0107604 <check_content_set+0x180>
c01075e0:	c7 44 24 0c 53 f1 10 	movl   $0xc010f153,0xc(%esp)
c01075e7:	c0 
c01075e8:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c01075ef:	c0 
c01075f0:	c7 44 24 04 9e 00 00 	movl   $0x9e,0x4(%esp)
c01075f7:	00 
c01075f8:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c01075ff:	e8 cf 97 ff ff       	call   c0100dd3 <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c0107604:	b8 10 40 00 00       	mov    $0x4010,%eax
c0107609:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c010760c:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107611:	83 f8 04             	cmp    $0x4,%eax
c0107614:	74 24                	je     c010763a <check_content_set+0x1b6>
c0107616:	c7 44 24 0c 53 f1 10 	movl   $0xc010f153,0xc(%esp)
c010761d:	c0 
c010761e:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c0107625:	c0 
c0107626:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c010762d:	00 
c010762e:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c0107635:	e8 99 97 ff ff       	call   c0100dd3 <__panic>
}
c010763a:	c9                   	leave  
c010763b:	c3                   	ret    

c010763c <check_content_access>:

static inline int
check_content_access(void)
{
c010763c:	55                   	push   %ebp
c010763d:	89 e5                	mov    %esp,%ebp
c010763f:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c0107642:	a1 34 34 1c c0       	mov    0xc01c3434,%eax
c0107647:	8b 40 1c             	mov    0x1c(%eax),%eax
c010764a:	ff d0                	call   *%eax
c010764c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c010764f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0107652:	c9                   	leave  
c0107653:	c3                   	ret    

c0107654 <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c0107654:	55                   	push   %ebp
c0107655:	89 e5                	mov    %esp,%ebp
c0107657:	53                   	push   %ebx
c0107658:	83 ec 74             	sub    $0x74,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c010765b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0107662:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c0107669:	c7 45 e8 dc 54 1c c0 	movl   $0xc01c54dc,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0107670:	eb 6b                	jmp    c01076dd <check_swap+0x89>
        struct Page *p = le2page(le, page_link);
c0107672:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107675:	83 e8 0c             	sub    $0xc,%eax
c0107678:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c010767b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010767e:	83 c0 04             	add    $0x4,%eax
c0107681:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
c0107688:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010768b:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010768e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c0107691:	0f a3 10             	bt     %edx,(%eax)
c0107694:	19 c0                	sbb    %eax,%eax
c0107696:	89 45 bc             	mov    %eax,-0x44(%ebp)
    return oldbit != 0;
c0107699:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010769d:	0f 95 c0             	setne  %al
c01076a0:	0f b6 c0             	movzbl %al,%eax
c01076a3:	85 c0                	test   %eax,%eax
c01076a5:	75 24                	jne    c01076cb <check_swap+0x77>
c01076a7:	c7 44 24 0c 62 f1 10 	movl   $0xc010f162,0xc(%esp)
c01076ae:	c0 
c01076af:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c01076b6:	c0 
c01076b7:	c7 44 24 04 bb 00 00 	movl   $0xbb,0x4(%esp)
c01076be:	00 
c01076bf:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c01076c6:	e8 08 97 ff ff       	call   c0100dd3 <__panic>
        count ++, total += p->property;
c01076cb:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01076cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01076d2:	8b 50 08             	mov    0x8(%eax),%edx
c01076d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01076d8:	01 d0                	add    %edx,%eax
c01076da:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01076dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01076e0:	89 45 b8             	mov    %eax,-0x48(%ebp)
c01076e3:	8b 45 b8             	mov    -0x48(%ebp),%eax
c01076e6:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c01076e9:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01076ec:	81 7d e8 dc 54 1c c0 	cmpl   $0xc01c54dc,-0x18(%ebp)
c01076f3:	0f 85 79 ff ff ff    	jne    c0107672 <check_swap+0x1e>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c01076f9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
c01076fc:	e8 ba dd ff ff       	call   c01054bb <nr_free_pages>
c0107701:	39 c3                	cmp    %eax,%ebx
c0107703:	74 24                	je     c0107729 <check_swap+0xd5>
c0107705:	c7 44 24 0c 72 f1 10 	movl   $0xc010f172,0xc(%esp)
c010770c:	c0 
c010770d:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c0107714:	c0 
c0107715:	c7 44 24 04 be 00 00 	movl   $0xbe,0x4(%esp)
c010771c:	00 
c010771d:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c0107724:	e8 aa 96 ff ff       	call   c0100dd3 <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c0107729:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010772c:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107730:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107733:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107737:	c7 04 24 8c f1 10 c0 	movl   $0xc010f18c,(%esp)
c010773e:	e8 15 8c ff ff       	call   c0100358 <cprintf>
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c0107743:	e8 45 0b 00 00       	call   c010828d <mm_create>
c0107748:	89 45 e0             	mov    %eax,-0x20(%ebp)
     assert(mm != NULL);
c010774b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010774f:	75 24                	jne    c0107775 <check_swap+0x121>
c0107751:	c7 44 24 0c b2 f1 10 	movl   $0xc010f1b2,0xc(%esp)
c0107758:	c0 
c0107759:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c0107760:	c0 
c0107761:	c7 44 24 04 c3 00 00 	movl   $0xc3,0x4(%esp)
c0107768:	00 
c0107769:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c0107770:	e8 5e 96 ff ff       	call   c0100dd3 <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0107775:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c010777a:	85 c0                	test   %eax,%eax
c010777c:	74 24                	je     c01077a2 <check_swap+0x14e>
c010777e:	c7 44 24 0c bd f1 10 	movl   $0xc010f1bd,0xc(%esp)
c0107785:	c0 
c0107786:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c010778d:	c0 
c010778e:	c7 44 24 04 c6 00 00 	movl   $0xc6,0x4(%esp)
c0107795:	00 
c0107796:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c010779d:	e8 31 96 ff ff       	call   c0100dd3 <__panic>

     check_mm_struct = mm;
c01077a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01077a5:	a3 cc 55 1c c0       	mov    %eax,0xc01c55cc

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c01077aa:	8b 15 a4 33 1c c0    	mov    0xc01c33a4,%edx
c01077b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01077b3:	89 50 0c             	mov    %edx,0xc(%eax)
c01077b6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01077b9:	8b 40 0c             	mov    0xc(%eax),%eax
c01077bc:	89 45 dc             	mov    %eax,-0x24(%ebp)
     assert(pgdir[0] == 0);
c01077bf:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01077c2:	8b 00                	mov    (%eax),%eax
c01077c4:	85 c0                	test   %eax,%eax
c01077c6:	74 24                	je     c01077ec <check_swap+0x198>
c01077c8:	c7 44 24 0c d5 f1 10 	movl   $0xc010f1d5,0xc(%esp)
c01077cf:	c0 
c01077d0:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c01077d7:	c0 
c01077d8:	c7 44 24 04 cb 00 00 	movl   $0xcb,0x4(%esp)
c01077df:	00 
c01077e0:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c01077e7:	e8 e7 95 ff ff       	call   c0100dd3 <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c01077ec:	c7 44 24 08 03 00 00 	movl   $0x3,0x8(%esp)
c01077f3:	00 
c01077f4:	c7 44 24 04 00 60 00 	movl   $0x6000,0x4(%esp)
c01077fb:	00 
c01077fc:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
c0107803:	e8 2a 0b 00 00       	call   c0108332 <vma_create>
c0107808:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(vma != NULL);
c010780b:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c010780f:	75 24                	jne    c0107835 <check_swap+0x1e1>
c0107811:	c7 44 24 0c e3 f1 10 	movl   $0xc010f1e3,0xc(%esp)
c0107818:	c0 
c0107819:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c0107820:	c0 
c0107821:	c7 44 24 04 ce 00 00 	movl   $0xce,0x4(%esp)
c0107828:	00 
c0107829:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c0107830:	e8 9e 95 ff ff       	call   c0100dd3 <__panic>

     insert_vma_struct(mm, vma);
c0107835:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107838:	89 44 24 04          	mov    %eax,0x4(%esp)
c010783c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010783f:	89 04 24             	mov    %eax,(%esp)
c0107842:	e8 7b 0c 00 00       	call   c01084c2 <insert_vma_struct>

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c0107847:	c7 04 24 f0 f1 10 c0 	movl   $0xc010f1f0,(%esp)
c010784e:	e8 05 8b ff ff       	call   c0100358 <cprintf>
     pte_t *temp_ptep=NULL;
c0107853:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c010785a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010785d:	8b 40 0c             	mov    0xc(%eax),%eax
c0107860:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0107867:	00 
c0107868:	c7 44 24 04 00 10 00 	movl   $0x1000,0x4(%esp)
c010786f:	00 
c0107870:	89 04 24             	mov    %eax,(%esp)
c0107873:	e8 0d e3 ff ff       	call   c0105b85 <get_pte>
c0107878:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(temp_ptep!= NULL);
c010787b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
c010787f:	75 24                	jne    c01078a5 <check_swap+0x251>
c0107881:	c7 44 24 0c 24 f2 10 	movl   $0xc010f224,0xc(%esp)
c0107888:	c0 
c0107889:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c0107890:	c0 
c0107891:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c0107898:	00 
c0107899:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c01078a0:	e8 2e 95 ff ff       	call   c0100dd3 <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c01078a5:	c7 04 24 38 f2 10 c0 	movl   $0xc010f238,(%esp)
c01078ac:	e8 a7 8a ff ff       	call   c0100358 <cprintf>
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01078b1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01078b8:	e9 a3 00 00 00       	jmp    c0107960 <check_swap+0x30c>
          check_rp[i] = alloc_page();
c01078bd:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c01078c4:	e8 55 db ff ff       	call   c010541e <alloc_pages>
c01078c9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01078cc:	89 04 95 00 55 1c c0 	mov    %eax,-0x3fe3ab00(,%edx,4)
          assert(check_rp[i] != NULL );
c01078d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01078d6:	8b 04 85 00 55 1c c0 	mov    -0x3fe3ab00(,%eax,4),%eax
c01078dd:	85 c0                	test   %eax,%eax
c01078df:	75 24                	jne    c0107905 <check_swap+0x2b1>
c01078e1:	c7 44 24 0c 5c f2 10 	movl   $0xc010f25c,0xc(%esp)
c01078e8:	c0 
c01078e9:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c01078f0:	c0 
c01078f1:	c7 44 24 04 db 00 00 	movl   $0xdb,0x4(%esp)
c01078f8:	00 
c01078f9:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c0107900:	e8 ce 94 ff ff       	call   c0100dd3 <__panic>
          assert(!PageProperty(check_rp[i]));
c0107905:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107908:	8b 04 85 00 55 1c c0 	mov    -0x3fe3ab00(,%eax,4),%eax
c010790f:	83 c0 04             	add    $0x4,%eax
c0107912:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%ebp)
c0107919:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010791c:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010791f:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0107922:	0f a3 10             	bt     %edx,(%eax)
c0107925:	19 c0                	sbb    %eax,%eax
c0107927:	89 45 ac             	mov    %eax,-0x54(%ebp)
    return oldbit != 0;
c010792a:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
c010792e:	0f 95 c0             	setne  %al
c0107931:	0f b6 c0             	movzbl %al,%eax
c0107934:	85 c0                	test   %eax,%eax
c0107936:	74 24                	je     c010795c <check_swap+0x308>
c0107938:	c7 44 24 0c 70 f2 10 	movl   $0xc010f270,0xc(%esp)
c010793f:	c0 
c0107940:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c0107947:	c0 
c0107948:	c7 44 24 04 dc 00 00 	movl   $0xdc,0x4(%esp)
c010794f:	00 
c0107950:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c0107957:	e8 77 94 ff ff       	call   c0100dd3 <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010795c:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107960:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107964:	0f 8e 53 ff ff ff    	jle    c01078bd <check_swap+0x269>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c010796a:	a1 dc 54 1c c0       	mov    0xc01c54dc,%eax
c010796f:	8b 15 e0 54 1c c0    	mov    0xc01c54e0,%edx
c0107975:	89 45 98             	mov    %eax,-0x68(%ebp)
c0107978:	89 55 9c             	mov    %edx,-0x64(%ebp)
c010797b:	c7 45 a8 dc 54 1c c0 	movl   $0xc01c54dc,-0x58(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107982:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107985:	8b 55 a8             	mov    -0x58(%ebp),%edx
c0107988:	89 50 04             	mov    %edx,0x4(%eax)
c010798b:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010798e:	8b 50 04             	mov    0x4(%eax),%edx
c0107991:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0107994:	89 10                	mov    %edx,(%eax)
c0107996:	c7 45 a4 dc 54 1c c0 	movl   $0xc01c54dc,-0x5c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010799d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01079a0:	8b 40 04             	mov    0x4(%eax),%eax
c01079a3:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
c01079a6:	0f 94 c0             	sete   %al
c01079a9:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c01079ac:	85 c0                	test   %eax,%eax
c01079ae:	75 24                	jne    c01079d4 <check_swap+0x380>
c01079b0:	c7 44 24 0c 8b f2 10 	movl   $0xc010f28b,0xc(%esp)
c01079b7:	c0 
c01079b8:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c01079bf:	c0 
c01079c0:	c7 44 24 04 e0 00 00 	movl   $0xe0,0x4(%esp)
c01079c7:	00 
c01079c8:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c01079cf:	e8 ff 93 ff ff       	call   c0100dd3 <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c01079d4:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c01079d9:	89 45 d0             	mov    %eax,-0x30(%ebp)
     nr_free = 0;
c01079dc:	c7 05 e4 54 1c c0 00 	movl   $0x0,0xc01c54e4
c01079e3:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01079e6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c01079ed:	eb 1e                	jmp    c0107a0d <check_swap+0x3b9>
        free_pages(check_rp[i],1);
c01079ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01079f2:	8b 04 85 00 55 1c c0 	mov    -0x3fe3ab00(,%eax,4),%eax
c01079f9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107a00:	00 
c0107a01:	89 04 24             	mov    %eax,(%esp)
c0107a04:	e8 80 da ff ff       	call   c0105489 <free_pages>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107a09:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107a0d:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107a11:	7e dc                	jle    c01079ef <check_swap+0x39b>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c0107a13:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c0107a18:	83 f8 04             	cmp    $0x4,%eax
c0107a1b:	74 24                	je     c0107a41 <check_swap+0x3ed>
c0107a1d:	c7 44 24 0c a4 f2 10 	movl   $0xc010f2a4,0xc(%esp)
c0107a24:	c0 
c0107a25:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c0107a2c:	c0 
c0107a2d:	c7 44 24 04 e9 00 00 	movl   $0xe9,0x4(%esp)
c0107a34:	00 
c0107a35:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c0107a3c:	e8 92 93 ff ff       	call   c0100dd3 <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c0107a41:	c7 04 24 c8 f2 10 c0 	movl   $0xc010f2c8,(%esp)
c0107a48:	e8 0b 89 ff ff       	call   c0100358 <cprintf>
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c0107a4d:	c7 05 38 34 1c c0 00 	movl   $0x0,0xc01c3438
c0107a54:	00 00 00 
     
     check_content_set();
c0107a57:	e8 28 fa ff ff       	call   c0107484 <check_content_set>
     assert( nr_free == 0);         
c0107a5c:	a1 e4 54 1c c0       	mov    0xc01c54e4,%eax
c0107a61:	85 c0                	test   %eax,%eax
c0107a63:	74 24                	je     c0107a89 <check_swap+0x435>
c0107a65:	c7 44 24 0c ef f2 10 	movl   $0xc010f2ef,0xc(%esp)
c0107a6c:	c0 
c0107a6d:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c0107a74:	c0 
c0107a75:	c7 44 24 04 f2 00 00 	movl   $0xf2,0x4(%esp)
c0107a7c:	00 
c0107a7d:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c0107a84:	e8 4a 93 ff ff       	call   c0100dd3 <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0107a89:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107a90:	eb 26                	jmp    c0107ab8 <check_swap+0x464>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c0107a92:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107a95:	c7 04 85 20 55 1c c0 	movl   $0xffffffff,-0x3fe3aae0(,%eax,4)
c0107a9c:	ff ff ff ff 
c0107aa0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107aa3:	8b 14 85 20 55 1c c0 	mov    -0x3fe3aae0(,%eax,4),%edx
c0107aaa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107aad:	89 14 85 60 55 1c c0 	mov    %edx,-0x3fe3aaa0(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0107ab4:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107ab8:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c0107abc:	7e d4                	jle    c0107a92 <check_swap+0x43e>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107abe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107ac5:	e9 eb 00 00 00       	jmp    c0107bb5 <check_swap+0x561>
         check_ptep[i]=0;
c0107aca:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107acd:	c7 04 85 b4 55 1c c0 	movl   $0x0,-0x3fe3aa4c(,%eax,4)
c0107ad4:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c0107ad8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107adb:	83 c0 01             	add    $0x1,%eax
c0107ade:	c1 e0 0c             	shl    $0xc,%eax
c0107ae1:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0107ae8:	00 
c0107ae9:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107aed:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107af0:	89 04 24             	mov    %eax,(%esp)
c0107af3:	e8 8d e0 ff ff       	call   c0105b85 <get_pte>
c0107af8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107afb:	89 04 95 b4 55 1c c0 	mov    %eax,-0x3fe3aa4c(,%edx,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c0107b02:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107b05:	8b 04 85 b4 55 1c c0 	mov    -0x3fe3aa4c(,%eax,4),%eax
c0107b0c:	85 c0                	test   %eax,%eax
c0107b0e:	75 24                	jne    c0107b34 <check_swap+0x4e0>
c0107b10:	c7 44 24 0c fc f2 10 	movl   $0xc010f2fc,0xc(%esp)
c0107b17:	c0 
c0107b18:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c0107b1f:	c0 
c0107b20:	c7 44 24 04 fa 00 00 	movl   $0xfa,0x4(%esp)
c0107b27:	00 
c0107b28:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c0107b2f:	e8 9f 92 ff ff       	call   c0100dd3 <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c0107b34:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107b37:	8b 04 85 b4 55 1c c0 	mov    -0x3fe3aa4c(,%eax,4),%eax
c0107b3e:	8b 00                	mov    (%eax),%eax
c0107b40:	89 04 24             	mov    %eax,(%esp)
c0107b43:	e8 87 f5 ff ff       	call   c01070cf <pte2page>
c0107b48:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107b4b:	8b 14 95 00 55 1c c0 	mov    -0x3fe3ab00(,%edx,4),%edx
c0107b52:	39 d0                	cmp    %edx,%eax
c0107b54:	74 24                	je     c0107b7a <check_swap+0x526>
c0107b56:	c7 44 24 0c 14 f3 10 	movl   $0xc010f314,0xc(%esp)
c0107b5d:	c0 
c0107b5e:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c0107b65:	c0 
c0107b66:	c7 44 24 04 fb 00 00 	movl   $0xfb,0x4(%esp)
c0107b6d:	00 
c0107b6e:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c0107b75:	e8 59 92 ff ff       	call   c0100dd3 <__panic>
         assert((*check_ptep[i] & PTE_P));          
c0107b7a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107b7d:	8b 04 85 b4 55 1c c0 	mov    -0x3fe3aa4c(,%eax,4),%eax
c0107b84:	8b 00                	mov    (%eax),%eax
c0107b86:	83 e0 01             	and    $0x1,%eax
c0107b89:	85 c0                	test   %eax,%eax
c0107b8b:	75 24                	jne    c0107bb1 <check_swap+0x55d>
c0107b8d:	c7 44 24 0c 3c f3 10 	movl   $0xc010f33c,0xc(%esp)
c0107b94:	c0 
c0107b95:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c0107b9c:	c0 
c0107b9d:	c7 44 24 04 fc 00 00 	movl   $0xfc,0x4(%esp)
c0107ba4:	00 
c0107ba5:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c0107bac:	e8 22 92 ff ff       	call   c0100dd3 <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107bb1:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107bb5:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107bb9:	0f 8e 0b ff ff ff    	jle    c0107aca <check_swap+0x476>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c0107bbf:	c7 04 24 58 f3 10 c0 	movl   $0xc010f358,(%esp)
c0107bc6:	e8 8d 87 ff ff       	call   c0100358 <cprintf>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c0107bcb:	e8 6c fa ff ff       	call   c010763c <check_content_access>
c0107bd0:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(ret==0);
c0107bd3:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0107bd7:	74 24                	je     c0107bfd <check_swap+0x5a9>
c0107bd9:	c7 44 24 0c 7e f3 10 	movl   $0xc010f37e,0xc(%esp)
c0107be0:	c0 
c0107be1:	c7 44 24 08 66 f0 10 	movl   $0xc010f066,0x8(%esp)
c0107be8:	c0 
c0107be9:	c7 44 24 04 01 01 00 	movl   $0x101,0x4(%esp)
c0107bf0:	00 
c0107bf1:	c7 04 24 00 f0 10 c0 	movl   $0xc010f000,(%esp)
c0107bf8:	e8 d6 91 ff ff       	call   c0100dd3 <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107bfd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0107c04:	eb 1e                	jmp    c0107c24 <check_swap+0x5d0>
         free_pages(check_rp[i],1);
c0107c06:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107c09:	8b 04 85 00 55 1c c0 	mov    -0x3fe3ab00(,%eax,4),%eax
c0107c10:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107c17:	00 
c0107c18:	89 04 24             	mov    %eax,(%esp)
c0107c1b:	e8 69 d8 ff ff       	call   c0105489 <free_pages>
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0107c20:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0107c24:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0107c28:	7e dc                	jle    c0107c06 <check_swap+0x5b2>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c0107c2a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107c2d:	8b 00                	mov    (%eax),%eax
c0107c2f:	89 04 24             	mov    %eax,(%esp)
c0107c32:	e8 d6 f4 ff ff       	call   c010710d <pde2page>
c0107c37:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0107c3e:	00 
c0107c3f:	89 04 24             	mov    %eax,(%esp)
c0107c42:	e8 42 d8 ff ff       	call   c0105489 <free_pages>
     pgdir[0] = 0;
c0107c47:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107c4a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c0107c50:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107c53:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c0107c5a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107c5d:	89 04 24             	mov    %eax,(%esp)
c0107c60:	e8 8d 09 00 00       	call   c01085f2 <mm_destroy>
     check_mm_struct = NULL;
c0107c65:	c7 05 cc 55 1c c0 00 	movl   $0x0,0xc01c55cc
c0107c6c:	00 00 00 
     
     nr_free = nr_free_store;
c0107c6f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107c72:	a3 e4 54 1c c0       	mov    %eax,0xc01c54e4
     free_list = free_list_store;
c0107c77:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107c7a:	8b 55 9c             	mov    -0x64(%ebp),%edx
c0107c7d:	a3 dc 54 1c c0       	mov    %eax,0xc01c54dc
c0107c82:	89 15 e0 54 1c c0    	mov    %edx,0xc01c54e0

     
     le = &free_list;
c0107c88:	c7 45 e8 dc 54 1c c0 	movl   $0xc01c54dc,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0107c8f:	eb 1d                	jmp    c0107cae <check_swap+0x65a>
         struct Page *p = le2page(le, page_link);
c0107c91:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107c94:	83 e8 0c             	sub    $0xc,%eax
c0107c97:	89 45 c8             	mov    %eax,-0x38(%ebp)
         count --, total -= p->property;
c0107c9a:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0107c9e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0107ca1:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0107ca4:	8b 40 08             	mov    0x8(%eax),%eax
c0107ca7:	29 c2                	sub    %eax,%edx
c0107ca9:	89 d0                	mov    %edx,%eax
c0107cab:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107cae:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107cb1:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107cb4:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107cb7:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0107cba:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0107cbd:	81 7d e8 dc 54 1c c0 	cmpl   $0xc01c54dc,-0x18(%ebp)
c0107cc4:	75 cb                	jne    c0107c91 <check_swap+0x63d>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0107cc6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107cc9:	89 44 24 08          	mov    %eax,0x8(%esp)
c0107ccd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107cd0:	89 44 24 04          	mov    %eax,0x4(%esp)
c0107cd4:	c7 04 24 85 f3 10 c0 	movl   $0xc010f385,(%esp)
c0107cdb:	e8 78 86 ff ff       	call   c0100358 <cprintf>
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0107ce0:	c7 04 24 9f f3 10 c0 	movl   $0xc010f39f,(%esp)
c0107ce7:	e8 6c 86 ff ff       	call   c0100358 <cprintf>
}
c0107cec:	83 c4 74             	add    $0x74,%esp
c0107cef:	5b                   	pop    %ebx
c0107cf0:	5d                   	pop    %ebp
c0107cf1:	c3                   	ret    

c0107cf2 <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{
c0107cf2:	55                   	push   %ebp
c0107cf3:	89 e5                	mov    %esp,%ebp
c0107cf5:	83 ec 10             	sub    $0x10,%esp
c0107cf8:	c7 45 fc c4 55 1c c0 	movl   $0xc01c55c4,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107cff:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107d02:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0107d05:	89 50 04             	mov    %edx,0x4(%eax)
c0107d08:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107d0b:	8b 50 04             	mov    0x4(%eax),%edx
c0107d0e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0107d11:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c0107d13:	8b 45 08             	mov    0x8(%ebp),%eax
c0107d16:	c7 40 14 c4 55 1c c0 	movl   $0xc01c55c4,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c0107d1d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107d22:	c9                   	leave  
c0107d23:	c3                   	ret    

c0107d24 <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0107d24:	55                   	push   %ebp
c0107d25:	89 e5                	mov    %esp,%ebp
c0107d27:	83 ec 38             	sub    $0x38,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107d2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0107d2d:	8b 40 14             	mov    0x14(%eax),%eax
c0107d30:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0107d33:	8b 45 10             	mov    0x10(%ebp),%eax
c0107d36:	83 c0 14             	add    $0x14,%eax
c0107d39:	89 45 f0             	mov    %eax,-0x10(%ebp)

    assert(entry != NULL && head != NULL);
c0107d3c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107d40:	74 06                	je     c0107d48 <_fifo_map_swappable+0x24>
c0107d42:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107d46:	75 24                	jne    c0107d6c <_fifo_map_swappable+0x48>
c0107d48:	c7 44 24 0c b8 f3 10 	movl   $0xc010f3b8,0xc(%esp)
c0107d4f:	c0 
c0107d50:	c7 44 24 08 d6 f3 10 	movl   $0xc010f3d6,0x8(%esp)
c0107d57:	c0 
c0107d58:	c7 44 24 04 32 00 00 	movl   $0x32,0x4(%esp)
c0107d5f:	00 
c0107d60:	c7 04 24 eb f3 10 c0 	movl   $0xc010f3eb,(%esp)
c0107d67:	e8 67 90 ff ff       	call   c0100dd3 <__panic>
c0107d6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107d6f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107d72:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107d75:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0107d78:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107d7b:	8b 00                	mov    (%eax),%eax
c0107d7d:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107d80:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0107d83:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0107d86:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107d89:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0107d8c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107d8f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107d92:	89 10                	mov    %edx,(%eax)
c0107d94:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107d97:	8b 10                	mov    (%eax),%edx
c0107d99:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107d9c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0107d9f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107da2:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107da5:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0107da8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107dab:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107dae:	89 10                	mov    %edx,(%eax)
    //record the page access situlation
    /*LAB3 EXERCISE 2: 2014011381*/
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    list_add_before(head, entry);
    return 0;
c0107db0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107db5:	c9                   	leave  
c0107db6:	c3                   	ret    

c0107db7 <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then set the addr of addr of this page to ptr_page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c0107db7:	55                   	push   %ebp
c0107db8:	89 e5                	mov    %esp,%ebp
c0107dba:	83 ec 38             	sub    $0x38,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107dbd:	8b 45 08             	mov    0x8(%ebp),%eax
c0107dc0:	8b 40 14             	mov    0x14(%eax),%eax
c0107dc3:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c0107dc6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107dca:	75 24                	jne    c0107df0 <_fifo_swap_out_victim+0x39>
c0107dcc:	c7 44 24 0c ff f3 10 	movl   $0xc010f3ff,0xc(%esp)
c0107dd3:	c0 
c0107dd4:	c7 44 24 08 d6 f3 10 	movl   $0xc010f3d6,0x8(%esp)
c0107ddb:	c0 
c0107ddc:	c7 44 24 04 41 00 00 	movl   $0x41,0x4(%esp)
c0107de3:	00 
c0107de4:	c7 04 24 eb f3 10 c0 	movl   $0xc010f3eb,(%esp)
c0107deb:	e8 e3 8f ff ff       	call   c0100dd3 <__panic>
     assert(in_tick==0);
c0107df0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0107df4:	74 24                	je     c0107e1a <_fifo_swap_out_victim+0x63>
c0107df6:	c7 44 24 0c 0c f4 10 	movl   $0xc010f40c,0xc(%esp)
c0107dfd:	c0 
c0107dfe:	c7 44 24 08 d6 f3 10 	movl   $0xc010f3d6,0x8(%esp)
c0107e05:	c0 
c0107e06:	c7 44 24 04 42 00 00 	movl   $0x42,0x4(%esp)
c0107e0d:	00 
c0107e0e:	c7 04 24 eb f3 10 c0 	movl   $0xc010f3eb,(%esp)
c0107e15:	e8 b9 8f ff ff       	call   c0100dd3 <__panic>
c0107e1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107e1d:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107e20:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107e23:	8b 40 04             	mov    0x4(%eax),%eax
     /* Select the victim */
     /*LAB3 EXERCISE 2: 2014011381*/
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  set the addr of addr of this page to ptr_page
     list_entry_t *victim = list_next(head);
c0107e26:	89 45 f0             	mov    %eax,-0x10(%ebp)
     assert(victim);
c0107e29:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107e2d:	75 24                	jne    c0107e53 <_fifo_swap_out_victim+0x9c>
c0107e2f:	c7 44 24 0c 17 f4 10 	movl   $0xc010f417,0xc(%esp)
c0107e36:	c0 
c0107e37:	c7 44 24 08 d6 f3 10 	movl   $0xc010f3d6,0x8(%esp)
c0107e3e:	c0 
c0107e3f:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c0107e46:	00 
c0107e47:	c7 04 24 eb f3 10 c0 	movl   $0xc010f3eb,(%esp)
c0107e4e:	e8 80 8f ff ff       	call   c0100dd3 <__panic>
     if (victim != head) {
c0107e53:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e56:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0107e59:	74 3b                	je     c0107e96 <_fifo_swap_out_victim+0xdf>
         struct Page *p = le2page(victim, pra_page_link);
c0107e5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e5e:	83 e8 14             	sub    $0x14,%eax
c0107e61:	89 45 ec             	mov    %eax,-0x14(%ebp)
         *ptr_page = p;
c0107e64:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107e67:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0107e6a:	89 10                	mov    %edx,(%eax)
c0107e6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107e6f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107e72:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107e75:	8b 40 04             	mov    0x4(%eax),%eax
c0107e78:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107e7b:	8b 12                	mov    (%edx),%edx
c0107e7d:	89 55 e0             	mov    %edx,-0x20(%ebp)
c0107e80:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0107e83:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107e86:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107e89:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107e8c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107e8f:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107e92:	89 10                	mov    %edx,(%eax)
c0107e94:	eb 07                	jmp    c0107e9d <_fifo_swap_out_victim+0xe6>
         list_del(victim);
     } else
        ptr_page = NULL;
c0107e96:	c7 45 0c 00 00 00 00 	movl   $0x0,0xc(%ebp)
     return 0;
c0107e9d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107ea2:	c9                   	leave  
c0107ea3:	c3                   	ret    

c0107ea4 <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c0107ea4:	55                   	push   %ebp
c0107ea5:	89 e5                	mov    %esp,%ebp
c0107ea7:	83 ec 18             	sub    $0x18,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107eaa:	c7 04 24 20 f4 10 c0 	movl   $0xc010f420,(%esp)
c0107eb1:	e8 a2 84 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c0107eb6:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107ebb:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0107ebe:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107ec3:	83 f8 04             	cmp    $0x4,%eax
c0107ec6:	74 24                	je     c0107eec <_fifo_check_swap+0x48>
c0107ec8:	c7 44 24 0c 46 f4 10 	movl   $0xc010f446,0xc(%esp)
c0107ecf:	c0 
c0107ed0:	c7 44 24 08 d6 f3 10 	movl   $0xc010f3d6,0x8(%esp)
c0107ed7:	c0 
c0107ed8:	c7 44 24 04 56 00 00 	movl   $0x56,0x4(%esp)
c0107edf:	00 
c0107ee0:	c7 04 24 eb f3 10 c0 	movl   $0xc010f3eb,(%esp)
c0107ee7:	e8 e7 8e ff ff       	call   c0100dd3 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0107eec:	c7 04 24 58 f4 10 c0 	movl   $0xc010f458,(%esp)
c0107ef3:	e8 60 84 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0107ef8:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107efd:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c0107f00:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107f05:	83 f8 04             	cmp    $0x4,%eax
c0107f08:	74 24                	je     c0107f2e <_fifo_check_swap+0x8a>
c0107f0a:	c7 44 24 0c 46 f4 10 	movl   $0xc010f446,0xc(%esp)
c0107f11:	c0 
c0107f12:	c7 44 24 08 d6 f3 10 	movl   $0xc010f3d6,0x8(%esp)
c0107f19:	c0 
c0107f1a:	c7 44 24 04 59 00 00 	movl   $0x59,0x4(%esp)
c0107f21:	00 
c0107f22:	c7 04 24 eb f3 10 c0 	movl   $0xc010f3eb,(%esp)
c0107f29:	e8 a5 8e ff ff       	call   c0100dd3 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107f2e:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c0107f35:	e8 1e 84 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0107f3a:	b8 00 40 00 00       	mov    $0x4000,%eax
c0107f3f:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c0107f42:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107f47:	83 f8 04             	cmp    $0x4,%eax
c0107f4a:	74 24                	je     c0107f70 <_fifo_check_swap+0xcc>
c0107f4c:	c7 44 24 0c 46 f4 10 	movl   $0xc010f446,0xc(%esp)
c0107f53:	c0 
c0107f54:	c7 44 24 08 d6 f3 10 	movl   $0xc010f3d6,0x8(%esp)
c0107f5b:	c0 
c0107f5c:	c7 44 24 04 5c 00 00 	movl   $0x5c,0x4(%esp)
c0107f63:	00 
c0107f64:	c7 04 24 eb f3 10 c0 	movl   $0xc010f3eb,(%esp)
c0107f6b:	e8 63 8e ff ff       	call   c0100dd3 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107f70:	c7 04 24 a8 f4 10 c0 	movl   $0xc010f4a8,(%esp)
c0107f77:	e8 dc 83 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0107f7c:	b8 00 20 00 00       	mov    $0x2000,%eax
c0107f81:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0107f84:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107f89:	83 f8 04             	cmp    $0x4,%eax
c0107f8c:	74 24                	je     c0107fb2 <_fifo_check_swap+0x10e>
c0107f8e:	c7 44 24 0c 46 f4 10 	movl   $0xc010f446,0xc(%esp)
c0107f95:	c0 
c0107f96:	c7 44 24 08 d6 f3 10 	movl   $0xc010f3d6,0x8(%esp)
c0107f9d:	c0 
c0107f9e:	c7 44 24 04 5f 00 00 	movl   $0x5f,0x4(%esp)
c0107fa5:	00 
c0107fa6:	c7 04 24 eb f3 10 c0 	movl   $0xc010f3eb,(%esp)
c0107fad:	e8 21 8e ff ff       	call   c0100dd3 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107fb2:	c7 04 24 d0 f4 10 c0 	movl   $0xc010f4d0,(%esp)
c0107fb9:	e8 9a 83 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c0107fbe:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107fc3:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0107fc6:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0107fcb:	83 f8 05             	cmp    $0x5,%eax
c0107fce:	74 24                	je     c0107ff4 <_fifo_check_swap+0x150>
c0107fd0:	c7 44 24 0c f6 f4 10 	movl   $0xc010f4f6,0xc(%esp)
c0107fd7:	c0 
c0107fd8:	c7 44 24 08 d6 f3 10 	movl   $0xc010f3d6,0x8(%esp)
c0107fdf:	c0 
c0107fe0:	c7 44 24 04 62 00 00 	movl   $0x62,0x4(%esp)
c0107fe7:	00 
c0107fe8:	c7 04 24 eb f3 10 c0 	movl   $0xc010f3eb,(%esp)
c0107fef:	e8 df 8d ff ff       	call   c0100dd3 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107ff4:	c7 04 24 a8 f4 10 c0 	movl   $0xc010f4a8,(%esp)
c0107ffb:	e8 58 83 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0108000:	b8 00 20 00 00       	mov    $0x2000,%eax
c0108005:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c0108008:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c010800d:	83 f8 05             	cmp    $0x5,%eax
c0108010:	74 24                	je     c0108036 <_fifo_check_swap+0x192>
c0108012:	c7 44 24 0c f6 f4 10 	movl   $0xc010f4f6,0xc(%esp)
c0108019:	c0 
c010801a:	c7 44 24 08 d6 f3 10 	movl   $0xc010f3d6,0x8(%esp)
c0108021:	c0 
c0108022:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c0108029:	00 
c010802a:	c7 04 24 eb f3 10 c0 	movl   $0xc010f3eb,(%esp)
c0108031:	e8 9d 8d ff ff       	call   c0100dd3 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0108036:	c7 04 24 58 f4 10 c0 	movl   $0xc010f458,(%esp)
c010803d:	e8 16 83 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x1000 = 0x0a;
c0108042:	b8 00 10 00 00       	mov    $0x1000,%eax
c0108047:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c010804a:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c010804f:	83 f8 06             	cmp    $0x6,%eax
c0108052:	74 24                	je     c0108078 <_fifo_check_swap+0x1d4>
c0108054:	c7 44 24 0c 05 f5 10 	movl   $0xc010f505,0xc(%esp)
c010805b:	c0 
c010805c:	c7 44 24 08 d6 f3 10 	movl   $0xc010f3d6,0x8(%esp)
c0108063:	c0 
c0108064:	c7 44 24 04 68 00 00 	movl   $0x68,0x4(%esp)
c010806b:	00 
c010806c:	c7 04 24 eb f3 10 c0 	movl   $0xc010f3eb,(%esp)
c0108073:	e8 5b 8d ff ff       	call   c0100dd3 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0108078:	c7 04 24 a8 f4 10 c0 	movl   $0xc010f4a8,(%esp)
c010807f:	e8 d4 82 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x2000 = 0x0b;
c0108084:	b8 00 20 00 00       	mov    $0x2000,%eax
c0108089:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c010808c:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0108091:	83 f8 07             	cmp    $0x7,%eax
c0108094:	74 24                	je     c01080ba <_fifo_check_swap+0x216>
c0108096:	c7 44 24 0c 14 f5 10 	movl   $0xc010f514,0xc(%esp)
c010809d:	c0 
c010809e:	c7 44 24 08 d6 f3 10 	movl   $0xc010f3d6,0x8(%esp)
c01080a5:	c0 
c01080a6:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c01080ad:	00 
c01080ae:	c7 04 24 eb f3 10 c0 	movl   $0xc010f3eb,(%esp)
c01080b5:	e8 19 8d ff ff       	call   c0100dd3 <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c01080ba:	c7 04 24 20 f4 10 c0 	movl   $0xc010f420,(%esp)
c01080c1:	e8 92 82 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x3000 = 0x0c;
c01080c6:	b8 00 30 00 00       	mov    $0x3000,%eax
c01080cb:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c01080ce:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c01080d3:	83 f8 08             	cmp    $0x8,%eax
c01080d6:	74 24                	je     c01080fc <_fifo_check_swap+0x258>
c01080d8:	c7 44 24 0c 23 f5 10 	movl   $0xc010f523,0xc(%esp)
c01080df:	c0 
c01080e0:	c7 44 24 08 d6 f3 10 	movl   $0xc010f3d6,0x8(%esp)
c01080e7:	c0 
c01080e8:	c7 44 24 04 6e 00 00 	movl   $0x6e,0x4(%esp)
c01080ef:	00 
c01080f0:	c7 04 24 eb f3 10 c0 	movl   $0xc010f3eb,(%esp)
c01080f7:	e8 d7 8c ff ff       	call   c0100dd3 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c01080fc:	c7 04 24 80 f4 10 c0 	movl   $0xc010f480,(%esp)
c0108103:	e8 50 82 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x4000 = 0x0d;
c0108108:	b8 00 40 00 00       	mov    $0x4000,%eax
c010810d:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0108110:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0108115:	83 f8 09             	cmp    $0x9,%eax
c0108118:	74 24                	je     c010813e <_fifo_check_swap+0x29a>
c010811a:	c7 44 24 0c 32 f5 10 	movl   $0xc010f532,0xc(%esp)
c0108121:	c0 
c0108122:	c7 44 24 08 d6 f3 10 	movl   $0xc010f3d6,0x8(%esp)
c0108129:	c0 
c010812a:	c7 44 24 04 71 00 00 	movl   $0x71,0x4(%esp)
c0108131:	00 
c0108132:	c7 04 24 eb f3 10 c0 	movl   $0xc010f3eb,(%esp)
c0108139:	e8 95 8c ff ff       	call   c0100dd3 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c010813e:	c7 04 24 d0 f4 10 c0 	movl   $0xc010f4d0,(%esp)
c0108145:	e8 0e 82 ff ff       	call   c0100358 <cprintf>
    *(unsigned char *)0x5000 = 0x0e;
c010814a:	b8 00 50 00 00       	mov    $0x5000,%eax
c010814f:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c0108152:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0108157:	83 f8 0a             	cmp    $0xa,%eax
c010815a:	74 24                	je     c0108180 <_fifo_check_swap+0x2dc>
c010815c:	c7 44 24 0c 41 f5 10 	movl   $0xc010f541,0xc(%esp)
c0108163:	c0 
c0108164:	c7 44 24 08 d6 f3 10 	movl   $0xc010f3d6,0x8(%esp)
c010816b:	c0 
c010816c:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c0108173:	00 
c0108174:	c7 04 24 eb f3 10 c0 	movl   $0xc010f3eb,(%esp)
c010817b:	e8 53 8c ff ff       	call   c0100dd3 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c0108180:	c7 04 24 58 f4 10 c0 	movl   $0xc010f458,(%esp)
c0108187:	e8 cc 81 ff ff       	call   c0100358 <cprintf>
    assert(*(unsigned char *)0x1000 == 0x0a);
c010818c:	b8 00 10 00 00       	mov    $0x1000,%eax
c0108191:	0f b6 00             	movzbl (%eax),%eax
c0108194:	3c 0a                	cmp    $0xa,%al
c0108196:	74 24                	je     c01081bc <_fifo_check_swap+0x318>
c0108198:	c7 44 24 0c 54 f5 10 	movl   $0xc010f554,0xc(%esp)
c010819f:	c0 
c01081a0:	c7 44 24 08 d6 f3 10 	movl   $0xc010f3d6,0x8(%esp)
c01081a7:	c0 
c01081a8:	c7 44 24 04 76 00 00 	movl   $0x76,0x4(%esp)
c01081af:	00 
c01081b0:	c7 04 24 eb f3 10 c0 	movl   $0xc010f3eb,(%esp)
c01081b7:	e8 17 8c ff ff       	call   c0100dd3 <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c01081bc:	b8 00 10 00 00       	mov    $0x1000,%eax
c01081c1:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c01081c4:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c01081c9:	83 f8 0b             	cmp    $0xb,%eax
c01081cc:	74 24                	je     c01081f2 <_fifo_check_swap+0x34e>
c01081ce:	c7 44 24 0c 75 f5 10 	movl   $0xc010f575,0xc(%esp)
c01081d5:	c0 
c01081d6:	c7 44 24 08 d6 f3 10 	movl   $0xc010f3d6,0x8(%esp)
c01081dd:	c0 
c01081de:	c7 44 24 04 78 00 00 	movl   $0x78,0x4(%esp)
c01081e5:	00 
c01081e6:	c7 04 24 eb f3 10 c0 	movl   $0xc010f3eb,(%esp)
c01081ed:	e8 e1 8b ff ff       	call   c0100dd3 <__panic>
    return 0;
c01081f2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01081f7:	c9                   	leave  
c01081f8:	c3                   	ret    

c01081f9 <_fifo_init>:


static int
_fifo_init(void)
{
c01081f9:	55                   	push   %ebp
c01081fa:	89 e5                	mov    %esp,%ebp
    return 0;
c01081fc:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108201:	5d                   	pop    %ebp
c0108202:	c3                   	ret    

c0108203 <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0108203:	55                   	push   %ebp
c0108204:	89 e5                	mov    %esp,%ebp
    return 0;
c0108206:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010820b:	5d                   	pop    %ebp
c010820c:	c3                   	ret    

c010820d <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c010820d:	55                   	push   %ebp
c010820e:	89 e5                	mov    %esp,%ebp
c0108210:	b8 00 00 00 00       	mov    $0x0,%eax
c0108215:	5d                   	pop    %ebp
c0108216:	c3                   	ret    

c0108217 <mm_count>:
bool user_mem_check(struct mm_struct *mm, uintptr_t start, size_t len, bool write);
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);

static inline int
mm_count(struct mm_struct *mm) {
c0108217:	55                   	push   %ebp
c0108218:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c010821a:	8b 45 08             	mov    0x8(%ebp),%eax
c010821d:	8b 40 18             	mov    0x18(%eax),%eax
}
c0108220:	5d                   	pop    %ebp
c0108221:	c3                   	ret    

c0108222 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0108222:	55                   	push   %ebp
c0108223:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0108225:	8b 45 08             	mov    0x8(%ebp),%eax
c0108228:	8b 55 0c             	mov    0xc(%ebp),%edx
c010822b:	89 50 18             	mov    %edx,0x18(%eax)
}
c010822e:	5d                   	pop    %ebp
c010822f:	c3                   	ret    

c0108230 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0108230:	55                   	push   %ebp
c0108231:	89 e5                	mov    %esp,%ebp
c0108233:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c0108236:	8b 45 08             	mov    0x8(%ebp),%eax
c0108239:	c1 e8 0c             	shr    $0xc,%eax
c010823c:	89 c2                	mov    %eax,%edx
c010823e:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c0108243:	39 c2                	cmp    %eax,%edx
c0108245:	72 1c                	jb     c0108263 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c0108247:	c7 44 24 08 98 f5 10 	movl   $0xc010f598,0x8(%esp)
c010824e:	c0 
c010824f:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c0108256:	00 
c0108257:	c7 04 24 b7 f5 10 c0 	movl   $0xc010f5b7,(%esp)
c010825e:	e8 70 8b ff ff       	call   c0100dd3 <__panic>
    }
    return &pages[PPN(pa)];
c0108263:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c0108268:	8b 55 08             	mov    0x8(%ebp),%edx
c010826b:	c1 ea 0c             	shr    $0xc,%edx
c010826e:	c1 e2 05             	shl    $0x5,%edx
c0108271:	01 d0                	add    %edx,%eax
}
c0108273:	c9                   	leave  
c0108274:	c3                   	ret    

c0108275 <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c0108275:	55                   	push   %ebp
c0108276:	89 e5                	mov    %esp,%ebp
c0108278:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PDE_ADDR(pde));
c010827b:	8b 45 08             	mov    0x8(%ebp),%eax
c010827e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0108283:	89 04 24             	mov    %eax,(%esp)
c0108286:	e8 a5 ff ff ff       	call   c0108230 <pa2page>
}
c010828b:	c9                   	leave  
c010828c:	c3                   	ret    

c010828d <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c010828d:	55                   	push   %ebp
c010828e:	89 e5                	mov    %esp,%ebp
c0108290:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0108293:	c7 04 24 2c 00 00 00 	movl   $0x2c,(%esp)
c010829a:	e8 0a cd ff ff       	call   c0104fa9 <kmalloc>
c010829f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c01082a2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01082a6:	0f 84 81 00 00 00    	je     c010832d <mm_create+0xa0>
        list_init(&(mm->mmap_list));
c01082ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082af:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01082b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082b5:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01082b8:	89 50 04             	mov    %edx,0x4(%eax)
c01082bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082be:	8b 50 04             	mov    0x4(%eax),%edx
c01082c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01082c4:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c01082c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082c9:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c01082d0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082d3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c01082da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082dd:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c01082e4:	a1 2c 34 1c c0       	mov    0xc01c342c,%eax
c01082e9:	85 c0                	test   %eax,%eax
c01082eb:	74 0d                	je     c01082fa <mm_create+0x6d>
c01082ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082f0:	89 04 24             	mov    %eax,(%esp)
c01082f3:	e8 bd ee ff ff       	call   c01071b5 <swap_init_mm>
c01082f8:	eb 0a                	jmp    c0108304 <mm_create+0x77>
        else mm->sm_priv = NULL;
c01082fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01082fd:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

        set_mm_count(mm, 0);
c0108304:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010830b:	00 
c010830c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010830f:	89 04 24             	mov    %eax,(%esp)
c0108312:	e8 0b ff ff ff       	call   c0108222 <set_mm_count>
        sem_init(&(mm->mm_sem), 1);
c0108317:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010831a:	83 c0 1c             	add    $0x1c,%eax
c010831d:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0108324:	00 
c0108325:	89 04 24             	mov    %eax,(%esp)
c0108328:	e8 37 1a 00 00       	call   c0109d64 <sem_init>
    }
    return mm;
c010832d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108330:	c9                   	leave  
c0108331:	c3                   	ret    

c0108332 <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0108332:	55                   	push   %ebp
c0108333:	89 e5                	mov    %esp,%ebp
c0108335:	83 ec 28             	sub    $0x28,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0108338:	c7 04 24 18 00 00 00 	movl   $0x18,(%esp)
c010833f:	e8 65 cc ff ff       	call   c0104fa9 <kmalloc>
c0108344:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0108347:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010834b:	74 1b                	je     c0108368 <vma_create+0x36>
        vma->vm_start = vm_start;
c010834d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108350:	8b 55 08             	mov    0x8(%ebp),%edx
c0108353:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0108356:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108359:	8b 55 0c             	mov    0xc(%ebp),%edx
c010835c:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c010835f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108362:	8b 55 10             	mov    0x10(%ebp),%edx
c0108365:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0108368:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010836b:	c9                   	leave  
c010836c:	c3                   	ret    

c010836d <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c010836d:	55                   	push   %ebp
c010836e:	89 e5                	mov    %esp,%ebp
c0108370:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0108373:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c010837a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010837e:	0f 84 95 00 00 00    	je     c0108419 <find_vma+0xac>
        vma = mm->mmap_cache;
c0108384:	8b 45 08             	mov    0x8(%ebp),%eax
c0108387:	8b 40 08             	mov    0x8(%eax),%eax
c010838a:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c010838d:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0108391:	74 16                	je     c01083a9 <find_vma+0x3c>
c0108393:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108396:	8b 40 04             	mov    0x4(%eax),%eax
c0108399:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010839c:	77 0b                	ja     c01083a9 <find_vma+0x3c>
c010839e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01083a1:	8b 40 08             	mov    0x8(%eax),%eax
c01083a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01083a7:	77 61                	ja     c010840a <find_vma+0x9d>
                bool found = 0;
c01083a9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c01083b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01083b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01083b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01083b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c01083bc:	eb 28                	jmp    c01083e6 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c01083be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01083c1:	83 e8 10             	sub    $0x10,%eax
c01083c4:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c01083c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01083ca:	8b 40 04             	mov    0x4(%eax),%eax
c01083cd:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01083d0:	77 14                	ja     c01083e6 <find_vma+0x79>
c01083d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01083d5:	8b 40 08             	mov    0x8(%eax),%eax
c01083d8:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01083db:	76 09                	jbe    c01083e6 <find_vma+0x79>
                        found = 1;
c01083dd:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c01083e4:	eb 17                	jmp    c01083fd <find_vma+0x90>
c01083e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01083e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01083ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01083ef:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c01083f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01083f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01083f8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01083fb:	75 c1                	jne    c01083be <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c01083fd:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0108401:	75 07                	jne    c010840a <find_vma+0x9d>
                    vma = NULL;
c0108403:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c010840a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010840e:	74 09                	je     c0108419 <find_vma+0xac>
            mm->mmap_cache = vma;
c0108410:	8b 45 08             	mov    0x8(%ebp),%eax
c0108413:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0108416:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c0108419:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010841c:	c9                   	leave  
c010841d:	c3                   	ret    

c010841e <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c010841e:	55                   	push   %ebp
c010841f:	89 e5                	mov    %esp,%ebp
c0108421:	83 ec 18             	sub    $0x18,%esp
    assert(prev->vm_start < prev->vm_end);
c0108424:	8b 45 08             	mov    0x8(%ebp),%eax
c0108427:	8b 50 04             	mov    0x4(%eax),%edx
c010842a:	8b 45 08             	mov    0x8(%ebp),%eax
c010842d:	8b 40 08             	mov    0x8(%eax),%eax
c0108430:	39 c2                	cmp    %eax,%edx
c0108432:	72 24                	jb     c0108458 <check_vma_overlap+0x3a>
c0108434:	c7 44 24 0c c5 f5 10 	movl   $0xc010f5c5,0xc(%esp)
c010843b:	c0 
c010843c:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c0108443:	c0 
c0108444:	c7 44 24 04 6b 00 00 	movl   $0x6b,0x4(%esp)
c010844b:	00 
c010844c:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c0108453:	e8 7b 89 ff ff       	call   c0100dd3 <__panic>
    assert(prev->vm_end <= next->vm_start);
c0108458:	8b 45 08             	mov    0x8(%ebp),%eax
c010845b:	8b 50 08             	mov    0x8(%eax),%edx
c010845e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108461:	8b 40 04             	mov    0x4(%eax),%eax
c0108464:	39 c2                	cmp    %eax,%edx
c0108466:	76 24                	jbe    c010848c <check_vma_overlap+0x6e>
c0108468:	c7 44 24 0c 08 f6 10 	movl   $0xc010f608,0xc(%esp)
c010846f:	c0 
c0108470:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c0108477:	c0 
c0108478:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010847f:	00 
c0108480:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c0108487:	e8 47 89 ff ff       	call   c0100dd3 <__panic>
    assert(next->vm_start < next->vm_end);
c010848c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010848f:	8b 50 04             	mov    0x4(%eax),%edx
c0108492:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108495:	8b 40 08             	mov    0x8(%eax),%eax
c0108498:	39 c2                	cmp    %eax,%edx
c010849a:	72 24                	jb     c01084c0 <check_vma_overlap+0xa2>
c010849c:	c7 44 24 0c 27 f6 10 	movl   $0xc010f627,0xc(%esp)
c01084a3:	c0 
c01084a4:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c01084ab:	c0 
c01084ac:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c01084b3:	00 
c01084b4:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c01084bb:	e8 13 89 ff ff       	call   c0100dd3 <__panic>
}
c01084c0:	c9                   	leave  
c01084c1:	c3                   	ret    

c01084c2 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c01084c2:	55                   	push   %ebp
c01084c3:	89 e5                	mov    %esp,%ebp
c01084c5:	83 ec 48             	sub    $0x48,%esp
    assert(vma->vm_start < vma->vm_end);
c01084c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01084cb:	8b 50 04             	mov    0x4(%eax),%edx
c01084ce:	8b 45 0c             	mov    0xc(%ebp),%eax
c01084d1:	8b 40 08             	mov    0x8(%eax),%eax
c01084d4:	39 c2                	cmp    %eax,%edx
c01084d6:	72 24                	jb     c01084fc <insert_vma_struct+0x3a>
c01084d8:	c7 44 24 0c 45 f6 10 	movl   $0xc010f645,0xc(%esp)
c01084df:	c0 
c01084e0:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c01084e7:	c0 
c01084e8:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c01084ef:	00 
c01084f0:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c01084f7:	e8 d7 88 ff ff       	call   c0100dd3 <__panic>
    list_entry_t *list = &(mm->mmap_list);
c01084fc:	8b 45 08             	mov    0x8(%ebp),%eax
c01084ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c0108502:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108505:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c0108508:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010850b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c010850e:	eb 21                	jmp    c0108531 <insert_vma_struct+0x6f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c0108510:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108513:	83 e8 10             	sub    $0x10,%eax
c0108516:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c0108519:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010851c:	8b 50 04             	mov    0x4(%eax),%edx
c010851f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108522:	8b 40 04             	mov    0x4(%eax),%eax
c0108525:	39 c2                	cmp    %eax,%edx
c0108527:	76 02                	jbe    c010852b <insert_vma_struct+0x69>
                break;
c0108529:	eb 1d                	jmp    c0108548 <insert_vma_struct+0x86>
            }
            le_prev = le;
c010852b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010852e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108531:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108534:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0108537:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010853a:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c010853d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108540:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108543:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108546:	75 c8                	jne    c0108510 <insert_vma_struct+0x4e>
c0108548:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010854b:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010854e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108551:	8b 40 04             	mov    0x4(%eax),%eax
                break;
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c0108554:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    /* check overlap */
    if (le_prev != list) {
c0108557:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010855a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010855d:	74 15                	je     c0108574 <insert_vma_struct+0xb2>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c010855f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108562:	8d 50 f0             	lea    -0x10(%eax),%edx
c0108565:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108568:	89 44 24 04          	mov    %eax,0x4(%esp)
c010856c:	89 14 24             	mov    %edx,(%esp)
c010856f:	e8 aa fe ff ff       	call   c010841e <check_vma_overlap>
    }
    if (le_next != list) {
c0108574:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108577:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010857a:	74 15                	je     c0108591 <insert_vma_struct+0xcf>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c010857c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010857f:	83 e8 10             	sub    $0x10,%eax
c0108582:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108586:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108589:	89 04 24             	mov    %eax,(%esp)
c010858c:	e8 8d fe ff ff       	call   c010841e <check_vma_overlap>
    }

    vma->vm_mm = mm;
c0108591:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108594:	8b 55 08             	mov    0x8(%ebp),%edx
c0108597:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c0108599:	8b 45 0c             	mov    0xc(%ebp),%eax
c010859c:	8d 50 10             	lea    0x10(%eax),%edx
c010859f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01085a2:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01085a5:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01085a8:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01085ab:	8b 40 04             	mov    0x4(%eax),%eax
c01085ae:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01085b1:	89 55 d0             	mov    %edx,-0x30(%ebp)
c01085b4:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01085b7:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01085ba:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01085bd:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01085c0:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01085c3:	89 10                	mov    %edx,(%eax)
c01085c5:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01085c8:	8b 10                	mov    (%eax),%edx
c01085ca:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01085cd:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01085d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01085d3:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01085d6:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01085d9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01085dc:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01085df:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c01085e1:	8b 45 08             	mov    0x8(%ebp),%eax
c01085e4:	8b 40 10             	mov    0x10(%eax),%eax
c01085e7:	8d 50 01             	lea    0x1(%eax),%edx
c01085ea:	8b 45 08             	mov    0x8(%ebp),%eax
c01085ed:	89 50 10             	mov    %edx,0x10(%eax)
}
c01085f0:	c9                   	leave  
c01085f1:	c3                   	ret    

c01085f2 <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c01085f2:	55                   	push   %ebp
c01085f3:	89 e5                	mov    %esp,%ebp
c01085f5:	83 ec 38             	sub    $0x38,%esp
    assert(mm_count(mm) == 0);
c01085f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01085fb:	89 04 24             	mov    %eax,(%esp)
c01085fe:	e8 14 fc ff ff       	call   c0108217 <mm_count>
c0108603:	85 c0                	test   %eax,%eax
c0108605:	74 24                	je     c010862b <mm_destroy+0x39>
c0108607:	c7 44 24 0c 61 f6 10 	movl   $0xc010f661,0xc(%esp)
c010860e:	c0 
c010860f:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c0108616:	c0 
c0108617:	c7 44 24 04 94 00 00 	movl   $0x94,0x4(%esp)
c010861e:	00 
c010861f:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c0108626:	e8 a8 87 ff ff       	call   c0100dd3 <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c010862b:	8b 45 08             	mov    0x8(%ebp),%eax
c010862e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c0108631:	eb 36                	jmp    c0108669 <mm_destroy+0x77>
c0108633:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108636:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0108639:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010863c:	8b 40 04             	mov    0x4(%eax),%eax
c010863f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0108642:	8b 12                	mov    (%edx),%edx
c0108644:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0108647:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010864a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010864d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108650:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0108653:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108656:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0108659:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma
c010865b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010865e:	83 e8 10             	sub    $0x10,%eax
c0108661:	89 04 24             	mov    %eax,(%esp)
c0108664:	e8 5b c9 ff ff       	call   c0104fc4 <kfree>
c0108669:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010866c:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010866f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108672:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c0108675:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108678:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010867b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010867e:	75 b3                	jne    c0108633 <mm_destroy+0x41>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma
    }
    kfree(mm); //kfree mm
c0108680:	8b 45 08             	mov    0x8(%ebp),%eax
c0108683:	89 04 24             	mov    %eax,(%esp)
c0108686:	e8 39 c9 ff ff       	call   c0104fc4 <kfree>
    mm=NULL;
c010868b:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c0108692:	c9                   	leave  
c0108693:	c3                   	ret    

c0108694 <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c0108694:	55                   	push   %ebp
c0108695:	89 e5                	mov    %esp,%ebp
c0108697:	83 ec 38             	sub    $0x38,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c010869a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010869d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01086a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01086a3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01086a8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01086ab:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c01086b2:	8b 45 10             	mov    0x10(%ebp),%eax
c01086b5:	8b 55 0c             	mov    0xc(%ebp),%edx
c01086b8:	01 c2                	add    %eax,%edx
c01086ba:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01086bd:	01 d0                	add    %edx,%eax
c01086bf:	83 e8 01             	sub    $0x1,%eax
c01086c2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01086c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01086c8:	ba 00 00 00 00       	mov    $0x0,%edx
c01086cd:	f7 75 e8             	divl   -0x18(%ebp)
c01086d0:	89 d0                	mov    %edx,%eax
c01086d2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01086d5:	29 c2                	sub    %eax,%edx
c01086d7:	89 d0                	mov    %edx,%eax
c01086d9:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c01086dc:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c01086e3:	76 11                	jbe    c01086f6 <mm_map+0x62>
c01086e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01086e8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01086eb:	73 09                	jae    c01086f6 <mm_map+0x62>
c01086ed:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c01086f4:	76 0a                	jbe    c0108700 <mm_map+0x6c>
        return -E_INVAL;
c01086f6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01086fb:	e9 ae 00 00 00       	jmp    c01087ae <mm_map+0x11a>
    }

    assert(mm != NULL);
c0108700:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108704:	75 24                	jne    c010872a <mm_map+0x96>
c0108706:	c7 44 24 0c 73 f6 10 	movl   $0xc010f673,0xc(%esp)
c010870d:	c0 
c010870e:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c0108715:	c0 
c0108716:	c7 44 24 04 a7 00 00 	movl   $0xa7,0x4(%esp)
c010871d:	00 
c010871e:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c0108725:	e8 a9 86 ff ff       	call   c0100dd3 <__panic>

    int ret = -E_INVAL;
c010872a:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0108731:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108734:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108738:	8b 45 08             	mov    0x8(%ebp),%eax
c010873b:	89 04 24             	mov    %eax,(%esp)
c010873e:	e8 2a fc ff ff       	call   c010836d <find_vma>
c0108743:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108746:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010874a:	74 0d                	je     c0108759 <mm_map+0xc5>
c010874c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010874f:	8b 40 04             	mov    0x4(%eax),%eax
c0108752:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108755:	73 02                	jae    c0108759 <mm_map+0xc5>
        goto out;
c0108757:	eb 52                	jmp    c01087ab <mm_map+0x117>
    }
    ret = -E_NO_MEM;
c0108759:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c0108760:	8b 45 14             	mov    0x14(%ebp),%eax
c0108763:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108767:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010876a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010876e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108771:	89 04 24             	mov    %eax,(%esp)
c0108774:	e8 b9 fb ff ff       	call   c0108332 <vma_create>
c0108779:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010877c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108780:	75 02                	jne    c0108784 <mm_map+0xf0>
        goto out;
c0108782:	eb 27                	jmp    c01087ab <mm_map+0x117>
    }
    insert_vma_struct(mm, vma);
c0108784:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108787:	89 44 24 04          	mov    %eax,0x4(%esp)
c010878b:	8b 45 08             	mov    0x8(%ebp),%eax
c010878e:	89 04 24             	mov    %eax,(%esp)
c0108791:	e8 2c fd ff ff       	call   c01084c2 <insert_vma_struct>
    if (vma_store != NULL) {
c0108796:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010879a:	74 08                	je     c01087a4 <mm_map+0x110>
        *vma_store = vma;
c010879c:	8b 45 18             	mov    0x18(%ebp),%eax
c010879f:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01087a2:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c01087a4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

out:
    return ret;
c01087ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01087ae:	c9                   	leave  
c01087af:	c3                   	ret    

c01087b0 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c01087b0:	55                   	push   %ebp
c01087b1:	89 e5                	mov    %esp,%ebp
c01087b3:	56                   	push   %esi
c01087b4:	53                   	push   %ebx
c01087b5:	83 ec 40             	sub    $0x40,%esp
    assert(to != NULL && from != NULL);
c01087b8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01087bc:	74 06                	je     c01087c4 <dup_mmap+0x14>
c01087be:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01087c2:	75 24                	jne    c01087e8 <dup_mmap+0x38>
c01087c4:	c7 44 24 0c 7e f6 10 	movl   $0xc010f67e,0xc(%esp)
c01087cb:	c0 
c01087cc:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c01087d3:	c0 
c01087d4:	c7 44 24 04 c0 00 00 	movl   $0xc0,0x4(%esp)
c01087db:	00 
c01087dc:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c01087e3:	e8 eb 85 ff ff       	call   c0100dd3 <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c01087e8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01087eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01087ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01087f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c01087f4:	e9 92 00 00 00       	jmp    c010888b <dup_mmap+0xdb>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c01087f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01087fc:	83 e8 10             	sub    $0x10,%eax
c01087ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0108802:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108805:	8b 48 0c             	mov    0xc(%eax),%ecx
c0108808:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010880b:	8b 50 08             	mov    0x8(%eax),%edx
c010880e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108811:	8b 40 04             	mov    0x4(%eax),%eax
c0108814:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108818:	89 54 24 04          	mov    %edx,0x4(%esp)
c010881c:	89 04 24             	mov    %eax,(%esp)
c010881f:	e8 0e fb ff ff       	call   c0108332 <vma_create>
c0108824:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c0108827:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010882b:	75 07                	jne    c0108834 <dup_mmap+0x84>
            return -E_NO_MEM;
c010882d:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0108832:	eb 76                	jmp    c01088aa <dup_mmap+0xfa>
        }

        insert_vma_struct(to, nvma);
c0108834:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108837:	89 44 24 04          	mov    %eax,0x4(%esp)
c010883b:	8b 45 08             	mov    0x8(%ebp),%eax
c010883e:	89 04 24             	mov    %eax,(%esp)
c0108841:	e8 7c fc ff ff       	call   c01084c2 <insert_vma_struct>

        bool share = 0;
c0108846:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c010884d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108850:	8b 58 08             	mov    0x8(%eax),%ebx
c0108853:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108856:	8b 48 04             	mov    0x4(%eax),%ecx
c0108859:	8b 45 0c             	mov    0xc(%ebp),%eax
c010885c:	8b 50 0c             	mov    0xc(%eax),%edx
c010885f:	8b 45 08             	mov    0x8(%ebp),%eax
c0108862:	8b 40 0c             	mov    0xc(%eax),%eax
c0108865:	8b 75 e4             	mov    -0x1c(%ebp),%esi
c0108868:	89 74 24 10          	mov    %esi,0x10(%esp)
c010886c:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c0108870:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c0108874:	89 54 24 04          	mov    %edx,0x4(%esp)
c0108878:	89 04 24             	mov    %eax,(%esp)
c010887b:	e8 05 d7 ff ff       	call   c0105f85 <copy_range>
c0108880:	85 c0                	test   %eax,%eax
c0108882:	74 07                	je     c010888b <dup_mmap+0xdb>
            return -E_NO_MEM;
c0108884:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0108889:	eb 1f                	jmp    c01088aa <dup_mmap+0xfa>
c010888b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010888e:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0108891:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108894:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c0108896:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108899:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010889c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010889f:	0f 85 54 ff ff ff    	jne    c01087f9 <dup_mmap+0x49>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c01088a5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01088aa:	83 c4 40             	add    $0x40,%esp
c01088ad:	5b                   	pop    %ebx
c01088ae:	5e                   	pop    %esi
c01088af:	5d                   	pop    %ebp
c01088b0:	c3                   	ret    

c01088b1 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c01088b1:	55                   	push   %ebp
c01088b2:	89 e5                	mov    %esp,%ebp
c01088b4:	83 ec 38             	sub    $0x38,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c01088b7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01088bb:	74 0f                	je     c01088cc <exit_mmap+0x1b>
c01088bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01088c0:	89 04 24             	mov    %eax,(%esp)
c01088c3:	e8 4f f9 ff ff       	call   c0108217 <mm_count>
c01088c8:	85 c0                	test   %eax,%eax
c01088ca:	74 24                	je     c01088f0 <exit_mmap+0x3f>
c01088cc:	c7 44 24 0c 9c f6 10 	movl   $0xc010f69c,0xc(%esp)
c01088d3:	c0 
c01088d4:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c01088db:	c0 
c01088dc:	c7 44 24 04 d6 00 00 	movl   $0xd6,0x4(%esp)
c01088e3:	00 
c01088e4:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c01088eb:	e8 e3 84 ff ff       	call   c0100dd3 <__panic>
    pde_t *pgdir = mm->pgdir;
c01088f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01088f3:	8b 40 0c             	mov    0xc(%eax),%eax
c01088f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c01088f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01088fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01088ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108902:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0108905:	eb 28                	jmp    c010892f <exit_mmap+0x7e>
        struct vma_struct *vma = le2vma(le, list_link);
c0108907:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010890a:	83 e8 10             	sub    $0x10,%eax
c010890d:	89 45 e8             	mov    %eax,-0x18(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c0108910:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108913:	8b 50 08             	mov    0x8(%eax),%edx
c0108916:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108919:	8b 40 04             	mov    0x4(%eax),%eax
c010891c:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108920:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108924:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108927:	89 04 24             	mov    %eax,(%esp)
c010892a:	e8 5b d4 ff ff       	call   c0105d8a <unmap_range>
c010892f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108932:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108935:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108938:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c010893b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010893e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108941:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108944:	75 c1                	jne    c0108907 <exit_mmap+0x56>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0108946:	eb 28                	jmp    c0108970 <exit_mmap+0xbf>
        struct vma_struct *vma = le2vma(le, list_link);
c0108948:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010894b:	83 e8 10             	sub    $0x10,%eax
c010894e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c0108951:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108954:	8b 50 08             	mov    0x8(%eax),%edx
c0108957:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010895a:	8b 40 04             	mov    0x4(%eax),%eax
c010895d:	89 54 24 08          	mov    %edx,0x8(%esp)
c0108961:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108965:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108968:	89 04 24             	mov    %eax,(%esp)
c010896b:	e8 0e d5 ff ff       	call   c0105e7e <exit_range>
c0108970:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108973:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108976:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108979:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c010897c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010897f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108982:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0108985:	75 c1                	jne    c0108948 <exit_mmap+0x97>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c0108987:	c9                   	leave  
c0108988:	c3                   	ret    

c0108989 <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c0108989:	55                   	push   %ebp
c010898a:	89 e5                	mov    %esp,%ebp
c010898c:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c010898f:	8b 45 10             	mov    0x10(%ebp),%eax
c0108992:	8b 55 18             	mov    0x18(%ebp),%edx
c0108995:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108999:	8b 55 14             	mov    0x14(%ebp),%edx
c010899c:	89 54 24 08          	mov    %edx,0x8(%esp)
c01089a0:	89 44 24 04          	mov    %eax,0x4(%esp)
c01089a4:	8b 45 08             	mov    0x8(%ebp),%eax
c01089a7:	89 04 24             	mov    %eax,(%esp)
c01089aa:	e8 7d 09 00 00       	call   c010932c <user_mem_check>
c01089af:	85 c0                	test   %eax,%eax
c01089b1:	75 07                	jne    c01089ba <copy_from_user+0x31>
        return 0;
c01089b3:	b8 00 00 00 00       	mov    $0x0,%eax
c01089b8:	eb 1e                	jmp    c01089d8 <copy_from_user+0x4f>
    }
    memcpy(dst, src, len);
c01089ba:	8b 45 14             	mov    0x14(%ebp),%eax
c01089bd:	89 44 24 08          	mov    %eax,0x8(%esp)
c01089c1:	8b 45 10             	mov    0x10(%ebp),%eax
c01089c4:	89 44 24 04          	mov    %eax,0x4(%esp)
c01089c8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01089cb:	89 04 24             	mov    %eax,(%esp)
c01089ce:	e8 75 50 00 00       	call   c010da48 <memcpy>
    return 1;
c01089d3:	b8 01 00 00 00       	mov    $0x1,%eax
}
c01089d8:	c9                   	leave  
c01089d9:	c3                   	ret    

c01089da <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c01089da:	55                   	push   %ebp
c01089db:	89 e5                	mov    %esp,%ebp
c01089dd:	83 ec 18             	sub    $0x18,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c01089e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01089e3:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01089ea:	00 
c01089eb:	8b 55 14             	mov    0x14(%ebp),%edx
c01089ee:	89 54 24 08          	mov    %edx,0x8(%esp)
c01089f2:	89 44 24 04          	mov    %eax,0x4(%esp)
c01089f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01089f9:	89 04 24             	mov    %eax,(%esp)
c01089fc:	e8 2b 09 00 00       	call   c010932c <user_mem_check>
c0108a01:	85 c0                	test   %eax,%eax
c0108a03:	75 07                	jne    c0108a0c <copy_to_user+0x32>
        return 0;
c0108a05:	b8 00 00 00 00       	mov    $0x0,%eax
c0108a0a:	eb 1e                	jmp    c0108a2a <copy_to_user+0x50>
    }
    memcpy(dst, src, len);
c0108a0c:	8b 45 14             	mov    0x14(%ebp),%eax
c0108a0f:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108a13:	8b 45 10             	mov    0x10(%ebp),%eax
c0108a16:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108a1a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108a1d:	89 04 24             	mov    %eax,(%esp)
c0108a20:	e8 23 50 00 00       	call   c010da48 <memcpy>
    return 1;
c0108a25:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0108a2a:	c9                   	leave  
c0108a2b:	c3                   	ret    

c0108a2c <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0108a2c:	55                   	push   %ebp
c0108a2d:	89 e5                	mov    %esp,%ebp
c0108a2f:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0108a32:	e8 02 00 00 00       	call   c0108a39 <check_vmm>
}
c0108a37:	c9                   	leave  
c0108a38:	c3                   	ret    

c0108a39 <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c0108a39:	55                   	push   %ebp
c0108a3a:	89 e5                	mov    %esp,%ebp
c0108a3c:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108a3f:	e8 77 ca ff ff       	call   c01054bb <nr_free_pages>
c0108a44:	89 45 f4             	mov    %eax,-0xc(%ebp)

    check_vma_struct();
c0108a47:	e8 13 00 00 00       	call   c0108a5f <check_vma_struct>
    check_pgfault();
c0108a4c:	e8 a7 04 00 00       	call   c0108ef8 <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c0108a51:	c7 04 24 bc f6 10 c0 	movl   $0xc010f6bc,(%esp)
c0108a58:	e8 fb 78 ff ff       	call   c0100358 <cprintf>
}
c0108a5d:	c9                   	leave  
c0108a5e:	c3                   	ret    

c0108a5f <check_vma_struct>:

static void
check_vma_struct(void) {
c0108a5f:	55                   	push   %ebp
c0108a60:	89 e5                	mov    %esp,%ebp
c0108a62:	83 ec 68             	sub    $0x68,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108a65:	e8 51 ca ff ff       	call   c01054bb <nr_free_pages>
c0108a6a:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0108a6d:	e8 1b f8 ff ff       	call   c010828d <mm_create>
c0108a72:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0108a75:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0108a79:	75 24                	jne    c0108a9f <check_vma_struct+0x40>
c0108a7b:	c7 44 24 0c 73 f6 10 	movl   $0xc010f673,0xc(%esp)
c0108a82:	c0 
c0108a83:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c0108a8a:	c0 
c0108a8b:	c7 44 24 04 0c 01 00 	movl   $0x10c,0x4(%esp)
c0108a92:	00 
c0108a93:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c0108a9a:	e8 34 83 ff ff       	call   c0100dd3 <__panic>

    int step1 = 10, step2 = step1 * 10;
c0108a9f:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c0108aa6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0108aa9:	89 d0                	mov    %edx,%eax
c0108aab:	c1 e0 02             	shl    $0x2,%eax
c0108aae:	01 d0                	add    %edx,%eax
c0108ab0:	01 c0                	add    %eax,%eax
c0108ab2:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c0108ab5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108ab8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108abb:	eb 70                	jmp    c0108b2d <check_vma_struct+0xce>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0108abd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108ac0:	89 d0                	mov    %edx,%eax
c0108ac2:	c1 e0 02             	shl    $0x2,%eax
c0108ac5:	01 d0                	add    %edx,%eax
c0108ac7:	83 c0 02             	add    $0x2,%eax
c0108aca:	89 c1                	mov    %eax,%ecx
c0108acc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108acf:	89 d0                	mov    %edx,%eax
c0108ad1:	c1 e0 02             	shl    $0x2,%eax
c0108ad4:	01 d0                	add    %edx,%eax
c0108ad6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108add:	00 
c0108ade:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0108ae2:	89 04 24             	mov    %eax,(%esp)
c0108ae5:	e8 48 f8 ff ff       	call   c0108332 <vma_create>
c0108aea:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c0108aed:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0108af1:	75 24                	jne    c0108b17 <check_vma_struct+0xb8>
c0108af3:	c7 44 24 0c d4 f6 10 	movl   $0xc010f6d4,0xc(%esp)
c0108afa:	c0 
c0108afb:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c0108b02:	c0 
c0108b03:	c7 44 24 04 13 01 00 	movl   $0x113,0x4(%esp)
c0108b0a:	00 
c0108b0b:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c0108b12:	e8 bc 82 ff ff       	call   c0100dd3 <__panic>
        insert_vma_struct(mm, vma);
c0108b17:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108b1a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108b1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108b21:	89 04 24             	mov    %eax,(%esp)
c0108b24:	e8 99 f9 ff ff       	call   c01084c2 <insert_vma_struct>
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c0108b29:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108b2d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108b31:	7f 8a                	jg     c0108abd <check_vma_struct+0x5e>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0108b33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108b36:	83 c0 01             	add    $0x1,%eax
c0108b39:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108b3c:	eb 70                	jmp    c0108bae <check_vma_struct+0x14f>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c0108b3e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108b41:	89 d0                	mov    %edx,%eax
c0108b43:	c1 e0 02             	shl    $0x2,%eax
c0108b46:	01 d0                	add    %edx,%eax
c0108b48:	83 c0 02             	add    $0x2,%eax
c0108b4b:	89 c1                	mov    %eax,%ecx
c0108b4d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108b50:	89 d0                	mov    %edx,%eax
c0108b52:	c1 e0 02             	shl    $0x2,%eax
c0108b55:	01 d0                	add    %edx,%eax
c0108b57:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0108b5e:	00 
c0108b5f:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c0108b63:	89 04 24             	mov    %eax,(%esp)
c0108b66:	e8 c7 f7 ff ff       	call   c0108332 <vma_create>
c0108b6b:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0108b6e:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0108b72:	75 24                	jne    c0108b98 <check_vma_struct+0x139>
c0108b74:	c7 44 24 0c d4 f6 10 	movl   $0xc010f6d4,0xc(%esp)
c0108b7b:	c0 
c0108b7c:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c0108b83:	c0 
c0108b84:	c7 44 24 04 19 01 00 	movl   $0x119,0x4(%esp)
c0108b8b:	00 
c0108b8c:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c0108b93:	e8 3b 82 ff ff       	call   c0100dd3 <__panic>
        insert_vma_struct(mm, vma);
c0108b98:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0108b9b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108b9f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ba2:	89 04 24             	mov    %eax,(%esp)
c0108ba5:	e8 18 f9 ff ff       	call   c01084c2 <insert_vma_struct>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0108baa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108bae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108bb1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108bb4:	7e 88                	jle    c0108b3e <check_vma_struct+0xdf>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c0108bb6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108bb9:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0108bbc:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0108bbf:	8b 40 04             	mov    0x4(%eax),%eax
c0108bc2:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c0108bc5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0108bcc:	e9 97 00 00 00       	jmp    c0108c68 <check_vma_struct+0x209>
        assert(le != &(mm->mmap_list));
c0108bd1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108bd4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108bd7:	75 24                	jne    c0108bfd <check_vma_struct+0x19e>
c0108bd9:	c7 44 24 0c e0 f6 10 	movl   $0xc010f6e0,0xc(%esp)
c0108be0:	c0 
c0108be1:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c0108be8:	c0 
c0108be9:	c7 44 24 04 20 01 00 	movl   $0x120,0x4(%esp)
c0108bf0:	00 
c0108bf1:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c0108bf8:	e8 d6 81 ff ff       	call   c0100dd3 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c0108bfd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108c00:	83 e8 10             	sub    $0x10,%eax
c0108c03:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c0108c06:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108c09:	8b 48 04             	mov    0x4(%eax),%ecx
c0108c0c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108c0f:	89 d0                	mov    %edx,%eax
c0108c11:	c1 e0 02             	shl    $0x2,%eax
c0108c14:	01 d0                	add    %edx,%eax
c0108c16:	39 c1                	cmp    %eax,%ecx
c0108c18:	75 17                	jne    c0108c31 <check_vma_struct+0x1d2>
c0108c1a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0108c1d:	8b 48 08             	mov    0x8(%eax),%ecx
c0108c20:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108c23:	89 d0                	mov    %edx,%eax
c0108c25:	c1 e0 02             	shl    $0x2,%eax
c0108c28:	01 d0                	add    %edx,%eax
c0108c2a:	83 c0 02             	add    $0x2,%eax
c0108c2d:	39 c1                	cmp    %eax,%ecx
c0108c2f:	74 24                	je     c0108c55 <check_vma_struct+0x1f6>
c0108c31:	c7 44 24 0c f8 f6 10 	movl   $0xc010f6f8,0xc(%esp)
c0108c38:	c0 
c0108c39:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c0108c40:	c0 
c0108c41:	c7 44 24 04 22 01 00 	movl   $0x122,0x4(%esp)
c0108c48:	00 
c0108c49:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c0108c50:	e8 7e 81 ff ff       	call   c0100dd3 <__panic>
c0108c55:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108c58:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c0108c5b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0108c5e:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0108c61:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c0108c64:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108c68:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c6b:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108c6e:	0f 8e 5d ff ff ff    	jle    c0108bd1 <check_vma_struct+0x172>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108c74:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0108c7b:	e9 cd 01 00 00       	jmp    c0108e4d <check_vma_struct+0x3ee>
        struct vma_struct *vma1 = find_vma(mm, i);
c0108c80:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108c83:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108c87:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108c8a:	89 04 24             	mov    %eax,(%esp)
c0108c8d:	e8 db f6 ff ff       	call   c010836d <find_vma>
c0108c92:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(vma1 != NULL);
c0108c95:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0108c99:	75 24                	jne    c0108cbf <check_vma_struct+0x260>
c0108c9b:	c7 44 24 0c 2d f7 10 	movl   $0xc010f72d,0xc(%esp)
c0108ca2:	c0 
c0108ca3:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c0108caa:	c0 
c0108cab:	c7 44 24 04 28 01 00 	movl   $0x128,0x4(%esp)
c0108cb2:	00 
c0108cb3:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c0108cba:	e8 14 81 ff ff       	call   c0100dd3 <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c0108cbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108cc2:	83 c0 01             	add    $0x1,%eax
c0108cc5:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108cc9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ccc:	89 04 24             	mov    %eax,(%esp)
c0108ccf:	e8 99 f6 ff ff       	call   c010836d <find_vma>
c0108cd4:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma2 != NULL);
c0108cd7:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0108cdb:	75 24                	jne    c0108d01 <check_vma_struct+0x2a2>
c0108cdd:	c7 44 24 0c 3a f7 10 	movl   $0xc010f73a,0xc(%esp)
c0108ce4:	c0 
c0108ce5:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c0108cec:	c0 
c0108ced:	c7 44 24 04 2a 01 00 	movl   $0x12a,0x4(%esp)
c0108cf4:	00 
c0108cf5:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c0108cfc:	e8 d2 80 ff ff       	call   c0100dd3 <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c0108d01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d04:	83 c0 02             	add    $0x2,%eax
c0108d07:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d0b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d0e:	89 04 24             	mov    %eax,(%esp)
c0108d11:	e8 57 f6 ff ff       	call   c010836d <find_vma>
c0108d16:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma3 == NULL);
c0108d19:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c0108d1d:	74 24                	je     c0108d43 <check_vma_struct+0x2e4>
c0108d1f:	c7 44 24 0c 47 f7 10 	movl   $0xc010f747,0xc(%esp)
c0108d26:	c0 
c0108d27:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c0108d2e:	c0 
c0108d2f:	c7 44 24 04 2c 01 00 	movl   $0x12c,0x4(%esp)
c0108d36:	00 
c0108d37:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c0108d3e:	e8 90 80 ff ff       	call   c0100dd3 <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c0108d43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d46:	83 c0 03             	add    $0x3,%eax
c0108d49:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d4d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d50:	89 04 24             	mov    %eax,(%esp)
c0108d53:	e8 15 f6 ff ff       	call   c010836d <find_vma>
c0108d58:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma4 == NULL);
c0108d5b:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0108d5f:	74 24                	je     c0108d85 <check_vma_struct+0x326>
c0108d61:	c7 44 24 0c 54 f7 10 	movl   $0xc010f754,0xc(%esp)
c0108d68:	c0 
c0108d69:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c0108d70:	c0 
c0108d71:	c7 44 24 04 2e 01 00 	movl   $0x12e,0x4(%esp)
c0108d78:	00 
c0108d79:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c0108d80:	e8 4e 80 ff ff       	call   c0100dd3 <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0108d85:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108d88:	83 c0 04             	add    $0x4,%eax
c0108d8b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108d8f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108d92:	89 04 24             	mov    %eax,(%esp)
c0108d95:	e8 d3 f5 ff ff       	call   c010836d <find_vma>
c0108d9a:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma5 == NULL);
c0108d9d:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0108da1:	74 24                	je     c0108dc7 <check_vma_struct+0x368>
c0108da3:	c7 44 24 0c 61 f7 10 	movl   $0xc010f761,0xc(%esp)
c0108daa:	c0 
c0108dab:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c0108db2:	c0 
c0108db3:	c7 44 24 04 30 01 00 	movl   $0x130,0x4(%esp)
c0108dba:	00 
c0108dbb:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c0108dc2:	e8 0c 80 ff ff       	call   c0100dd3 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0108dc7:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108dca:	8b 50 04             	mov    0x4(%eax),%edx
c0108dcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108dd0:	39 c2                	cmp    %eax,%edx
c0108dd2:	75 10                	jne    c0108de4 <check_vma_struct+0x385>
c0108dd4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0108dd7:	8b 50 08             	mov    0x8(%eax),%edx
c0108dda:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ddd:	83 c0 02             	add    $0x2,%eax
c0108de0:	39 c2                	cmp    %eax,%edx
c0108de2:	74 24                	je     c0108e08 <check_vma_struct+0x3a9>
c0108de4:	c7 44 24 0c 70 f7 10 	movl   $0xc010f770,0xc(%esp)
c0108deb:	c0 
c0108dec:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c0108df3:	c0 
c0108df4:	c7 44 24 04 32 01 00 	movl   $0x132,0x4(%esp)
c0108dfb:	00 
c0108dfc:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c0108e03:	e8 cb 7f ff ff       	call   c0100dd3 <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c0108e08:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108e0b:	8b 50 04             	mov    0x4(%eax),%edx
c0108e0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e11:	39 c2                	cmp    %eax,%edx
c0108e13:	75 10                	jne    c0108e25 <check_vma_struct+0x3c6>
c0108e15:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108e18:	8b 50 08             	mov    0x8(%eax),%edx
c0108e1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e1e:	83 c0 02             	add    $0x2,%eax
c0108e21:	39 c2                	cmp    %eax,%edx
c0108e23:	74 24                	je     c0108e49 <check_vma_struct+0x3ea>
c0108e25:	c7 44 24 0c a0 f7 10 	movl   $0xc010f7a0,0xc(%esp)
c0108e2c:	c0 
c0108e2d:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c0108e34:	c0 
c0108e35:	c7 44 24 04 33 01 00 	movl   $0x133,0x4(%esp)
c0108e3c:	00 
c0108e3d:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c0108e44:	e8 8a 7f ff ff       	call   c0100dd3 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c0108e49:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c0108e4d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108e50:	89 d0                	mov    %edx,%eax
c0108e52:	c1 e0 02             	shl    $0x2,%eax
c0108e55:	01 d0                	add    %edx,%eax
c0108e57:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0108e5a:	0f 8d 20 fe ff ff    	jge    c0108c80 <check_vma_struct+0x221>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108e60:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c0108e67:	eb 70                	jmp    c0108ed9 <check_vma_struct+0x47a>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c0108e69:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e6c:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e70:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108e73:	89 04 24             	mov    %eax,(%esp)
c0108e76:	e8 f2 f4 ff ff       	call   c010836d <find_vma>
c0108e7b:	89 45 bc             	mov    %eax,-0x44(%ebp)
        if (vma_below_5 != NULL ) {
c0108e7e:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108e82:	74 27                	je     c0108eab <check_vma_struct+0x44c>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end);
c0108e84:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108e87:	8b 50 08             	mov    0x8(%eax),%edx
c0108e8a:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0108e8d:	8b 40 04             	mov    0x4(%eax),%eax
c0108e90:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0108e94:	89 44 24 08          	mov    %eax,0x8(%esp)
c0108e98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108e9b:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108e9f:	c7 04 24 d0 f7 10 c0 	movl   $0xc010f7d0,(%esp)
c0108ea6:	e8 ad 74 ff ff       	call   c0100358 <cprintf>
        }
        assert(vma_below_5 == NULL);
c0108eab:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c0108eaf:	74 24                	je     c0108ed5 <check_vma_struct+0x476>
c0108eb1:	c7 44 24 0c f5 f7 10 	movl   $0xc010f7f5,0xc(%esp)
c0108eb8:	c0 
c0108eb9:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c0108ec0:	c0 
c0108ec1:	c7 44 24 04 3b 01 00 	movl   $0x13b,0x4(%esp)
c0108ec8:	00 
c0108ec9:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c0108ed0:	e8 fe 7e ff ff       	call   c0100dd3 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c0108ed5:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0108ed9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108edd:	79 8a                	jns    c0108e69 <check_vma_struct+0x40a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end);
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0108edf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ee2:	89 04 24             	mov    %eax,(%esp)
c0108ee5:	e8 08 f7 ff ff       	call   c01085f2 <mm_destroy>

    cprintf("check_vma_struct() succeeded!\n");
c0108eea:	c7 04 24 0c f8 10 c0 	movl   $0xc010f80c,(%esp)
c0108ef1:	e8 62 74 ff ff       	call   c0100358 <cprintf>
}
c0108ef6:	c9                   	leave  
c0108ef7:	c3                   	ret    

c0108ef8 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0108ef8:	55                   	push   %ebp
c0108ef9:	89 e5                	mov    %esp,%ebp
c0108efb:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0108efe:	e8 b8 c5 ff ff       	call   c01054bb <nr_free_pages>
c0108f03:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0108f06:	e8 82 f3 ff ff       	call   c010828d <mm_create>
c0108f0b:	a3 cc 55 1c c0       	mov    %eax,0xc01c55cc
    assert(check_mm_struct != NULL);
c0108f10:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c0108f15:	85 c0                	test   %eax,%eax
c0108f17:	75 24                	jne    c0108f3d <check_pgfault+0x45>
c0108f19:	c7 44 24 0c 2b f8 10 	movl   $0xc010f82b,0xc(%esp)
c0108f20:	c0 
c0108f21:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c0108f28:	c0 
c0108f29:	c7 44 24 04 4b 01 00 	movl   $0x14b,0x4(%esp)
c0108f30:	00 
c0108f31:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c0108f38:	e8 96 7e ff ff       	call   c0100dd3 <__panic>

    struct mm_struct *mm = check_mm_struct;
c0108f3d:	a1 cc 55 1c c0       	mov    0xc01c55cc,%eax
c0108f42:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c0108f45:	8b 15 a4 33 1c c0    	mov    0xc01c33a4,%edx
c0108f4b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108f4e:	89 50 0c             	mov    %edx,0xc(%eax)
c0108f51:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108f54:	8b 40 0c             	mov    0xc(%eax),%eax
c0108f57:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c0108f5a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0108f5d:	8b 00                	mov    (%eax),%eax
c0108f5f:	85 c0                	test   %eax,%eax
c0108f61:	74 24                	je     c0108f87 <check_pgfault+0x8f>
c0108f63:	c7 44 24 0c 43 f8 10 	movl   $0xc010f843,0xc(%esp)
c0108f6a:	c0 
c0108f6b:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c0108f72:	c0 
c0108f73:	c7 44 24 04 4f 01 00 	movl   $0x14f,0x4(%esp)
c0108f7a:	00 
c0108f7b:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c0108f82:	e8 4c 7e ff ff       	call   c0100dd3 <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c0108f87:	c7 44 24 08 02 00 00 	movl   $0x2,0x8(%esp)
c0108f8e:	00 
c0108f8f:	c7 44 24 04 00 00 40 	movl   $0x400000,0x4(%esp)
c0108f96:	00 
c0108f97:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c0108f9e:	e8 8f f3 ff ff       	call   c0108332 <vma_create>
c0108fa3:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0108fa6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0108faa:	75 24                	jne    c0108fd0 <check_pgfault+0xd8>
c0108fac:	c7 44 24 0c d4 f6 10 	movl   $0xc010f6d4,0xc(%esp)
c0108fb3:	c0 
c0108fb4:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c0108fbb:	c0 
c0108fbc:	c7 44 24 04 52 01 00 	movl   $0x152,0x4(%esp)
c0108fc3:	00 
c0108fc4:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c0108fcb:	e8 03 7e ff ff       	call   c0100dd3 <__panic>

    insert_vma_struct(mm, vma);
c0108fd0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108fd3:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108fd7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108fda:	89 04 24             	mov    %eax,(%esp)
c0108fdd:	e8 e0 f4 ff ff       	call   c01084c2 <insert_vma_struct>

    uintptr_t addr = 0x100;
c0108fe2:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c0108fe9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108fec:	89 44 24 04          	mov    %eax,0x4(%esp)
c0108ff0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108ff3:	89 04 24             	mov    %eax,(%esp)
c0108ff6:	e8 72 f3 ff ff       	call   c010836d <find_vma>
c0108ffb:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0108ffe:	74 24                	je     c0109024 <check_pgfault+0x12c>
c0109000:	c7 44 24 0c 51 f8 10 	movl   $0xc010f851,0xc(%esp)
c0109007:	c0 
c0109008:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c010900f:	c0 
c0109010:	c7 44 24 04 57 01 00 	movl   $0x157,0x4(%esp)
c0109017:	00 
c0109018:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c010901f:	e8 af 7d ff ff       	call   c0100dd3 <__panic>

    int i, sum = 0;
c0109024:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c010902b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109032:	eb 17                	jmp    c010904b <check_pgfault+0x153>
        *(char *)(addr + i) = i;
c0109034:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109037:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010903a:	01 d0                	add    %edx,%eax
c010903c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010903f:	88 10                	mov    %dl,(%eax)
        sum += i;
c0109041:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109044:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0109047:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010904b:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c010904f:	7e e3                	jle    c0109034 <check_pgfault+0x13c>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c0109051:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109058:	eb 15                	jmp    c010906f <check_pgfault+0x177>
        sum -= *(char *)(addr + i);
c010905a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010905d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109060:	01 d0                	add    %edx,%eax
c0109062:	0f b6 00             	movzbl (%eax),%eax
c0109065:	0f be c0             	movsbl %al,%eax
c0109068:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c010906b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010906f:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c0109073:	7e e5                	jle    c010905a <check_pgfault+0x162>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c0109075:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109079:	74 24                	je     c010909f <check_pgfault+0x1a7>
c010907b:	c7 44 24 0c 6b f8 10 	movl   $0xc010f86b,0xc(%esp)
c0109082:	c0 
c0109083:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c010908a:	c0 
c010908b:	c7 44 24 04 61 01 00 	movl   $0x161,0x4(%esp)
c0109092:	00 
c0109093:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c010909a:	e8 34 7d ff ff       	call   c0100dd3 <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c010909f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01090a2:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01090a5:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01090a8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01090ad:	89 44 24 04          	mov    %eax,0x4(%esp)
c01090b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01090b4:	89 04 24             	mov    %eax,(%esp)
c01090b7:	e8 ec d0 ff ff       	call   c01061a8 <page_remove>
    free_page(pde2page(pgdir[0]));
c01090bc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01090bf:	8b 00                	mov    (%eax),%eax
c01090c1:	89 04 24             	mov    %eax,(%esp)
c01090c4:	e8 ac f1 ff ff       	call   c0108275 <pde2page>
c01090c9:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c01090d0:	00 
c01090d1:	89 04 24             	mov    %eax,(%esp)
c01090d4:	e8 b0 c3 ff ff       	call   c0105489 <free_pages>
    pgdir[0] = 0;
c01090d9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01090dc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c01090e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01090e5:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c01090ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01090ef:	89 04 24             	mov    %eax,(%esp)
c01090f2:	e8 fb f4 ff ff       	call   c01085f2 <mm_destroy>
    check_mm_struct = NULL;
c01090f7:	c7 05 cc 55 1c c0 00 	movl   $0x0,0xc01c55cc
c01090fe:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0109101:	e8 b5 c3 ff ff       	call   c01054bb <nr_free_pages>
c0109106:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0109109:	74 24                	je     c010912f <check_pgfault+0x237>
c010910b:	c7 44 24 0c 74 f8 10 	movl   $0xc010f874,0xc(%esp)
c0109112:	c0 
c0109113:	c7 44 24 08 e3 f5 10 	movl   $0xc010f5e3,0x8(%esp)
c010911a:	c0 
c010911b:	c7 44 24 04 6b 01 00 	movl   $0x16b,0x4(%esp)
c0109122:	00 
c0109123:	c7 04 24 f8 f5 10 c0 	movl   $0xc010f5f8,(%esp)
c010912a:	e8 a4 7c ff ff       	call   c0100dd3 <__panic>

    cprintf("check_pgfault() succeeded!\n");
c010912f:	c7 04 24 9b f8 10 c0 	movl   $0xc010f89b,(%esp)
c0109136:	e8 1d 72 ff ff       	call   c0100358 <cprintf>
}
c010913b:	c9                   	leave  
c010913c:	c3                   	ret    

c010913d <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c010913d:	55                   	push   %ebp
c010913e:	89 e5                	mov    %esp,%ebp
c0109140:	83 ec 38             	sub    $0x38,%esp
    int ret = -E_INVAL;
c0109143:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c010914a:	8b 45 10             	mov    0x10(%ebp),%eax
c010914d:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109151:	8b 45 08             	mov    0x8(%ebp),%eax
c0109154:	89 04 24             	mov    %eax,(%esp)
c0109157:	e8 11 f2 ff ff       	call   c010836d <find_vma>
c010915c:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pgfault_num++;
c010915f:	a1 38 34 1c c0       	mov    0xc01c3438,%eax
c0109164:	83 c0 01             	add    $0x1,%eax
c0109167:	a3 38 34 1c c0       	mov    %eax,0xc01c3438
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c010916c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109170:	74 0b                	je     c010917d <do_pgfault+0x40>
c0109172:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109175:	8b 40 04             	mov    0x4(%eax),%eax
c0109178:	3b 45 10             	cmp    0x10(%ebp),%eax
c010917b:	76 18                	jbe    c0109195 <do_pgfault+0x58>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c010917d:	8b 45 10             	mov    0x10(%ebp),%eax
c0109180:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109184:	c7 04 24 b8 f8 10 c0 	movl   $0xc010f8b8,(%esp)
c010918b:	e8 c8 71 ff ff       	call   c0100358 <cprintf>
        goto failed;
c0109190:	e9 92 01 00 00       	jmp    c0109327 <do_pgfault+0x1ea>
    }
    //check the error_code
    switch (error_code & 3) {
c0109195:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109198:	83 e0 03             	and    $0x3,%eax
c010919b:	85 c0                	test   %eax,%eax
c010919d:	74 36                	je     c01091d5 <do_pgfault+0x98>
c010919f:	83 f8 01             	cmp    $0x1,%eax
c01091a2:	74 20                	je     c01091c4 <do_pgfault+0x87>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c01091a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01091a7:	8b 40 0c             	mov    0xc(%eax),%eax
c01091aa:	83 e0 02             	and    $0x2,%eax
c01091ad:	85 c0                	test   %eax,%eax
c01091af:	75 11                	jne    c01091c2 <do_pgfault+0x85>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c01091b1:	c7 04 24 e8 f8 10 c0 	movl   $0xc010f8e8,(%esp)
c01091b8:	e8 9b 71 ff ff       	call   c0100358 <cprintf>
            goto failed;
c01091bd:	e9 65 01 00 00       	jmp    c0109327 <do_pgfault+0x1ea>
        }
        break;
c01091c2:	eb 2f                	jmp    c01091f3 <do_pgfault+0xb6>
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c01091c4:	c7 04 24 48 f9 10 c0 	movl   $0xc010f948,(%esp)
c01091cb:	e8 88 71 ff ff       	call   c0100358 <cprintf>
        goto failed;
c01091d0:	e9 52 01 00 00       	jmp    c0109327 <do_pgfault+0x1ea>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c01091d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01091d8:	8b 40 0c             	mov    0xc(%eax),%eax
c01091db:	83 e0 05             	and    $0x5,%eax
c01091de:	85 c0                	test   %eax,%eax
c01091e0:	75 11                	jne    c01091f3 <do_pgfault+0xb6>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c01091e2:	c7 04 24 80 f9 10 c0 	movl   $0xc010f980,(%esp)
c01091e9:	e8 6a 71 ff ff       	call   c0100358 <cprintf>
            goto failed;
c01091ee:	e9 34 01 00 00       	jmp    c0109327 <do_pgfault+0x1ea>
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c01091f3:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c01091fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01091fd:	8b 40 0c             	mov    0xc(%eax),%eax
c0109200:	83 e0 02             	and    $0x2,%eax
c0109203:	85 c0                	test   %eax,%eax
c0109205:	74 04                	je     c010920b <do_pgfault+0xce>
        perm |= PTE_W;
c0109207:	83 4d f0 02          	orl    $0x2,-0x10(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c010920b:	8b 45 10             	mov    0x10(%ebp),%eax
c010920e:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109211:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0109214:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0109219:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c010921c:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0109223:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    * VARIABLES:
    *   mm->pgdir : the PDT of these vma
    *
    */
    /*LAB3 EXERCISE 1: 2014011381*/
    ptep = get_pte(mm->pgdir, addr, 1);          //(1) try to find a pte, if pte's PT(Page Table) isn't existed, then create a PT.
c010922a:	8b 45 08             	mov    0x8(%ebp),%eax
c010922d:	8b 40 0c             	mov    0xc(%eax),%eax
c0109230:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
c0109237:	00 
c0109238:	8b 55 10             	mov    0x10(%ebp),%edx
c010923b:	89 54 24 04          	mov    %edx,0x4(%esp)
c010923f:	89 04 24             	mov    %eax,(%esp)
c0109242:	e8 3e c9 ff ff       	call   c0105b85 <get_pte>
c0109247:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (!ptep)
c010924a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010924e:	75 05                	jne    c0109255 <do_pgfault+0x118>
        goto failed;
c0109250:	e9 d2 00 00 00       	jmp    c0109327 <do_pgfault+0x1ea>
    if (*ptep == 0) {
c0109255:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109258:	8b 00                	mov    (%eax),%eax
c010925a:	85 c0                	test   %eax,%eax
c010925c:	75 2f                	jne    c010928d <do_pgfault+0x150>
        //(2) if the phy addr isn't exist, then alloc a page & map the phy addr with logical addr
        struct Page *p = pgdir_alloc_page(mm->pgdir, addr, perm);
c010925e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109261:	8b 40 0c             	mov    0xc(%eax),%eax
c0109264:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109267:	89 54 24 08          	mov    %edx,0x8(%esp)
c010926b:	8b 55 10             	mov    0x10(%ebp),%edx
c010926e:	89 54 24 04          	mov    %edx,0x4(%esp)
c0109272:	89 04 24             	mov    %eax,(%esp)
c0109275:	e8 88 d0 ff ff       	call   c0106302 <pgdir_alloc_page>
c010927a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (!p)
c010927d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0109281:	75 05                	jne    c0109288 <do_pgfault+0x14b>
            goto failed;
c0109283:	e9 9f 00 00 00       	jmp    c0109327 <do_pgfault+0x1ea>
c0109288:	e9 93 00 00 00       	jmp    c0109320 <do_pgfault+0x1e3>
        *    swap_in(mm, addr, &page) : alloc a memory page, then according to the swap entry in PTE for addr,
        *                               find the addr of disk page, read the content of disk page into this memroy page
        *    page_insert ： build the map of phy addr of an Page with the linear addr la
        *    swap_map_swappable ： set the page swappable
        */
        if(swap_init_ok) {
c010928d:	a1 2c 34 1c c0       	mov    0xc01c342c,%eax
c0109292:	85 c0                	test   %eax,%eax
c0109294:	74 73                	je     c0109309 <do_pgfault+0x1cc>
            struct Page *page = NULL;
c0109296:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
            if (swap_in(mm, addr, &page))               //(1）According to the mm AND addr, try to load the content of right disk page
c010929d:	8d 45 dc             	lea    -0x24(%ebp),%eax
c01092a0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01092a4:	8b 45 10             	mov    0x10(%ebp),%eax
c01092a7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01092ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01092ae:	89 04 24             	mov    %eax,(%esp)
c01092b1:	e8 f8 e0 ff ff       	call   c01073ae <swap_in>
c01092b6:	85 c0                	test   %eax,%eax
c01092b8:	75 6d                	jne    c0109327 <do_pgfault+0x1ea>
                                                        //    into the memory which page managed.
                goto failed;
            page_insert(mm->pgdir, page, addr, perm);   //(2) According to the mm, addr AND page, setup the map of phy addr <---> logical addr
c01092ba:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01092bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01092c0:	8b 40 0c             	mov    0xc(%eax),%eax
c01092c3:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c01092c6:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c01092ca:	8b 4d 10             	mov    0x10(%ebp),%ecx
c01092cd:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c01092d1:	89 54 24 04          	mov    %edx,0x4(%esp)
c01092d5:	89 04 24             	mov    %eax,(%esp)
c01092d8:	e8 0f cf ff ff       	call   c01061ec <page_insert>
            swap_map_swappable(mm, addr, page, 1);      //(3) make the page swappable.
c01092dd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01092e0:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c01092e7:	00 
c01092e8:	89 44 24 08          	mov    %eax,0x8(%esp)
c01092ec:	8b 45 10             	mov    0x10(%ebp),%eax
c01092ef:	89 44 24 04          	mov    %eax,0x4(%esp)
c01092f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01092f6:	89 04 24             	mov    %eax,(%esp)
c01092f9:	e8 e7 de ff ff       	call   c01071e5 <swap_map_swappable>
            page->pra_vaddr = addr;
c01092fe:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109301:	8b 55 10             	mov    0x10(%ebp),%edx
c0109304:	89 50 1c             	mov    %edx,0x1c(%eax)
c0109307:	eb 17                	jmp    c0109320 <do_pgfault+0x1e3>
        }
        else {
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
c0109309:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010930c:	8b 00                	mov    (%eax),%eax
c010930e:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109312:	c7 04 24 e4 f9 10 c0 	movl   $0xc010f9e4,(%esp)
c0109319:	e8 3a 70 ff ff       	call   c0100358 <cprintf>
            goto failed;
c010931e:	eb 07                	jmp    c0109327 <do_pgfault+0x1ea>
                goto failed;
            }
        */
    }

   ret = 0;
c0109320:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0109327:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010932a:	c9                   	leave  
c010932b:	c3                   	ret    

c010932c <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c010932c:	55                   	push   %ebp
c010932d:	89 e5                	mov    %esp,%ebp
c010932f:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c0109332:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109336:	0f 84 e0 00 00 00    	je     c010941c <user_mem_check+0xf0>
        if (!USER_ACCESS(addr, addr + len)) {
c010933c:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0109343:	76 1c                	jbe    c0109361 <user_mem_check+0x35>
c0109345:	8b 45 10             	mov    0x10(%ebp),%eax
c0109348:	8b 55 0c             	mov    0xc(%ebp),%edx
c010934b:	01 d0                	add    %edx,%eax
c010934d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109350:	76 0f                	jbe    c0109361 <user_mem_check+0x35>
c0109352:	8b 45 10             	mov    0x10(%ebp),%eax
c0109355:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109358:	01 d0                	add    %edx,%eax
c010935a:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c010935f:	76 0a                	jbe    c010936b <user_mem_check+0x3f>
            return 0;
c0109361:	b8 00 00 00 00       	mov    $0x0,%eax
c0109366:	e9 e2 00 00 00       	jmp    c010944d <user_mem_check+0x121>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c010936b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010936e:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109371:	8b 45 10             	mov    0x10(%ebp),%eax
c0109374:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109377:	01 d0                	add    %edx,%eax
c0109379:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c010937c:	e9 88 00 00 00       	jmp    c0109409 <user_mem_check+0xdd>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c0109381:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109384:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109388:	8b 45 08             	mov    0x8(%ebp),%eax
c010938b:	89 04 24             	mov    %eax,(%esp)
c010938e:	e8 da ef ff ff       	call   c010836d <find_vma>
c0109393:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109396:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010939a:	74 0b                	je     c01093a7 <user_mem_check+0x7b>
c010939c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010939f:	8b 40 04             	mov    0x4(%eax),%eax
c01093a2:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01093a5:	76 0a                	jbe    c01093b1 <user_mem_check+0x85>
                return 0;
c01093a7:	b8 00 00 00 00       	mov    $0x0,%eax
c01093ac:	e9 9c 00 00 00       	jmp    c010944d <user_mem_check+0x121>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c01093b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093b4:	8b 50 0c             	mov    0xc(%eax),%edx
c01093b7:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01093bb:	74 07                	je     c01093c4 <user_mem_check+0x98>
c01093bd:	b8 02 00 00 00       	mov    $0x2,%eax
c01093c2:	eb 05                	jmp    c01093c9 <user_mem_check+0x9d>
c01093c4:	b8 01 00 00 00       	mov    $0x1,%eax
c01093c9:	21 d0                	and    %edx,%eax
c01093cb:	85 c0                	test   %eax,%eax
c01093cd:	75 07                	jne    c01093d6 <user_mem_check+0xaa>
                return 0;
c01093cf:	b8 00 00 00 00       	mov    $0x0,%eax
c01093d4:	eb 77                	jmp    c010944d <user_mem_check+0x121>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c01093d6:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01093da:	74 24                	je     c0109400 <user_mem_check+0xd4>
c01093dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093df:	8b 40 0c             	mov    0xc(%eax),%eax
c01093e2:	83 e0 08             	and    $0x8,%eax
c01093e5:	85 c0                	test   %eax,%eax
c01093e7:	74 17                	je     c0109400 <user_mem_check+0xd4>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c01093e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01093ec:	8b 40 04             	mov    0x4(%eax),%eax
c01093ef:	05 00 10 00 00       	add    $0x1000,%eax
c01093f4:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01093f7:	76 07                	jbe    c0109400 <user_mem_check+0xd4>
                    return 0;
c01093f9:	b8 00 00 00 00       	mov    $0x0,%eax
c01093fe:	eb 4d                	jmp    c010944d <user_mem_check+0x121>
                }
            }
            start = vma->vm_end;
c0109400:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109403:	8b 40 08             	mov    0x8(%eax),%eax
c0109406:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c0109409:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010940c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010940f:	0f 82 6c ff ff ff    	jb     c0109381 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c0109415:	b8 01 00 00 00       	mov    $0x1,%eax
c010941a:	eb 31                	jmp    c010944d <user_mem_check+0x121>
    }
    return KERN_ACCESS(addr, addr + len);
c010941c:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0109423:	76 23                	jbe    c0109448 <user_mem_check+0x11c>
c0109425:	8b 45 10             	mov    0x10(%ebp),%eax
c0109428:	8b 55 0c             	mov    0xc(%ebp),%edx
c010942b:	01 d0                	add    %edx,%eax
c010942d:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109430:	76 16                	jbe    c0109448 <user_mem_check+0x11c>
c0109432:	8b 45 10             	mov    0x10(%ebp),%eax
c0109435:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109438:	01 d0                	add    %edx,%eax
c010943a:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c010943f:	77 07                	ja     c0109448 <user_mem_check+0x11c>
c0109441:	b8 01 00 00 00       	mov    $0x1,%eax
c0109446:	eb 05                	jmp    c010944d <user_mem_check+0x121>
c0109448:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010944d:	c9                   	leave  
c010944e:	c3                   	ret    

c010944f <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{
c010944f:	55                   	push   %ebp
c0109450:	89 e5                	mov    %esp,%ebp
c0109452:	83 ec 18             	sub    $0x18,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c0109455:	8b 45 08             	mov    0x8(%ebp),%eax
c0109458:	8b 04 85 e0 55 1c c0 	mov    -0x3fe3aa20(,%eax,4),%eax
c010945f:	83 f8 01             	cmp    $0x1,%eax
c0109462:	0f 85 85 00 00 00    	jne    c01094ed <phi_test_sema+0x9e>
c0109468:	8b 45 08             	mov    0x8(%ebp),%eax
c010946b:	8d 48 04             	lea    0x4(%eax),%ecx
c010946e:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109473:	89 c8                	mov    %ecx,%eax
c0109475:	f7 ea                	imul   %edx
c0109477:	d1 fa                	sar    %edx
c0109479:	89 c8                	mov    %ecx,%eax
c010947b:	c1 f8 1f             	sar    $0x1f,%eax
c010947e:	29 c2                	sub    %eax,%edx
c0109480:	89 d0                	mov    %edx,%eax
c0109482:	c1 e0 02             	shl    $0x2,%eax
c0109485:	01 d0                	add    %edx,%eax
c0109487:	29 c1                	sub    %eax,%ecx
c0109489:	89 ca                	mov    %ecx,%edx
c010948b:	8b 04 95 e0 55 1c c0 	mov    -0x3fe3aa20(,%edx,4),%eax
c0109492:	83 f8 02             	cmp    $0x2,%eax
c0109495:	74 56                	je     c01094ed <phi_test_sema+0x9e>
            &&state_sema[RIGHT]!=EATING)
c0109497:	8b 45 08             	mov    0x8(%ebp),%eax
c010949a:	8d 48 01             	lea    0x1(%eax),%ecx
c010949d:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01094a2:	89 c8                	mov    %ecx,%eax
c01094a4:	f7 ea                	imul   %edx
c01094a6:	d1 fa                	sar    %edx
c01094a8:	89 c8                	mov    %ecx,%eax
c01094aa:	c1 f8 1f             	sar    $0x1f,%eax
c01094ad:	29 c2                	sub    %eax,%edx
c01094af:	89 d0                	mov    %edx,%eax
c01094b1:	c1 e0 02             	shl    $0x2,%eax
c01094b4:	01 d0                	add    %edx,%eax
c01094b6:	29 c1                	sub    %eax,%ecx
c01094b8:	89 ca                	mov    %ecx,%edx
c01094ba:	8b 04 95 e0 55 1c c0 	mov    -0x3fe3aa20(,%edx,4),%eax
c01094c1:	83 f8 02             	cmp    $0x2,%eax
c01094c4:	74 27                	je     c01094ed <phi_test_sema+0x9e>
    {
        state_sema[i]=EATING;
c01094c6:	8b 45 08             	mov    0x8(%ebp),%eax
c01094c9:	c7 04 85 e0 55 1c c0 	movl   $0x2,-0x3fe3aa20(,%eax,4)
c01094d0:	02 00 00 00 
        up(&s[i]);
c01094d4:	8b 55 08             	mov    0x8(%ebp),%edx
c01094d7:	89 d0                	mov    %edx,%eax
c01094d9:	01 c0                	add    %eax,%eax
c01094db:	01 d0                	add    %edx,%eax
c01094dd:	c1 e0 02             	shl    $0x2,%eax
c01094e0:	05 80 56 1c c0       	add    $0xc01c5680,%eax
c01094e5:	89 04 24             	mov    %eax,(%esp)
c01094e8:	e8 ea 09 00 00       	call   c0109ed7 <up>
    }
}
c01094ed:	c9                   	leave  
c01094ee:	c3                   	ret    

c01094ef <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{
c01094ef:	55                   	push   %ebp
c01094f0:	89 e5                	mov    %esp,%ebp
c01094f2:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c01094f5:	c7 04 24 08 56 1c c0 	movl   $0xc01c5608,(%esp)
c01094fc:	e8 f1 09 00 00       	call   c0109ef2 <down>
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c0109501:	8b 45 08             	mov    0x8(%ebp),%eax
c0109504:	c7 04 85 e0 55 1c c0 	movl   $0x1,-0x3fe3aa20(,%eax,4)
c010950b:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c010950f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109512:	89 04 24             	mov    %eax,(%esp)
c0109515:	e8 35 ff ff ff       	call   c010944f <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c010951a:	c7 04 24 08 56 1c c0 	movl   $0xc01c5608,(%esp)
c0109521:	e8 b1 09 00 00       	call   c0109ed7 <up>
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c0109526:	8b 55 08             	mov    0x8(%ebp),%edx
c0109529:	89 d0                	mov    %edx,%eax
c010952b:	01 c0                	add    %eax,%eax
c010952d:	01 d0                	add    %edx,%eax
c010952f:	c1 e0 02             	shl    $0x2,%eax
c0109532:	05 80 56 1c c0       	add    $0xc01c5680,%eax
c0109537:	89 04 24             	mov    %eax,(%esp)
c010953a:	e8 b3 09 00 00       	call   c0109ef2 <down>
}
c010953f:	c9                   	leave  
c0109540:	c3                   	ret    

c0109541 <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{
c0109541:	55                   	push   %ebp
c0109542:	89 e5                	mov    %esp,%ebp
c0109544:	83 ec 18             	sub    $0x18,%esp
        down(&mutex); /* 进入临界区 */
c0109547:	c7 04 24 08 56 1c c0 	movl   $0xc01c5608,(%esp)
c010954e:	e8 9f 09 00 00       	call   c0109ef2 <down>
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c0109553:	8b 45 08             	mov    0x8(%ebp),%eax
c0109556:	c7 04 85 e0 55 1c c0 	movl   $0x0,-0x3fe3aa20(,%eax,4)
c010955d:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c0109561:	8b 45 08             	mov    0x8(%ebp),%eax
c0109564:	8d 48 04             	lea    0x4(%eax),%ecx
c0109567:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010956c:	89 c8                	mov    %ecx,%eax
c010956e:	f7 ea                	imul   %edx
c0109570:	d1 fa                	sar    %edx
c0109572:	89 c8                	mov    %ecx,%eax
c0109574:	c1 f8 1f             	sar    $0x1f,%eax
c0109577:	29 c2                	sub    %eax,%edx
c0109579:	89 d0                	mov    %edx,%eax
c010957b:	c1 e0 02             	shl    $0x2,%eax
c010957e:	01 d0                	add    %edx,%eax
c0109580:	29 c1                	sub    %eax,%ecx
c0109582:	89 ca                	mov    %ecx,%edx
c0109584:	89 14 24             	mov    %edx,(%esp)
c0109587:	e8 c3 fe ff ff       	call   c010944f <phi_test_sema>
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c010958c:	8b 45 08             	mov    0x8(%ebp),%eax
c010958f:	8d 48 01             	lea    0x1(%eax),%ecx
c0109592:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0109597:	89 c8                	mov    %ecx,%eax
c0109599:	f7 ea                	imul   %edx
c010959b:	d1 fa                	sar    %edx
c010959d:	89 c8                	mov    %ecx,%eax
c010959f:	c1 f8 1f             	sar    $0x1f,%eax
c01095a2:	29 c2                	sub    %eax,%edx
c01095a4:	89 d0                	mov    %edx,%eax
c01095a6:	c1 e0 02             	shl    $0x2,%eax
c01095a9:	01 d0                	add    %edx,%eax
c01095ab:	29 c1                	sub    %eax,%ecx
c01095ad:	89 ca                	mov    %ecx,%edx
c01095af:	89 14 24             	mov    %edx,(%esp)
c01095b2:	e8 98 fe ff ff       	call   c010944f <phi_test_sema>
        up(&mutex); /* 离开临界区 */
c01095b7:	c7 04 24 08 56 1c c0 	movl   $0xc01c5608,(%esp)
c01095be:	e8 14 09 00 00       	call   c0109ed7 <up>
}
c01095c3:	c9                   	leave  
c01095c4:	c3                   	ret    

c01095c5 <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c01095c5:	55                   	push   %ebp
c01095c6:	89 e5                	mov    %esp,%ebp
c01095c8:	83 ec 28             	sub    $0x28,%esp
    int i, iter=0;
c01095cb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c01095d2:	8b 45 08             	mov    0x8(%ebp),%eax
c01095d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c01095d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095db:	89 44 24 04          	mov    %eax,0x4(%esp)
c01095df:	c7 04 24 0c fa 10 c0 	movl   $0xc010fa0c,(%esp)
c01095e6:	e8 6d 6d ff ff       	call   c0100358 <cprintf>
    while(iter++<TIMES)
c01095eb:	eb 62                	jmp    c010964f <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c01095ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095f0:	89 44 24 08          	mov    %eax,0x8(%esp)
c01095f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095f7:	89 44 24 04          	mov    %eax,0x4(%esp)
c01095fb:	c7 04 24 2c fa 10 c0 	movl   $0xc010fa2c,(%esp)
c0109602:	e8 51 6d ff ff       	call   c0100358 <cprintf>
        do_sleep(SLEEP_TIME);
c0109607:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010960e:	e8 81 2c 00 00       	call   c010c294 <do_sleep>
        phi_take_forks_sema(i);
c0109613:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109616:	89 04 24             	mov    %eax,(%esp)
c0109619:	e8 d1 fe ff ff       	call   c01094ef <phi_take_forks_sema>
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c010961e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109621:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109625:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109628:	89 44 24 04          	mov    %eax,0x4(%esp)
c010962c:	c7 04 24 5c fa 10 c0 	movl   $0xc010fa5c,(%esp)
c0109633:	e8 20 6d ff ff       	call   c0100358 <cprintf>
        do_sleep(SLEEP_TIME);
c0109638:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c010963f:	e8 50 2c 00 00       	call   c010c294 <do_sleep>
        phi_put_forks_sema(i);
c0109644:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109647:	89 04 24             	mov    %eax,(%esp)
c010964a:	e8 f2 fe ff ff       	call   c0109541 <phi_put_forks_sema>
int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_sema\n",i);
    while(iter++<TIMES)
c010964f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109652:	8d 50 01             	lea    0x1(%eax),%edx
c0109655:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0109658:	83 f8 03             	cmp    $0x3,%eax
c010965b:	7e 90                	jle    c01095ed <philosopher_using_semaphore+0x28>
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
        do_sleep(SLEEP_TIME);
        phi_put_forks_sema(i);
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c010965d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109660:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109664:	c7 04 24 87 fa 10 c0 	movl   $0xc010fa87,(%esp)
c010966b:	e8 e8 6c ff ff       	call   c0100358 <cprintf>
    return 0;
c0109670:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109675:	c9                   	leave  
c0109676:	c3                   	ret    

c0109677 <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING
monitor_t mt, *mtp=&mt;                          // monitor

void phi_test_condvar (i) {
c0109677:	55                   	push   %ebp
c0109678:	89 e5                	mov    %esp,%ebp
c010967a:	83 ec 18             	sub    $0x18,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c010967d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109680:	8b 04 85 40 56 1c c0 	mov    -0x3fe3a9c0(,%eax,4),%eax
c0109687:	83 f8 01             	cmp    $0x1,%eax
c010968a:	0f 85 b5 00 00 00    	jne    c0109745 <phi_test_condvar+0xce>
c0109690:	8b 45 08             	mov    0x8(%ebp),%eax
c0109693:	8d 48 04             	lea    0x4(%eax),%ecx
c0109696:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010969b:	89 c8                	mov    %ecx,%eax
c010969d:	f7 ea                	imul   %edx
c010969f:	d1 fa                	sar    %edx
c01096a1:	89 c8                	mov    %ecx,%eax
c01096a3:	c1 f8 1f             	sar    $0x1f,%eax
c01096a6:	29 c2                	sub    %eax,%edx
c01096a8:	89 d0                	mov    %edx,%eax
c01096aa:	c1 e0 02             	shl    $0x2,%eax
c01096ad:	01 d0                	add    %edx,%eax
c01096af:	29 c1                	sub    %eax,%ecx
c01096b1:	89 ca                	mov    %ecx,%edx
c01096b3:	8b 04 95 40 56 1c c0 	mov    -0x3fe3a9c0(,%edx,4),%eax
c01096ba:	83 f8 02             	cmp    $0x2,%eax
c01096bd:	0f 84 82 00 00 00    	je     c0109745 <phi_test_condvar+0xce>
            &&state_condvar[RIGHT]!=EATING) {
c01096c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01096c6:	8d 48 01             	lea    0x1(%eax),%ecx
c01096c9:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01096ce:	89 c8                	mov    %ecx,%eax
c01096d0:	f7 ea                	imul   %edx
c01096d2:	d1 fa                	sar    %edx
c01096d4:	89 c8                	mov    %ecx,%eax
c01096d6:	c1 f8 1f             	sar    $0x1f,%eax
c01096d9:	29 c2                	sub    %eax,%edx
c01096db:	89 d0                	mov    %edx,%eax
c01096dd:	c1 e0 02             	shl    $0x2,%eax
c01096e0:	01 d0                	add    %edx,%eax
c01096e2:	29 c1                	sub    %eax,%ecx
c01096e4:	89 ca                	mov    %ecx,%edx
c01096e6:	8b 04 95 40 56 1c c0 	mov    -0x3fe3a9c0(,%edx,4),%eax
c01096ed:	83 f8 02             	cmp    $0x2,%eax
c01096f0:	74 53                	je     c0109745 <phi_test_condvar+0xce>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c01096f2:	8b 45 08             	mov    0x8(%ebp),%eax
c01096f5:	89 44 24 04          	mov    %eax,0x4(%esp)
c01096f9:	c7 04 24 a4 fa 10 c0 	movl   $0xc010faa4,(%esp)
c0109700:	e8 53 6c ff ff       	call   c0100358 <cprintf>
        state_condvar[i] = EATING ;
c0109705:	8b 45 08             	mov    0x8(%ebp),%eax
c0109708:	c7 04 85 40 56 1c c0 	movl   $0x2,-0x3fe3a9c0(,%eax,4)
c010970f:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c0109713:	8b 45 08             	mov    0x8(%ebp),%eax
c0109716:	89 44 24 04          	mov    %eax,0x4(%esp)
c010971a:	c7 04 24 d8 fa 10 c0 	movl   $0xc010fad8,(%esp)
c0109721:	e8 32 6c ff ff       	call   c0100358 <cprintf>
        cond_signal(&mtp->cv[i]) ;
c0109726:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c010972b:	8b 48 1c             	mov    0x1c(%eax),%ecx
c010972e:	8b 55 08             	mov    0x8(%ebp),%edx
c0109731:	89 d0                	mov    %edx,%eax
c0109733:	c1 e0 02             	shl    $0x2,%eax
c0109736:	01 d0                	add    %edx,%eax
c0109738:	c1 e0 02             	shl    $0x2,%eax
c010973b:	01 c8                	add    %ecx,%eax
c010973d:	89 04 24             	mov    %eax,(%esp)
c0109740:	e8 8f 04 00 00       	call   c0109bd4 <cond_signal>
    }
}
c0109745:	c9                   	leave  
c0109746:	c3                   	ret    

c0109747 <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c0109747:	55                   	push   %ebp
c0109748:	89 e5                	mov    %esp,%ebp
c010974a:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c010974d:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c0109752:	89 04 24             	mov    %eax,(%esp)
c0109755:	e8 98 07 00 00       	call   c0109ef2 <down>
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: 2014011381
     // I am hungry
     state_condvar[i] = HUNGRY;
c010975a:	8b 45 08             	mov    0x8(%ebp),%eax
c010975d:	c7 04 85 40 56 1c c0 	movl   $0x1,-0x3fe3a9c0(,%eax,4)
c0109764:	01 00 00 00 
     // try to get fork
     phi_test_condvar(i);
c0109768:	8b 45 08             	mov    0x8(%ebp),%eax
c010976b:	89 04 24             	mov    %eax,(%esp)
c010976e:	e8 04 ff ff ff       	call   c0109677 <phi_test_condvar>
     while (state_condvar[i] != EATING) {
c0109773:	eb 32                	jmp    c01097a7 <phi_take_forks_condvar+0x60>
         cprintf("phi_take_forks_condvar: %d didn't get fork and will wait\n", i);
c0109775:	8b 45 08             	mov    0x8(%ebp),%eax
c0109778:	89 44 24 04          	mov    %eax,0x4(%esp)
c010977c:	c7 04 24 00 fb 10 c0 	movl   $0xc010fb00,(%esp)
c0109783:	e8 d0 6b ff ff       	call   c0100358 <cprintf>
         cond_wait(&(mtp->cv[i]));
c0109788:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c010978d:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109790:	8b 55 08             	mov    0x8(%ebp),%edx
c0109793:	89 d0                	mov    %edx,%eax
c0109795:	c1 e0 02             	shl    $0x2,%eax
c0109798:	01 d0                	add    %edx,%eax
c010979a:	c1 e0 02             	shl    $0x2,%eax
c010979d:	01 c8                	add    %ecx,%eax
c010979f:	89 04 24             	mov    %eax,(%esp)
c01097a2:	e8 cd 04 00 00       	call   c0109c74 <cond_wait>
     // LAB7 EXERCISE1: 2014011381
     // I am hungry
     state_condvar[i] = HUNGRY;
     // try to get fork
     phi_test_condvar(i);
     while (state_condvar[i] != EATING) {
c01097a7:	8b 45 08             	mov    0x8(%ebp),%eax
c01097aa:	8b 04 85 40 56 1c c0 	mov    -0x3fe3a9c0(,%eax,4),%eax
c01097b1:	83 f8 02             	cmp    $0x2,%eax
c01097b4:	75 bf                	jne    c0109775 <phi_take_forks_condvar+0x2e>
         cprintf("phi_take_forks_condvar: %d didn't get fork and will wait\n", i);
         cond_wait(&(mtp->cv[i]));
     }
//--------leave routine in monitor--------------
      if(mtp->next_count>0)
c01097b6:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c01097bb:	8b 40 18             	mov    0x18(%eax),%eax
c01097be:	85 c0                	test   %eax,%eax
c01097c0:	7e 12                	jle    c01097d4 <phi_take_forks_condvar+0x8d>
         up(&(mtp->next));
c01097c2:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c01097c7:	83 c0 0c             	add    $0xc,%eax
c01097ca:	89 04 24             	mov    %eax,(%esp)
c01097cd:	e8 05 07 00 00       	call   c0109ed7 <up>
c01097d2:	eb 0d                	jmp    c01097e1 <phi_take_forks_condvar+0x9a>
      else
         up(&(mtp->mutex));
c01097d4:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c01097d9:	89 04 24             	mov    %eax,(%esp)
c01097dc:	e8 f6 06 00 00       	call   c0109ed7 <up>
}
c01097e1:	c9                   	leave  
c01097e2:	c3                   	ret    

c01097e3 <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c01097e3:	55                   	push   %ebp
c01097e4:	89 e5                	mov    %esp,%ebp
c01097e6:	83 ec 18             	sub    $0x18,%esp
     down(&(mtp->mutex));
c01097e9:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c01097ee:	89 04 24             	mov    %eax,(%esp)
c01097f1:	e8 fc 06 00 00       	call   c0109ef2 <down>

//--------into routine in monitor--------------
     // LAB7 EXERCISE1: 2014011381
     // I ate over
     state_condvar[i] = THINKING;
c01097f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01097f9:	c7 04 85 40 56 1c c0 	movl   $0x0,-0x3fe3a9c0(,%eax,4)
c0109800:	00 00 00 00 
     // test left and right neighbors
     phi_test_condvar(LEFT);
c0109804:	8b 45 08             	mov    0x8(%ebp),%eax
c0109807:	8d 48 04             	lea    0x4(%eax),%ecx
c010980a:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010980f:	89 c8                	mov    %ecx,%eax
c0109811:	f7 ea                	imul   %edx
c0109813:	d1 fa                	sar    %edx
c0109815:	89 c8                	mov    %ecx,%eax
c0109817:	c1 f8 1f             	sar    $0x1f,%eax
c010981a:	29 c2                	sub    %eax,%edx
c010981c:	89 d0                	mov    %edx,%eax
c010981e:	c1 e0 02             	shl    $0x2,%eax
c0109821:	01 d0                	add    %edx,%eax
c0109823:	29 c1                	sub    %eax,%ecx
c0109825:	89 ca                	mov    %ecx,%edx
c0109827:	89 14 24             	mov    %edx,(%esp)
c010982a:	e8 48 fe ff ff       	call   c0109677 <phi_test_condvar>
     phi_test_condvar(RIGHT);
c010982f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109832:	8d 48 01             	lea    0x1(%eax),%ecx
c0109835:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010983a:	89 c8                	mov    %ecx,%eax
c010983c:	f7 ea                	imul   %edx
c010983e:	d1 fa                	sar    %edx
c0109840:	89 c8                	mov    %ecx,%eax
c0109842:	c1 f8 1f             	sar    $0x1f,%eax
c0109845:	29 c2                	sub    %eax,%edx
c0109847:	89 d0                	mov    %edx,%eax
c0109849:	c1 e0 02             	shl    $0x2,%eax
c010984c:	01 d0                	add    %edx,%eax
c010984e:	29 c1                	sub    %eax,%ecx
c0109850:	89 ca                	mov    %ecx,%edx
c0109852:	89 14 24             	mov    %edx,(%esp)
c0109855:	e8 1d fe ff ff       	call   c0109677 <phi_test_condvar>
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
c010985a:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c010985f:	8b 40 18             	mov    0x18(%eax),%eax
c0109862:	85 c0                	test   %eax,%eax
c0109864:	7e 12                	jle    c0109878 <phi_put_forks_condvar+0x95>
        up(&(mtp->next));
c0109866:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c010986b:	83 c0 0c             	add    $0xc,%eax
c010986e:	89 04 24             	mov    %eax,(%esp)
c0109871:	e8 61 06 00 00       	call   c0109ed7 <up>
c0109876:	eb 0d                	jmp    c0109885 <phi_put_forks_condvar+0xa2>
     else
        up(&(mtp->mutex));
c0109878:	a1 80 1a 13 c0       	mov    0xc0131a80,%eax
c010987d:	89 04 24             	mov    %eax,(%esp)
c0109880:	e8 52 06 00 00       	call   c0109ed7 <up>
}
c0109885:	c9                   	leave  
c0109886:	c3                   	ret    

c0109887 <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c0109887:	55                   	push   %ebp
c0109888:	89 e5                	mov    %esp,%ebp
c010988a:	83 ec 28             	sub    $0x28,%esp

    int i, iter=0;
c010988d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c0109894:	8b 45 08             	mov    0x8(%ebp),%eax
c0109897:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c010989a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010989d:	89 44 24 04          	mov    %eax,0x4(%esp)
c01098a1:	c7 04 24 3c fb 10 c0 	movl   $0xc010fb3c,(%esp)
c01098a8:	e8 ab 6a ff ff       	call   c0100358 <cprintf>
    while(iter++<TIMES)
c01098ad:	eb 62                	jmp    c0109911 <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c01098af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01098b2:	89 44 24 08          	mov    %eax,0x8(%esp)
c01098b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098b9:	89 44 24 04          	mov    %eax,0x4(%esp)
c01098bd:	c7 04 24 5c fb 10 c0 	movl   $0xc010fb5c,(%esp)
c01098c4:	e8 8f 6a ff ff       	call   c0100358 <cprintf>
        do_sleep(SLEEP_TIME);
c01098c9:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c01098d0:	e8 bf 29 00 00       	call   c010c294 <do_sleep>
        phi_take_forks_condvar(i);
c01098d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01098d8:	89 04 24             	mov    %eax,(%esp)
c01098db:	e8 67 fe ff ff       	call   c0109747 <phi_take_forks_condvar>
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c01098e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01098e3:	89 44 24 08          	mov    %eax,0x8(%esp)
c01098e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01098ea:	89 44 24 04          	mov    %eax,0x4(%esp)
c01098ee:	c7 04 24 8c fb 10 c0 	movl   $0xc010fb8c,(%esp)
c01098f5:	e8 5e 6a ff ff       	call   c0100358 <cprintf>
        do_sleep(SLEEP_TIME);
c01098fa:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
c0109901:	e8 8e 29 00 00       	call   c010c294 <do_sleep>
        phi_put_forks_condvar(i);
c0109906:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109909:	89 04 24             	mov    %eax,(%esp)
c010990c:	e8 d2 fe ff ff       	call   c01097e3 <phi_put_forks_condvar>
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/

    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_condvar\n",i);
    while(iter++<TIMES)
c0109911:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109914:	8d 50 01             	lea    0x1(%eax),%edx
c0109917:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010991a:	83 f8 03             	cmp    $0x3,%eax
c010991d:	7e 90                	jle    c01098af <philosopher_using_condvar+0x28>
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
        do_sleep(SLEEP_TIME);
        phi_put_forks_condvar(i);
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c010991f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109922:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109926:	c7 04 24 bc fb 10 c0 	movl   $0xc010fbbc,(%esp)
c010992d:	e8 26 6a ff ff       	call   c0100358 <cprintf>
    return 0;
c0109932:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109937:	c9                   	leave  
c0109938:	c3                   	ret    

c0109939 <check_sync>:

void check_sync(void){
c0109939:	55                   	push   %ebp
c010993a:	89 e5                	mov    %esp,%ebp
c010993c:	83 ec 28             	sub    $0x28,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c010993f:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109946:	00 
c0109947:	c7 04 24 08 56 1c c0 	movl   $0xc01c5608,(%esp)
c010994e:	e8 11 04 00 00       	call   c0109d64 <sem_init>
    for(i=0;i<N;i++){
c0109953:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010995a:	e9 94 00 00 00       	jmp    c01099f3 <check_sync+0xba>
        sem_init(&s[i], 0);
c010995f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109962:	89 d0                	mov    %edx,%eax
c0109964:	01 c0                	add    %eax,%eax
c0109966:	01 d0                	add    %edx,%eax
c0109968:	c1 e0 02             	shl    $0x2,%eax
c010996b:	05 80 56 1c c0       	add    $0xc01c5680,%eax
c0109970:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109977:	00 
c0109978:	89 04 24             	mov    %eax,(%esp)
c010997b:	e8 e4 03 00 00       	call   c0109d64 <sem_init>
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c0109980:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109983:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010998a:	00 
c010998b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010998f:	c7 04 24 c5 95 10 c0 	movl   $0xc01095c5,(%esp)
c0109996:	e8 5a 14 00 00       	call   c010adf5 <kernel_thread>
c010999b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c010999e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01099a2:	7f 1c                	jg     c01099c0 <check_sync+0x87>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c01099a4:	c7 44 24 08 dc fb 10 	movl   $0xc010fbdc,0x8(%esp)
c01099ab:	c0 
c01099ac:	c7 44 24 04 bc 00 00 	movl   $0xbc,0x4(%esp)
c01099b3:	00 
c01099b4:	c7 04 24 0e fc 10 c0 	movl   $0xc010fc0e,(%esp)
c01099bb:	e8 13 74 ff ff       	call   c0100dd3 <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c01099c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01099c3:	89 04 24             	mov    %eax,(%esp)
c01099c6:	e8 b6 13 00 00       	call   c010ad81 <find_proc>
c01099cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01099ce:	89 04 95 54 56 1c c0 	mov    %eax,-0x3fe3a9ac(,%edx,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c01099d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099d8:	8b 04 85 54 56 1c c0 	mov    -0x3fe3a9ac(,%eax,4),%eax
c01099df:	c7 44 24 04 25 fc 10 	movl   $0xc010fc25,0x4(%esp)
c01099e6:	c0 
c01099e7:	89 04 24             	mov    %eax,(%esp)
c01099ea:	e8 79 0f 00 00       	call   c010a968 <set_proc_name>

    int i;

    //check semaphore
    sem_init(&mutex, 1);
    for(i=0;i<N;i++){
c01099ef:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01099f3:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c01099f7:	0f 8e 62 ff ff ff    	jle    c010995f <check_sync+0x26>
        philosopher_proc_sema[i] = find_proc(pid);
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
c01099fd:	c7 44 24 04 05 00 00 	movl   $0x5,0x4(%esp)
c0109a04:	00 
c0109a05:	c7 04 24 20 56 1c c0 	movl   $0xc01c5620,(%esp)
c0109a0c:	e8 99 00 00 00       	call   c0109aaa <monitor_init>
    for(i=0;i<N;i++){
c0109a11:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109a18:	e9 81 00 00 00       	jmp    c0109a9e <check_sync+0x165>
        state_condvar[i]=THINKING;
c0109a1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a20:	c7 04 85 40 56 1c c0 	movl   $0x0,-0x3fe3a9c0(,%eax,4)
c0109a27:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c0109a2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a2e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c0109a35:	00 
c0109a36:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109a3a:	c7 04 24 87 98 10 c0 	movl   $0xc0109887,(%esp)
c0109a41:	e8 af 13 00 00       	call   c010adf5 <kernel_thread>
c0109a46:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c0109a49:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109a4d:	7f 1c                	jg     c0109a6b <check_sync+0x132>
            panic("create No.%d philosopher_using_condvar failed.\n");
c0109a4f:	c7 44 24 08 3c fc 10 	movl   $0xc010fc3c,0x8(%esp)
c0109a56:	c0 
c0109a57:	c7 44 24 04 c8 00 00 	movl   $0xc8,0x4(%esp)
c0109a5e:	00 
c0109a5f:	c7 04 24 0e fc 10 c0 	movl   $0xc010fc0e,(%esp)
c0109a66:	e8 68 73 ff ff       	call   c0100dd3 <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c0109a6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109a6e:	89 04 24             	mov    %eax,(%esp)
c0109a71:	e8 0b 13 00 00       	call   c010ad81 <find_proc>
c0109a76:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109a79:	89 04 95 f4 55 1c c0 	mov    %eax,-0x3fe3aa0c(,%edx,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c0109a80:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a83:	8b 04 85 f4 55 1c c0 	mov    -0x3fe3aa0c(,%eax,4),%eax
c0109a8a:	c7 44 24 04 6c fc 10 	movl   $0xc010fc6c,0x4(%esp)
c0109a91:	c0 
c0109a92:	89 04 24             	mov    %eax,(%esp)
c0109a95:	e8 ce 0e 00 00       	call   c010a968 <set_proc_name>
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
    for(i=0;i<N;i++){
c0109a9a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109a9e:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c0109aa2:	0f 8e 75 ff ff ff    	jle    c0109a1d <check_sync+0xe4>
            panic("create No.%d philosopher_using_condvar failed.\n");
        }
        philosopher_proc_condvar[i] = find_proc(pid);
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
    }
}
c0109aa8:	c9                   	leave  
c0109aa9:	c3                   	ret    

c0109aaa <monitor_init>:
#include <assert.h>


// Initialize monitor.
void
monitor_init (monitor_t * mtp, size_t num_cv) {
c0109aaa:	55                   	push   %ebp
c0109aab:	89 e5                	mov    %esp,%ebp
c0109aad:	83 ec 28             	sub    $0x28,%esp
    int i;
    assert(num_cv>0);
c0109ab0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0109ab4:	75 24                	jne    c0109ada <monitor_init+0x30>
c0109ab6:	c7 44 24 0c 88 fc 10 	movl   $0xc010fc88,0xc(%esp)
c0109abd:	c0 
c0109abe:	c7 44 24 08 91 fc 10 	movl   $0xc010fc91,0x8(%esp)
c0109ac5:	c0 
c0109ac6:	c7 44 24 04 0b 00 00 	movl   $0xb,0x4(%esp)
c0109acd:	00 
c0109ace:	c7 04 24 a6 fc 10 c0 	movl   $0xc010fca6,(%esp)
c0109ad5:	e8 f9 72 ff ff       	call   c0100dd3 <__panic>
    mtp->next_count = 0;
c0109ada:	8b 45 08             	mov    0x8(%ebp),%eax
c0109add:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c0109ae4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ae7:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c0109aee:	8b 45 08             	mov    0x8(%ebp),%eax
c0109af1:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c0109af8:	00 
c0109af9:	89 04 24             	mov    %eax,(%esp)
c0109afc:	e8 63 02 00 00       	call   c0109d64 <sem_init>
    sem_init(&(mtp->next), 0);
c0109b01:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b04:	83 c0 0c             	add    $0xc,%eax
c0109b07:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109b0e:	00 
c0109b0f:	89 04 24             	mov    %eax,(%esp)
c0109b12:	e8 4d 02 00 00       	call   c0109d64 <sem_init>
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c0109b17:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109b1a:	89 d0                	mov    %edx,%eax
c0109b1c:	c1 e0 02             	shl    $0x2,%eax
c0109b1f:	01 d0                	add    %edx,%eax
c0109b21:	c1 e0 02             	shl    $0x2,%eax
c0109b24:	89 04 24             	mov    %eax,(%esp)
c0109b27:	e8 7d b4 ff ff       	call   c0104fa9 <kmalloc>
c0109b2c:	8b 55 08             	mov    0x8(%ebp),%edx
c0109b2f:	89 42 1c             	mov    %eax,0x1c(%edx)
    assert(mtp->cv!=NULL);
c0109b32:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b35:	8b 40 1c             	mov    0x1c(%eax),%eax
c0109b38:	85 c0                	test   %eax,%eax
c0109b3a:	75 24                	jne    c0109b60 <monitor_init+0xb6>
c0109b3c:	c7 44 24 0c ba fc 10 	movl   $0xc010fcba,0xc(%esp)
c0109b43:	c0 
c0109b44:	c7 44 24 08 91 fc 10 	movl   $0xc010fc91,0x8(%esp)
c0109b4b:	c0 
c0109b4c:	c7 44 24 04 11 00 00 	movl   $0x11,0x4(%esp)
c0109b53:	00 
c0109b54:	c7 04 24 a6 fc 10 c0 	movl   $0xc010fca6,(%esp)
c0109b5b:	e8 73 72 ff ff       	call   c0100dd3 <__panic>
    for(i=0; i<num_cv; i++){
c0109b60:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109b67:	eb 61                	jmp    c0109bca <monitor_init+0x120>
        mtp->cv[i].count=0;
c0109b69:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b6c:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109b6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109b72:	89 d0                	mov    %edx,%eax
c0109b74:	c1 e0 02             	shl    $0x2,%eax
c0109b77:	01 d0                	add    %edx,%eax
c0109b79:	c1 e0 02             	shl    $0x2,%eax
c0109b7c:	01 c8                	add    %ecx,%eax
c0109b7e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c0109b85:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b88:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109b8b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109b8e:	89 d0                	mov    %edx,%eax
c0109b90:	c1 e0 02             	shl    $0x2,%eax
c0109b93:	01 d0                	add    %edx,%eax
c0109b95:	c1 e0 02             	shl    $0x2,%eax
c0109b98:	01 c8                	add    %ecx,%eax
c0109b9a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c0109ba1:	00 
c0109ba2:	89 04 24             	mov    %eax,(%esp)
c0109ba5:	e8 ba 01 00 00       	call   c0109d64 <sem_init>
        mtp->cv[i].owner=mtp;
c0109baa:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bad:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109bb0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109bb3:	89 d0                	mov    %edx,%eax
c0109bb5:	c1 e0 02             	shl    $0x2,%eax
c0109bb8:	01 d0                	add    %edx,%eax
c0109bba:	c1 e0 02             	shl    $0x2,%eax
c0109bbd:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c0109bc0:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bc3:	89 42 10             	mov    %eax,0x10(%edx)
    mtp->cv = NULL;
    sem_init(&(mtp->mutex), 1); //unlocked
    sem_init(&(mtp->next), 0);
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
    assert(mtp->cv!=NULL);
    for(i=0; i<num_cv; i++){
c0109bc6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0109bca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109bcd:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109bd0:	72 97                	jb     c0109b69 <monitor_init+0xbf>
        mtp->cv[i].count=0;
        sem_init(&(mtp->cv[i].sem),0);
        mtp->cv[i].owner=mtp;
    }
}
c0109bd2:	c9                   	leave  
c0109bd3:	c3                   	ret    

c0109bd4 <cond_signal>:

// Unlock one of threads waiting on the condition variable.
void
cond_signal (condvar_t *cvp) {
c0109bd4:	55                   	push   %ebp
c0109bd5:	89 e5                	mov    %esp,%ebp
c0109bd7:	83 ec 18             	sub    $0x18,%esp
   //LAB7 EXERCISE1: 2014011381
   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109bda:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bdd:	8b 40 10             	mov    0x10(%eax),%eax
c0109be0:	8b 50 18             	mov    0x18(%eax),%edx
c0109be3:	8b 45 08             	mov    0x8(%ebp),%eax
c0109be6:	8b 40 0c             	mov    0xc(%eax),%eax
c0109be9:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109bed:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109bf1:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bf4:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109bf8:	c7 04 24 c8 fc 10 c0 	movl   $0xc010fcc8,(%esp)
c0109bff:	e8 54 67 ff ff       	call   c0100358 <cprintf>
   *             wait(mt.next);
   *             mt.next_count--;
   *          }
   *       }
   */
   if (cvp->count > 0) {
c0109c04:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c07:	8b 40 0c             	mov    0xc(%eax),%eax
c0109c0a:	85 c0                	test   %eax,%eax
c0109c0c:	7e 3a                	jle    c0109c48 <cond_signal+0x74>
       ++cvp->owner->next_count;
c0109c0e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c11:	8b 40 10             	mov    0x10(%eax),%eax
c0109c14:	8b 50 18             	mov    0x18(%eax),%edx
c0109c17:	83 c2 01             	add    $0x1,%edx
c0109c1a:	89 50 18             	mov    %edx,0x18(%eax)
       up(&(cvp->sem));
c0109c1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c20:	89 04 24             	mov    %eax,(%esp)
c0109c23:	e8 af 02 00 00       	call   c0109ed7 <up>
       down(&(cvp->owner->next));
c0109c28:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c2b:	8b 40 10             	mov    0x10(%eax),%eax
c0109c2e:	83 c0 0c             	add    $0xc,%eax
c0109c31:	89 04 24             	mov    %eax,(%esp)
c0109c34:	e8 b9 02 00 00       	call   c0109ef2 <down>
       --cvp->owner->next_count;
c0109c39:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c3c:	8b 40 10             	mov    0x10(%eax),%eax
c0109c3f:	8b 50 18             	mov    0x18(%eax),%edx
c0109c42:	83 ea 01             	sub    $0x1,%edx
c0109c45:	89 50 18             	mov    %edx,0x18(%eax)
   }
   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109c48:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c4b:	8b 40 10             	mov    0x10(%eax),%eax
c0109c4e:	8b 50 18             	mov    0x18(%eax),%edx
c0109c51:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c54:	8b 40 0c             	mov    0xc(%eax),%eax
c0109c57:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109c5b:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109c5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c62:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c66:	c7 04 24 10 fd 10 c0 	movl   $0xc010fd10,(%esp)
c0109c6d:	e8 e6 66 ff ff       	call   c0100358 <cprintf>
}
c0109c72:	c9                   	leave  
c0109c73:	c3                   	ret    

c0109c74 <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c0109c74:	55                   	push   %ebp
c0109c75:	89 e5                	mov    %esp,%ebp
c0109c77:	83 ec 18             	sub    $0x18,%esp
    //LAB7 EXERCISE1: 2014011381
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109c7a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c7d:	8b 40 10             	mov    0x10(%eax),%eax
c0109c80:	8b 50 18             	mov    0x18(%eax),%edx
c0109c83:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c86:	8b 40 0c             	mov    0xc(%eax),%eax
c0109c89:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109c8d:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109c91:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c94:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109c98:	c7 04 24 54 fd 10 c0 	movl   $0xc010fd54,(%esp)
c0109c9f:	e8 b4 66 ff ff       	call   c0100358 <cprintf>
    *         else
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
    ++cvp->count;
c0109ca4:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ca7:	8b 40 0c             	mov    0xc(%eax),%eax
c0109caa:	8d 50 01             	lea    0x1(%eax),%edx
c0109cad:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cb0:	89 50 0c             	mov    %edx,0xc(%eax)
    if (cvp->owner->next_count > 0)
c0109cb3:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cb6:	8b 40 10             	mov    0x10(%eax),%eax
c0109cb9:	8b 40 18             	mov    0x18(%eax),%eax
c0109cbc:	85 c0                	test   %eax,%eax
c0109cbe:	7e 13                	jle    c0109cd3 <cond_wait+0x5f>
        up(&(cvp->owner->next_count));
c0109cc0:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cc3:	8b 40 10             	mov    0x10(%eax),%eax
c0109cc6:	83 c0 18             	add    $0x18,%eax
c0109cc9:	89 04 24             	mov    %eax,(%esp)
c0109ccc:	e8 06 02 00 00       	call   c0109ed7 <up>
c0109cd1:	eb 0e                	jmp    c0109ce1 <cond_wait+0x6d>
    else
        up(&(cvp->owner->mutex));
c0109cd3:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cd6:	8b 40 10             	mov    0x10(%eax),%eax
c0109cd9:	89 04 24             	mov    %eax,(%esp)
c0109cdc:	e8 f6 01 00 00       	call   c0109ed7 <up>
    down(&(cvp->sem));
c0109ce1:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ce4:	89 04 24             	mov    %eax,(%esp)
c0109ce7:	e8 06 02 00 00       	call   c0109ef2 <down>
    --cvp->count;
c0109cec:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cef:	8b 40 0c             	mov    0xc(%eax),%eax
c0109cf2:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109cf5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cf8:	89 50 0c             	mov    %edx,0xc(%eax)
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109cfb:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cfe:	8b 40 10             	mov    0x10(%eax),%eax
c0109d01:	8b 50 18             	mov    0x18(%eax),%edx
c0109d04:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d07:	8b 40 0c             	mov    0xc(%eax),%eax
c0109d0a:	89 54 24 0c          	mov    %edx,0xc(%esp)
c0109d0e:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109d12:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d15:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109d19:	c7 04 24 98 fd 10 c0 	movl   $0xc010fd98,(%esp)
c0109d20:	e8 33 66 ff ff       	call   c0100358 <cprintf>
}
c0109d25:	c9                   	leave  
c0109d26:	c3                   	ret    

c0109d27 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0109d27:	55                   	push   %ebp
c0109d28:	89 e5                	mov    %esp,%ebp
c0109d2a:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0109d2d:	9c                   	pushf  
c0109d2e:	58                   	pop    %eax
c0109d2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0109d32:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0109d35:	25 00 02 00 00       	and    $0x200,%eax
c0109d3a:	85 c0                	test   %eax,%eax
c0109d3c:	74 0c                	je     c0109d4a <__intr_save+0x23>
        intr_disable();
c0109d3e:	e8 e8 82 ff ff       	call   c010202b <intr_disable>
        return 1;
c0109d43:	b8 01 00 00 00       	mov    $0x1,%eax
c0109d48:	eb 05                	jmp    c0109d4f <__intr_save+0x28>
    }
    return 0;
c0109d4a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109d4f:	c9                   	leave  
c0109d50:	c3                   	ret    

c0109d51 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0109d51:	55                   	push   %ebp
c0109d52:	89 e5                	mov    %esp,%ebp
c0109d54:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0109d57:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109d5b:	74 05                	je     c0109d62 <__intr_restore+0x11>
        intr_enable();
c0109d5d:	e8 c3 82 ff ff       	call   c0102025 <intr_enable>
    }
}
c0109d62:	c9                   	leave  
c0109d63:	c3                   	ret    

c0109d64 <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c0109d64:	55                   	push   %ebp
c0109d65:	89 e5                	mov    %esp,%ebp
c0109d67:	83 ec 18             	sub    $0x18,%esp
    sem->value = value;
c0109d6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d6d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109d70:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c0109d72:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d75:	83 c0 04             	add    $0x4,%eax
c0109d78:	89 04 24             	mov    %eax,(%esp)
c0109d7b:	e8 33 02 00 00       	call   c0109fb3 <wait_queue_init>
}
c0109d80:	c9                   	leave  
c0109d81:	c3                   	ret    

c0109d82 <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c0109d82:	55                   	push   %ebp
c0109d83:	89 e5                	mov    %esp,%ebp
c0109d85:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109d88:	e8 9a ff ff ff       	call   c0109d27 <__intr_save>
c0109d8d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c0109d90:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d93:	83 c0 04             	add    $0x4,%eax
c0109d96:	89 04 24             	mov    %eax,(%esp)
c0109d99:	e8 69 04 00 00       	call   c010a207 <wait_queue_first>
c0109d9e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109da1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0109da5:	75 0f                	jne    c0109db6 <__up+0x34>
            sem->value ++;
c0109da7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109daa:	8b 00                	mov    (%eax),%eax
c0109dac:	8d 50 01             	lea    0x1(%eax),%edx
c0109daf:	8b 45 08             	mov    0x8(%ebp),%eax
c0109db2:	89 10                	mov    %edx,(%eax)
c0109db4:	eb 58                	jmp    c0109e0e <__up+0x8c>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c0109db6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109db9:	8b 00                	mov    (%eax),%eax
c0109dbb:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0109dc1:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109dc4:	74 24                	je     c0109dea <__up+0x68>
c0109dc6:	c7 44 24 0c dc fd 10 	movl   $0xc010fddc,0xc(%esp)
c0109dcd:	c0 
c0109dce:	c7 44 24 08 01 fe 10 	movl   $0xc010fe01,0x8(%esp)
c0109dd5:	c0 
c0109dd6:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c0109ddd:	00 
c0109dde:	c7 04 24 16 fe 10 c0 	movl   $0xc010fe16,(%esp)
c0109de5:	e8 e9 6f ff ff       	call   c0100dd3 <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c0109dea:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ded:	8d 50 04             	lea    0x4(%eax),%edx
c0109df0:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c0109df7:	00 
c0109df8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109dfb:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109dff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e02:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109e06:	89 14 24             	mov    %edx,(%esp)
c0109e09:	e8 95 04 00 00       	call   c010a2a3 <wakeup_wait>
        }
    }
    local_intr_restore(intr_flag);
c0109e0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e11:	89 04 24             	mov    %eax,(%esp)
c0109e14:	e8 38 ff ff ff       	call   c0109d51 <__intr_restore>
}
c0109e19:	c9                   	leave  
c0109e1a:	c3                   	ret    

c0109e1b <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c0109e1b:	55                   	push   %ebp
c0109e1c:	89 e5                	mov    %esp,%ebp
c0109e1e:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0109e21:	e8 01 ff ff ff       	call   c0109d27 <__intr_save>
c0109e26:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c0109e29:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e2c:	8b 00                	mov    (%eax),%eax
c0109e2e:	85 c0                	test   %eax,%eax
c0109e30:	7e 22                	jle    c0109e54 <__down+0x39>
        sem->value --;
c0109e32:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e35:	8b 00                	mov    (%eax),%eax
c0109e37:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109e3a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e3d:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c0109e3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e42:	89 04 24             	mov    %eax,(%esp)
c0109e45:	e8 07 ff ff ff       	call   c0109d51 <__intr_restore>
        return 0;
c0109e4a:	b8 00 00 00 00       	mov    $0x0,%eax
c0109e4f:	e9 81 00 00 00       	jmp    c0109ed5 <__down+0xba>
    }
    wait_t __wait, *wait = &__wait;
c0109e54:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109e57:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c0109e5a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109e5d:	8d 50 04             	lea    0x4(%eax),%edx
c0109e60:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e63:	89 44 24 08          	mov    %eax,0x8(%esp)
c0109e67:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e6a:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109e6e:	89 14 24             	mov    %edx,(%esp)
c0109e71:	e8 34 05 00 00       	call   c010a3aa <wait_current_set>
    local_intr_restore(intr_flag);
c0109e76:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109e79:	89 04 24             	mov    %eax,(%esp)
c0109e7c:	e8 d0 fe ff ff       	call   c0109d51 <__intr_restore>

    schedule();
c0109e81:	e8 27 2a 00 00       	call   c010c8ad <schedule>

    local_intr_save(intr_flag);
c0109e86:	e8 9c fe ff ff       	call   c0109d27 <__intr_save>
c0109e8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c0109e8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109e91:	89 04 24             	mov    %eax,(%esp)
c0109e94:	e8 e2 03 00 00       	call   c010a27b <wait_in_queue>
c0109e99:	85 c0                	test   %eax,%eax
c0109e9b:	74 15                	je     c0109eb2 <__down+0x97>
c0109e9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ea0:	8d 50 04             	lea    0x4(%eax),%edx
c0109ea3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ea6:	89 44 24 04          	mov    %eax,0x4(%esp)
c0109eaa:	89 14 24             	mov    %edx,(%esp)
c0109ead:	e8 c4 01 00 00       	call   c010a076 <wait_queue_del>
    local_intr_restore(intr_flag);
c0109eb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109eb5:	89 04 24             	mov    %eax,(%esp)
c0109eb8:	e8 94 fe ff ff       	call   c0109d51 <__intr_restore>

    if (wait->wakeup_flags != wait_state) {
c0109ebd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ec0:	8b 40 04             	mov    0x4(%eax),%eax
c0109ec3:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109ec6:	74 08                	je     c0109ed0 <__down+0xb5>
        return wait->wakeup_flags;
c0109ec8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109ecb:	8b 40 04             	mov    0x4(%eax),%eax
c0109ece:	eb 05                	jmp    c0109ed5 <__down+0xba>
    }
    return 0;
c0109ed0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109ed5:	c9                   	leave  
c0109ed6:	c3                   	ret    

c0109ed7 <up>:

void
up(semaphore_t *sem) {
c0109ed7:	55                   	push   %ebp
c0109ed8:	89 e5                	mov    %esp,%ebp
c0109eda:	83 ec 18             	sub    $0x18,%esp
    __up(sem, WT_KSEM);
c0109edd:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109ee4:	00 
c0109ee5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ee8:	89 04 24             	mov    %eax,(%esp)
c0109eeb:	e8 92 fe ff ff       	call   c0109d82 <__up>
}
c0109ef0:	c9                   	leave  
c0109ef1:	c3                   	ret    

c0109ef2 <down>:

void
down(semaphore_t *sem) {
c0109ef2:	55                   	push   %ebp
c0109ef3:	89 e5                	mov    %esp,%ebp
c0109ef5:	83 ec 28             	sub    $0x28,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c0109ef8:	c7 44 24 04 00 01 00 	movl   $0x100,0x4(%esp)
c0109eff:	00 
c0109f00:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f03:	89 04 24             	mov    %eax,(%esp)
c0109f06:	e8 10 ff ff ff       	call   c0109e1b <__down>
c0109f0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c0109f0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109f12:	74 24                	je     c0109f38 <down+0x46>
c0109f14:	c7 44 24 0c 26 fe 10 	movl   $0xc010fe26,0xc(%esp)
c0109f1b:	c0 
c0109f1c:	c7 44 24 08 01 fe 10 	movl   $0xc010fe01,0x8(%esp)
c0109f23:	c0 
c0109f24:	c7 44 24 04 40 00 00 	movl   $0x40,0x4(%esp)
c0109f2b:	00 
c0109f2c:	c7 04 24 16 fe 10 c0 	movl   $0xc010fe16,(%esp)
c0109f33:	e8 9b 6e ff ff       	call   c0100dd3 <__panic>
}
c0109f38:	c9                   	leave  
c0109f39:	c3                   	ret    

c0109f3a <try_down>:

bool
try_down(semaphore_t *sem) {
c0109f3a:	55                   	push   %ebp
c0109f3b:	89 e5                	mov    %esp,%ebp
c0109f3d:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag, ret = 0;
c0109f40:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c0109f47:	e8 db fd ff ff       	call   c0109d27 <__intr_save>
c0109f4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c0109f4f:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f52:	8b 00                	mov    (%eax),%eax
c0109f54:	85 c0                	test   %eax,%eax
c0109f56:	7e 14                	jle    c0109f6c <try_down+0x32>
        sem->value --, ret = 1;
c0109f58:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f5b:	8b 00                	mov    (%eax),%eax
c0109f5d:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109f60:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f63:	89 10                	mov    %edx,(%eax)
c0109f65:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0109f6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f6f:	89 04 24             	mov    %eax,(%esp)
c0109f72:	e8 da fd ff ff       	call   c0109d51 <__intr_restore>
    return ret;
c0109f77:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109f7a:	c9                   	leave  
c0109f7b:	c3                   	ret    

c0109f7c <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c0109f7c:	55                   	push   %ebp
c0109f7d:	89 e5                	mov    %esp,%ebp
c0109f7f:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c0109f82:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f85:	8b 55 0c             	mov    0xc(%ebp),%edx
c0109f88:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c0109f8a:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f8d:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c0109f94:	8b 45 08             	mov    0x8(%ebp),%eax
c0109f97:	83 c0 0c             	add    $0xc,%eax
c0109f9a:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0109f9d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109fa0:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109fa3:	89 50 04             	mov    %edx,0x4(%eax)
c0109fa6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109fa9:	8b 50 04             	mov    0x4(%eax),%edx
c0109fac:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109faf:	89 10                	mov    %edx,(%eax)
}
c0109fb1:	c9                   	leave  
c0109fb2:	c3                   	ret    

c0109fb3 <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c0109fb3:	55                   	push   %ebp
c0109fb4:	89 e5                	mov    %esp,%ebp
c0109fb6:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c0109fb9:	8b 45 08             	mov    0x8(%ebp),%eax
c0109fbc:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0109fbf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109fc2:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0109fc5:	89 50 04             	mov    %edx,0x4(%eax)
c0109fc8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109fcb:	8b 50 04             	mov    0x4(%eax),%edx
c0109fce:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109fd1:	89 10                	mov    %edx,(%eax)
}
c0109fd3:	c9                   	leave  
c0109fd4:	c3                   	ret    

c0109fd5 <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c0109fd5:	55                   	push   %ebp
c0109fd6:	89 e5                	mov    %esp,%ebp
c0109fd8:	83 ec 38             	sub    $0x38,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c0109fdb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109fde:	83 c0 0c             	add    $0xc,%eax
c0109fe1:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0109fe4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fe7:	8b 40 04             	mov    0x4(%eax),%eax
c0109fea:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c0109fed:	0f 94 c0             	sete   %al
c0109ff0:	0f b6 c0             	movzbl %al,%eax
c0109ff3:	85 c0                	test   %eax,%eax
c0109ff5:	74 09                	je     c010a000 <wait_queue_add+0x2b>
c0109ff7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ffa:	8b 00                	mov    (%eax),%eax
c0109ffc:	85 c0                	test   %eax,%eax
c0109ffe:	75 24                	jne    c010a024 <wait_queue_add+0x4f>
c010a000:	c7 44 24 0c 34 fe 10 	movl   $0xc010fe34,0xc(%esp)
c010a007:	c0 
c010a008:	c7 44 24 08 69 fe 10 	movl   $0xc010fe69,0x8(%esp)
c010a00f:	c0 
c010a010:	c7 44 24 04 15 00 00 	movl   $0x15,0x4(%esp)
c010a017:	00 
c010a018:	c7 04 24 7e fe 10 c0 	movl   $0xc010fe7e,(%esp)
c010a01f:	e8 af 6d ff ff       	call   c0100dd3 <__panic>
    wait->wait_queue = queue;
c010a024:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a027:	8b 55 08             	mov    0x8(%ebp),%edx
c010a02a:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c010a02d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a030:	8d 50 0c             	lea    0xc(%eax),%edx
c010a033:	8b 45 08             	mov    0x8(%ebp),%eax
c010a036:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a039:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010a03c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a03f:	8b 00                	mov    (%eax),%eax
c010a041:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a044:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010a047:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010a04a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a04d:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010a050:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a053:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a056:	89 10                	mov    %edx,(%eax)
c010a058:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a05b:	8b 10                	mov    (%eax),%edx
c010a05d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a060:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010a063:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a066:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010a069:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010a06c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a06f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a072:	89 10                	mov    %edx,(%eax)
}
c010a074:	c9                   	leave  
c010a075:	c3                   	ret    

c010a076 <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c010a076:	55                   	push   %ebp
c010a077:	89 e5                	mov    %esp,%ebp
c010a079:	83 ec 38             	sub    $0x38,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c010a07c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a07f:	83 c0 0c             	add    $0xc,%eax
c010a082:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010a085:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a088:	8b 40 04             	mov    0x4(%eax),%eax
c010a08b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010a08e:	0f 94 c0             	sete   %al
c010a091:	0f b6 c0             	movzbl %al,%eax
c010a094:	85 c0                	test   %eax,%eax
c010a096:	75 0b                	jne    c010a0a3 <wait_queue_del+0x2d>
c010a098:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a09b:	8b 40 08             	mov    0x8(%eax),%eax
c010a09e:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a0a1:	74 24                	je     c010a0c7 <wait_queue_del+0x51>
c010a0a3:	c7 44 24 0c 90 fe 10 	movl   $0xc010fe90,0xc(%esp)
c010a0aa:	c0 
c010a0ab:	c7 44 24 08 69 fe 10 	movl   $0xc010fe69,0x8(%esp)
c010a0b2:	c0 
c010a0b3:	c7 44 24 04 1c 00 00 	movl   $0x1c,0x4(%esp)
c010a0ba:	00 
c010a0bb:	c7 04 24 7e fe 10 c0 	movl   $0xc010fe7e,(%esp)
c010a0c2:	e8 0c 6d ff ff       	call   c0100dd3 <__panic>
    list_del_init(&(wait->wait_link));
c010a0c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a0ca:	83 c0 0c             	add    $0xc,%eax
c010a0cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a0d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a0d3:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010a0d6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a0d9:	8b 40 04             	mov    0x4(%eax),%eax
c010a0dc:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a0df:	8b 12                	mov    (%edx),%edx
c010a0e1:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010a0e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010a0e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a0ea:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a0ed:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010a0f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a0f3:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a0f6:	89 10                	mov    %edx,(%eax)
c010a0f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a0fb:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010a0fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a101:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010a104:	89 50 04             	mov    %edx,0x4(%eax)
c010a107:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a10a:	8b 50 04             	mov    0x4(%eax),%edx
c010a10d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010a110:	89 10                	mov    %edx,(%eax)
}
c010a112:	c9                   	leave  
c010a113:	c3                   	ret    

c010a114 <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c010a114:	55                   	push   %ebp
c010a115:	89 e5                	mov    %esp,%ebp
c010a117:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c010a11a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a11d:	83 c0 0c             	add    $0xc,%eax
c010a120:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010a123:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a126:	8b 40 04             	mov    0x4(%eax),%eax
c010a129:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a12c:	0f 94 c0             	sete   %al
c010a12f:	0f b6 c0             	movzbl %al,%eax
c010a132:	85 c0                	test   %eax,%eax
c010a134:	75 0b                	jne    c010a141 <wait_queue_next+0x2d>
c010a136:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a139:	8b 40 08             	mov    0x8(%eax),%eax
c010a13c:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a13f:	74 24                	je     c010a165 <wait_queue_next+0x51>
c010a141:	c7 44 24 0c 90 fe 10 	movl   $0xc010fe90,0xc(%esp)
c010a148:	c0 
c010a149:	c7 44 24 08 69 fe 10 	movl   $0xc010fe69,0x8(%esp)
c010a150:	c0 
c010a151:	c7 44 24 04 22 00 00 	movl   $0x22,0x4(%esp)
c010a158:	00 
c010a159:	c7 04 24 7e fe 10 c0 	movl   $0xc010fe7e,(%esp)
c010a160:	e8 6e 6c ff ff       	call   c0100dd3 <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c010a165:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a168:	83 c0 0c             	add    $0xc,%eax
c010a16b:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a16e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a171:	8b 40 04             	mov    0x4(%eax),%eax
c010a174:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c010a177:	8b 45 08             	mov    0x8(%ebp),%eax
c010a17a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010a17d:	74 08                	je     c010a187 <wait_queue_next+0x73>
        return le2wait(le, wait_link);
c010a17f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a182:	83 e8 0c             	sub    $0xc,%eax
c010a185:	eb 05                	jmp    c010a18c <wait_queue_next+0x78>
    }
    return NULL;
c010a187:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a18c:	c9                   	leave  
c010a18d:	c3                   	ret    

c010a18e <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c010a18e:	55                   	push   %ebp
c010a18f:	89 e5                	mov    %esp,%ebp
c010a191:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c010a194:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a197:	83 c0 0c             	add    $0xc,%eax
c010a19a:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010a19d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a1a0:	8b 40 04             	mov    0x4(%eax),%eax
c010a1a3:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a1a6:	0f 94 c0             	sete   %al
c010a1a9:	0f b6 c0             	movzbl %al,%eax
c010a1ac:	85 c0                	test   %eax,%eax
c010a1ae:	75 0b                	jne    c010a1bb <wait_queue_prev+0x2d>
c010a1b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a1b3:	8b 40 08             	mov    0x8(%eax),%eax
c010a1b6:	3b 45 08             	cmp    0x8(%ebp),%eax
c010a1b9:	74 24                	je     c010a1df <wait_queue_prev+0x51>
c010a1bb:	c7 44 24 0c 90 fe 10 	movl   $0xc010fe90,0xc(%esp)
c010a1c2:	c0 
c010a1c3:	c7 44 24 08 69 fe 10 	movl   $0xc010fe69,0x8(%esp)
c010a1ca:	c0 
c010a1cb:	c7 44 24 04 2c 00 00 	movl   $0x2c,0x4(%esp)
c010a1d2:	00 
c010a1d3:	c7 04 24 7e fe 10 c0 	movl   $0xc010fe7e,(%esp)
c010a1da:	e8 f4 6b ff ff       	call   c0100dd3 <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c010a1df:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a1e2:	83 c0 0c             	add    $0xc,%eax
c010a1e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010a1e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a1eb:	8b 00                	mov    (%eax),%eax
c010a1ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (le != &(queue->wait_head)) {
c010a1f0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a1f3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010a1f6:	74 08                	je     c010a200 <wait_queue_prev+0x72>
        return le2wait(le, wait_link);
c010a1f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a1fb:	83 e8 0c             	sub    $0xc,%eax
c010a1fe:	eb 05                	jmp    c010a205 <wait_queue_prev+0x77>
    }
    return NULL;
c010a200:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a205:	c9                   	leave  
c010a206:	c3                   	ret    

c010a207 <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c010a207:	55                   	push   %ebp
c010a208:	89 e5                	mov    %esp,%ebp
c010a20a:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c010a20d:	8b 45 08             	mov    0x8(%ebp),%eax
c010a210:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010a213:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a216:	8b 40 04             	mov    0x4(%eax),%eax
c010a219:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c010a21c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a21f:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010a222:	74 08                	je     c010a22c <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c010a224:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a227:	83 e8 0c             	sub    $0xc,%eax
c010a22a:	eb 05                	jmp    c010a231 <wait_queue_first+0x2a>
    }
    return NULL;
c010a22c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a231:	c9                   	leave  
c010a232:	c3                   	ret    

c010a233 <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c010a233:	55                   	push   %ebp
c010a234:	89 e5                	mov    %esp,%ebp
c010a236:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c010a239:	8b 45 08             	mov    0x8(%ebp),%eax
c010a23c:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010a23f:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010a242:	8b 00                	mov    (%eax),%eax
c010a244:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c010a247:	8b 45 08             	mov    0x8(%ebp),%eax
c010a24a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010a24d:	74 08                	je     c010a257 <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c010a24f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a252:	83 e8 0c             	sub    $0xc,%eax
c010a255:	eb 05                	jmp    c010a25c <wait_queue_last+0x29>
    }
    return NULL;
c010a257:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a25c:	c9                   	leave  
c010a25d:	c3                   	ret    

c010a25e <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c010a25e:	55                   	push   %ebp
c010a25f:	89 e5                	mov    %esp,%ebp
c010a261:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c010a264:	8b 45 08             	mov    0x8(%ebp),%eax
c010a267:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010a26a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a26d:	8b 40 04             	mov    0x4(%eax),%eax
c010a270:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010a273:	0f 94 c0             	sete   %al
c010a276:	0f b6 c0             	movzbl %al,%eax
}
c010a279:	c9                   	leave  
c010a27a:	c3                   	ret    

c010a27b <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c010a27b:	55                   	push   %ebp
c010a27c:	89 e5                	mov    %esp,%ebp
c010a27e:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c010a281:	8b 45 08             	mov    0x8(%ebp),%eax
c010a284:	83 c0 0c             	add    $0xc,%eax
c010a287:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010a28a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a28d:	8b 40 04             	mov    0x4(%eax),%eax
c010a290:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c010a293:	0f 94 c0             	sete   %al
c010a296:	0f b6 c0             	movzbl %al,%eax
c010a299:	85 c0                	test   %eax,%eax
c010a29b:	0f 94 c0             	sete   %al
c010a29e:	0f b6 c0             	movzbl %al,%eax
}
c010a2a1:	c9                   	leave  
c010a2a2:	c3                   	ret    

c010a2a3 <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c010a2a3:	55                   	push   %ebp
c010a2a4:	89 e5                	mov    %esp,%ebp
c010a2a6:	83 ec 18             	sub    $0x18,%esp
    if (del) {
c010a2a9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010a2ad:	74 12                	je     c010a2c1 <wakeup_wait+0x1e>
        wait_queue_del(queue, wait);
c010a2af:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a2b2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a2b6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2b9:	89 04 24             	mov    %eax,(%esp)
c010a2bc:	e8 b5 fd ff ff       	call   c010a076 <wait_queue_del>
    }
    wait->wakeup_flags = wakeup_flags;
c010a2c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a2c4:	8b 55 10             	mov    0x10(%ebp),%edx
c010a2c7:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c010a2ca:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a2cd:	8b 00                	mov    (%eax),%eax
c010a2cf:	89 04 24             	mov    %eax,(%esp)
c010a2d2:	e8 3a 25 00 00       	call   c010c811 <wakeup_proc>
}
c010a2d7:	c9                   	leave  
c010a2d8:	c3                   	ret    

c010a2d9 <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010a2d9:	55                   	push   %ebp
c010a2da:	89 e5                	mov    %esp,%ebp
c010a2dc:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010a2df:	8b 45 08             	mov    0x8(%ebp),%eax
c010a2e2:	89 04 24             	mov    %eax,(%esp)
c010a2e5:	e8 1d ff ff ff       	call   c010a207 <wait_queue_first>
c010a2ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a2ed:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a2f1:	74 20                	je     c010a313 <wakeup_first+0x3a>
        wakeup_wait(queue, wait, wakeup_flags, del);
c010a2f3:	8b 45 10             	mov    0x10(%ebp),%eax
c010a2f6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a2fa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a2fd:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a301:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a304:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a308:	8b 45 08             	mov    0x8(%ebp),%eax
c010a30b:	89 04 24             	mov    %eax,(%esp)
c010a30e:	e8 90 ff ff ff       	call   c010a2a3 <wakeup_wait>
    }
}
c010a313:	c9                   	leave  
c010a314:	c3                   	ret    

c010a315 <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c010a315:	55                   	push   %ebp
c010a316:	89 e5                	mov    %esp,%ebp
c010a318:	83 ec 28             	sub    $0x28,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c010a31b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a31e:	89 04 24             	mov    %eax,(%esp)
c010a321:	e8 e1 fe ff ff       	call   c010a207 <wait_queue_first>
c010a326:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a329:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a32d:	74 79                	je     c010a3a8 <wakeup_queue+0x93>
        if (del) {
c010a32f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a333:	74 37                	je     c010a36c <wakeup_queue+0x57>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c010a335:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010a33c:	00 
c010a33d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a340:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a344:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a347:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a34b:	8b 45 08             	mov    0x8(%ebp),%eax
c010a34e:	89 04 24             	mov    %eax,(%esp)
c010a351:	e8 4d ff ff ff       	call   c010a2a3 <wakeup_wait>
            } while ((wait = wait_queue_first(queue)) != NULL);
c010a356:	8b 45 08             	mov    0x8(%ebp),%eax
c010a359:	89 04 24             	mov    %eax,(%esp)
c010a35c:	e8 a6 fe ff ff       	call   c010a207 <wait_queue_first>
c010a361:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a364:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a368:	75 cb                	jne    c010a335 <wakeup_queue+0x20>
c010a36a:	eb 3c                	jmp    c010a3a8 <wakeup_queue+0x93>
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c010a36c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010a373:	00 
c010a374:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a377:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a37b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a37e:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a382:	8b 45 08             	mov    0x8(%ebp),%eax
c010a385:	89 04 24             	mov    %eax,(%esp)
c010a388:	e8 16 ff ff ff       	call   c010a2a3 <wakeup_wait>
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c010a38d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a390:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a394:	8b 45 08             	mov    0x8(%ebp),%eax
c010a397:	89 04 24             	mov    %eax,(%esp)
c010a39a:	e8 75 fd ff ff       	call   c010a114 <wait_queue_next>
c010a39f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a3a2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a3a6:	75 c4                	jne    c010a36c <wakeup_queue+0x57>
        }
    }
}
c010a3a8:	c9                   	leave  
c010a3a9:	c3                   	ret    

c010a3aa <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c010a3aa:	55                   	push   %ebp
c010a3ab:	89 e5                	mov    %esp,%ebp
c010a3ad:	83 ec 18             	sub    $0x18,%esp
    assert(current != NULL);
c010a3b0:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010a3b5:	85 c0                	test   %eax,%eax
c010a3b7:	75 24                	jne    c010a3dd <wait_current_set+0x33>
c010a3b9:	c7 44 24 0c cd fe 10 	movl   $0xc010fecd,0xc(%esp)
c010a3c0:	c0 
c010a3c1:	c7 44 24 08 69 fe 10 	movl   $0xc010fe69,0x8(%esp)
c010a3c8:	c0 
c010a3c9:	c7 44 24 04 74 00 00 	movl   $0x74,0x4(%esp)
c010a3d0:	00 
c010a3d1:	c7 04 24 7e fe 10 c0 	movl   $0xc010fe7e,(%esp)
c010a3d8:	e8 f6 69 ff ff       	call   c0100dd3 <__panic>
    wait_init(wait, current);
c010a3dd:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010a3e2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a3e6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a3e9:	89 04 24             	mov    %eax,(%esp)
c010a3ec:	e8 8b fb ff ff       	call   c0109f7c <wait_init>
    current->state = PROC_SLEEPING;
c010a3f1:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010a3f6:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c010a3fc:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010a401:	8b 55 10             	mov    0x10(%ebp),%edx
c010a404:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c010a40a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a40d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a411:	8b 45 08             	mov    0x8(%ebp),%eax
c010a414:	89 04 24             	mov    %eax,(%esp)
c010a417:	e8 b9 fb ff ff       	call   c0109fd5 <wait_queue_add>
}
c010a41c:	c9                   	leave  
c010a41d:	c3                   	ret    

c010a41e <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010a41e:	55                   	push   %ebp
c010a41f:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010a421:	8b 55 08             	mov    0x8(%ebp),%edx
c010a424:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c010a429:	29 c2                	sub    %eax,%edx
c010a42b:	89 d0                	mov    %edx,%eax
c010a42d:	c1 f8 05             	sar    $0x5,%eax
}
c010a430:	5d                   	pop    %ebp
c010a431:	c3                   	ret    

c010a432 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010a432:	55                   	push   %ebp
c010a433:	89 e5                	mov    %esp,%ebp
c010a435:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010a438:	8b 45 08             	mov    0x8(%ebp),%eax
c010a43b:	89 04 24             	mov    %eax,(%esp)
c010a43e:	e8 db ff ff ff       	call   c010a41e <page2ppn>
c010a443:	c1 e0 0c             	shl    $0xc,%eax
}
c010a446:	c9                   	leave  
c010a447:	c3                   	ret    

c010a448 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c010a448:	55                   	push   %ebp
c010a449:	89 e5                	mov    %esp,%ebp
c010a44b:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010a44e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a451:	89 04 24             	mov    %eax,(%esp)
c010a454:	e8 d9 ff ff ff       	call   c010a432 <page2pa>
c010a459:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a45c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a45f:	c1 e8 0c             	shr    $0xc,%eax
c010a462:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a465:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c010a46a:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a46d:	72 23                	jb     c010a492 <page2kva+0x4a>
c010a46f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a472:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a476:	c7 44 24 08 e0 fe 10 	movl   $0xc010fee0,0x8(%esp)
c010a47d:	c0 
c010a47e:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010a485:	00 
c010a486:	c7 04 24 03 ff 10 c0 	movl   $0xc010ff03,(%esp)
c010a48d:	e8 41 69 ff ff       	call   c0100dd3 <__panic>
c010a492:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a495:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010a49a:	c9                   	leave  
c010a49b:	c3                   	ret    

c010a49c <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010a49c:	55                   	push   %ebp
c010a49d:	89 e5                	mov    %esp,%ebp
c010a49f:	83 ec 18             	sub    $0x18,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010a4a2:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a4a9:	e8 75 76 ff ff       	call   c0101b23 <ide_device_valid>
c010a4ae:	85 c0                	test   %eax,%eax
c010a4b0:	75 1c                	jne    c010a4ce <swapfs_init+0x32>
        panic("swap fs isn't available.\n");
c010a4b2:	c7 44 24 08 11 ff 10 	movl   $0xc010ff11,0x8(%esp)
c010a4b9:	c0 
c010a4ba:	c7 44 24 04 0d 00 00 	movl   $0xd,0x4(%esp)
c010a4c1:	00 
c010a4c2:	c7 04 24 2b ff 10 c0 	movl   $0xc010ff2b,(%esp)
c010a4c9:	e8 05 69 ff ff       	call   c0100dd3 <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010a4ce:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a4d5:	e8 88 76 ff ff       	call   c0101b62 <ide_device_size>
c010a4da:	c1 e8 03             	shr    $0x3,%eax
c010a4dd:	a3 9c 55 1c c0       	mov    %eax,0xc01c559c
}
c010a4e2:	c9                   	leave  
c010a4e3:	c3                   	ret    

c010a4e4 <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010a4e4:	55                   	push   %ebp
c010a4e5:	89 e5                	mov    %esp,%ebp
c010a4e7:	83 ec 28             	sub    $0x28,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010a4ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a4ed:	89 04 24             	mov    %eax,(%esp)
c010a4f0:	e8 53 ff ff ff       	call   c010a448 <page2kva>
c010a4f5:	8b 55 08             	mov    0x8(%ebp),%edx
c010a4f8:	c1 ea 08             	shr    $0x8,%edx
c010a4fb:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010a4fe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a502:	74 0b                	je     c010a50f <swapfs_read+0x2b>
c010a504:	8b 15 9c 55 1c c0    	mov    0xc01c559c,%edx
c010a50a:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010a50d:	72 23                	jb     c010a532 <swapfs_read+0x4e>
c010a50f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a512:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a516:	c7 44 24 08 3c ff 10 	movl   $0xc010ff3c,0x8(%esp)
c010a51d:	c0 
c010a51e:	c7 44 24 04 14 00 00 	movl   $0x14,0x4(%esp)
c010a525:	00 
c010a526:	c7 04 24 2b ff 10 c0 	movl   $0xc010ff2b,(%esp)
c010a52d:	e8 a1 68 ff ff       	call   c0100dd3 <__panic>
c010a532:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a535:	c1 e2 03             	shl    $0x3,%edx
c010a538:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010a53f:	00 
c010a540:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a544:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a548:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a54f:	e8 4d 76 ff ff       	call   c0101ba1 <ide_read_secs>
}
c010a554:	c9                   	leave  
c010a555:	c3                   	ret    

c010a556 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010a556:	55                   	push   %ebp
c010a557:	89 e5                	mov    %esp,%ebp
c010a559:	83 ec 28             	sub    $0x28,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010a55c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a55f:	89 04 24             	mov    %eax,(%esp)
c010a562:	e8 e1 fe ff ff       	call   c010a448 <page2kva>
c010a567:	8b 55 08             	mov    0x8(%ebp),%edx
c010a56a:	c1 ea 08             	shr    $0x8,%edx
c010a56d:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010a570:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a574:	74 0b                	je     c010a581 <swapfs_write+0x2b>
c010a576:	8b 15 9c 55 1c c0    	mov    0xc01c559c,%edx
c010a57c:	39 55 f4             	cmp    %edx,-0xc(%ebp)
c010a57f:	72 23                	jb     c010a5a4 <swapfs_write+0x4e>
c010a581:	8b 45 08             	mov    0x8(%ebp),%eax
c010a584:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a588:	c7 44 24 08 3c ff 10 	movl   $0xc010ff3c,0x8(%esp)
c010a58f:	c0 
c010a590:	c7 44 24 04 19 00 00 	movl   $0x19,0x4(%esp)
c010a597:	00 
c010a598:	c7 04 24 2b ff 10 c0 	movl   $0xc010ff2b,(%esp)
c010a59f:	e8 2f 68 ff ff       	call   c0100dd3 <__panic>
c010a5a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a5a7:	c1 e2 03             	shl    $0x3,%edx
c010a5aa:	c7 44 24 0c 08 00 00 	movl   $0x8,0xc(%esp)
c010a5b1:	00 
c010a5b2:	89 44 24 08          	mov    %eax,0x8(%esp)
c010a5b6:	89 54 24 04          	mov    %edx,0x4(%esp)
c010a5ba:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010a5c1:	e8 1d 78 ff ff       	call   c0101de3 <ide_write_secs>
}
c010a5c6:	c9                   	leave  
c010a5c7:	c3                   	ret    

c010a5c8 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010a5c8:	52                   	push   %edx
    call *%ebx              # call fn
c010a5c9:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010a5cb:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010a5cc:	e8 e5 0c 00 00       	call   c010b2b6 <do_exit>

c010a5d1 <timer_init>:
#define le2timer(le, member)            \
to_struct((le), timer_t, member)

// init a timer
static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c010a5d1:	55                   	push   %ebp
c010a5d2:	89 e5                	mov    %esp,%ebp
c010a5d4:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c010a5d7:	8b 55 10             	mov    0x10(%ebp),%edx
c010a5da:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5dd:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c010a5df:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5e2:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a5e5:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c010a5e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010a5eb:	83 c0 08             	add    $0x8,%eax
c010a5ee:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010a5f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a5f4:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010a5f7:	89 50 04             	mov    %edx,0x4(%eax)
c010a5fa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a5fd:	8b 50 04             	mov    0x4(%eax),%edx
c010a600:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010a603:	89 10                	mov    %edx,(%eax)
    return timer;
c010a605:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010a608:	c9                   	leave  
c010a609:	c3                   	ret    

c010a60a <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010a60a:	55                   	push   %ebp
c010a60b:	89 e5                	mov    %esp,%ebp
c010a60d:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010a610:	9c                   	pushf  
c010a611:	58                   	pop    %eax
c010a612:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010a615:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010a618:	25 00 02 00 00       	and    $0x200,%eax
c010a61d:	85 c0                	test   %eax,%eax
c010a61f:	74 0c                	je     c010a62d <__intr_save+0x23>
        intr_disable();
c010a621:	e8 05 7a ff ff       	call   c010202b <intr_disable>
        return 1;
c010a626:	b8 01 00 00 00       	mov    $0x1,%eax
c010a62b:	eb 05                	jmp    c010a632 <__intr_save+0x28>
    }
    return 0;
c010a62d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010a632:	c9                   	leave  
c010a633:	c3                   	ret    

c010a634 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010a634:	55                   	push   %ebp
c010a635:	89 e5                	mov    %esp,%ebp
c010a637:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010a63a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a63e:	74 05                	je     c010a645 <__intr_restore+0x11>
        intr_enable();
c010a640:	e8 e0 79 ff ff       	call   c0102025 <intr_enable>
    }
}
c010a645:	c9                   	leave  
c010a646:	c3                   	ret    

c010a647 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010a647:	55                   	push   %ebp
c010a648:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010a64a:	8b 55 08             	mov    0x8(%ebp),%edx
c010a64d:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c010a652:	29 c2                	sub    %eax,%edx
c010a654:	89 d0                	mov    %edx,%eax
c010a656:	c1 f8 05             	sar    $0x5,%eax
}
c010a659:	5d                   	pop    %ebp
c010a65a:	c3                   	ret    

c010a65b <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010a65b:	55                   	push   %ebp
c010a65c:	89 e5                	mov    %esp,%ebp
c010a65e:	83 ec 04             	sub    $0x4,%esp
    return page2ppn(page) << PGSHIFT;
c010a661:	8b 45 08             	mov    0x8(%ebp),%eax
c010a664:	89 04 24             	mov    %eax,(%esp)
c010a667:	e8 db ff ff ff       	call   c010a647 <page2ppn>
c010a66c:	c1 e0 0c             	shl    $0xc,%eax
}
c010a66f:	c9                   	leave  
c010a670:	c3                   	ret    

c010a671 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010a671:	55                   	push   %ebp
c010a672:	89 e5                	mov    %esp,%ebp
c010a674:	83 ec 18             	sub    $0x18,%esp
    if (PPN(pa) >= npage) {
c010a677:	8b 45 08             	mov    0x8(%ebp),%eax
c010a67a:	c1 e8 0c             	shr    $0xc,%eax
c010a67d:	89 c2                	mov    %eax,%edx
c010a67f:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c010a684:	39 c2                	cmp    %eax,%edx
c010a686:	72 1c                	jb     c010a6a4 <pa2page+0x33>
        panic("pa2page called with invalid pa");
c010a688:	c7 44 24 08 5c ff 10 	movl   $0xc010ff5c,0x8(%esp)
c010a68f:	c0 
c010a690:	c7 44 24 04 5e 00 00 	movl   $0x5e,0x4(%esp)
c010a697:	00 
c010a698:	c7 04 24 7b ff 10 c0 	movl   $0xc010ff7b,(%esp)
c010a69f:	e8 2f 67 ff ff       	call   c0100dd3 <__panic>
    }
    return &pages[PPN(pa)];
c010a6a4:	a1 f0 54 1c c0       	mov    0xc01c54f0,%eax
c010a6a9:	8b 55 08             	mov    0x8(%ebp),%edx
c010a6ac:	c1 ea 0c             	shr    $0xc,%edx
c010a6af:	c1 e2 05             	shl    $0x5,%edx
c010a6b2:	01 d0                	add    %edx,%eax
}
c010a6b4:	c9                   	leave  
c010a6b5:	c3                   	ret    

c010a6b6 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010a6b6:	55                   	push   %ebp
c010a6b7:	89 e5                	mov    %esp,%ebp
c010a6b9:	83 ec 28             	sub    $0x28,%esp
    return KADDR(page2pa(page));
c010a6bc:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6bf:	89 04 24             	mov    %eax,(%esp)
c010a6c2:	e8 94 ff ff ff       	call   c010a65b <page2pa>
c010a6c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a6ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6cd:	c1 e8 0c             	shr    $0xc,%eax
c010a6d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a6d3:	a1 a0 33 1c c0       	mov    0xc01c33a0,%eax
c010a6d8:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010a6db:	72 23                	jb     c010a700 <page2kva+0x4a>
c010a6dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6e0:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a6e4:	c7 44 24 08 8c ff 10 	movl   $0xc010ff8c,0x8(%esp)
c010a6eb:	c0 
c010a6ec:	c7 44 24 04 65 00 00 	movl   $0x65,0x4(%esp)
c010a6f3:	00 
c010a6f4:	c7 04 24 7b ff 10 c0 	movl   $0xc010ff7b,(%esp)
c010a6fb:	e8 d3 66 ff ff       	call   c0100dd3 <__panic>
c010a700:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a703:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010a708:	c9                   	leave  
c010a709:	c3                   	ret    

c010a70a <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010a70a:	55                   	push   %ebp
c010a70b:	89 e5                	mov    %esp,%ebp
c010a70d:	83 ec 28             	sub    $0x28,%esp
    return pa2page(PADDR(kva));
c010a710:	8b 45 08             	mov    0x8(%ebp),%eax
c010a713:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a716:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010a71d:	77 23                	ja     c010a742 <kva2page+0x38>
c010a71f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a722:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010a726:	c7 44 24 08 b0 ff 10 	movl   $0xc010ffb0,0x8(%esp)
c010a72d:	c0 
c010a72e:	c7 44 24 04 6a 00 00 	movl   $0x6a,0x4(%esp)
c010a735:	00 
c010a736:	c7 04 24 7b ff 10 c0 	movl   $0xc010ff7b,(%esp)
c010a73d:	e8 91 66 ff ff       	call   c0100dd3 <__panic>
c010a742:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a745:	05 00 00 00 40       	add    $0x40000000,%eax
c010a74a:	89 04 24             	mov    %eax,(%esp)
c010a74d:	e8 1f ff ff ff       	call   c010a671 <pa2page>
}
c010a752:	c9                   	leave  
c010a753:	c3                   	ret    

c010a754 <mm_count_inc>:

static inline int
mm_count_inc(struct mm_struct *mm) {
c010a754:	55                   	push   %ebp
c010a755:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010a757:	8b 45 08             	mov    0x8(%ebp),%eax
c010a75a:	8b 40 18             	mov    0x18(%eax),%eax
c010a75d:	8d 50 01             	lea    0x1(%eax),%edx
c010a760:	8b 45 08             	mov    0x8(%ebp),%eax
c010a763:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a766:	8b 45 08             	mov    0x8(%ebp),%eax
c010a769:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a76c:	5d                   	pop    %ebp
c010a76d:	c3                   	ret    

c010a76e <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010a76e:	55                   	push   %ebp
c010a76f:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010a771:	8b 45 08             	mov    0x8(%ebp),%eax
c010a774:	8b 40 18             	mov    0x18(%eax),%eax
c010a777:	8d 50 ff             	lea    -0x1(%eax),%edx
c010a77a:	8b 45 08             	mov    0x8(%ebp),%eax
c010a77d:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010a780:	8b 45 08             	mov    0x8(%ebp),%eax
c010a783:	8b 40 18             	mov    0x18(%eax),%eax
}
c010a786:	5d                   	pop    %ebp
c010a787:	c3                   	ret    

c010a788 <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010a788:	55                   	push   %ebp
c010a789:	89 e5                	mov    %esp,%ebp
c010a78b:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a78e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a792:	74 25                	je     c010a7b9 <lock_mm+0x31>
        down(&(mm->mm_sem));
c010a794:	8b 45 08             	mov    0x8(%ebp),%eax
c010a797:	83 c0 1c             	add    $0x1c,%eax
c010a79a:	89 04 24             	mov    %eax,(%esp)
c010a79d:	e8 50 f7 ff ff       	call   c0109ef2 <down>
        if (current != NULL) {
c010a7a2:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010a7a7:	85 c0                	test   %eax,%eax
c010a7a9:	74 0e                	je     c010a7b9 <lock_mm+0x31>
            mm->locked_by = current->pid;
c010a7ab:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010a7b0:	8b 50 04             	mov    0x4(%eax),%edx
c010a7b3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7b6:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010a7b9:	c9                   	leave  
c010a7ba:	c3                   	ret    

c010a7bb <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010a7bb:	55                   	push   %ebp
c010a7bc:	89 e5                	mov    %esp,%ebp
c010a7be:	83 ec 18             	sub    $0x18,%esp
    if (mm != NULL) {
c010a7c1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a7c5:	74 18                	je     c010a7df <unlock_mm+0x24>
        up(&(mm->mm_sem));
c010a7c7:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7ca:	83 c0 1c             	add    $0x1c,%eax
c010a7cd:	89 04 24             	mov    %eax,(%esp)
c010a7d0:	e8 02 f7 ff ff       	call   c0109ed7 <up>
        mm->locked_by = 0;
c010a7d5:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7d8:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010a7df:	c9                   	leave  
c010a7e0:	c3                   	ret    

c010a7e1 <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010a7e1:	55                   	push   %ebp
c010a7e2:	89 e5                	mov    %esp,%ebp
c010a7e4:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010a7e7:	c7 04 24 c4 00 00 00 	movl   $0xc4,(%esp)
c010a7ee:	e8 b6 a7 ff ff       	call   c0104fa9 <kmalloc>
c010a7f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (proc != NULL) {
c010a7f6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a7fa:	0f 84 63 01 00 00    	je     c010a963 <alloc_proc+0x182>
     *       struct trapframe *tf;                       // Trap frame for current interrupt
     *       uintptr_t cr3;                              // CR3 register: the base addr of Page Directroy Table(PDT)
     *       uint32_t flags;                             // Process flag
     *       char name[PROC_NAME_LEN + 1];               // Process name
     */
         proc->state = PROC_UNINIT;
c010a800:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a803:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
         proc->pid = 0;
c010a809:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a80c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
         proc->runs = 0;
c010a813:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a816:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
         proc->kstack = 0;
c010a81d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a820:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
         proc->need_resched = 0;
c010a827:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a82a:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
         proc->parent = NULL;
c010a831:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a834:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
         proc->mm = NULL;
c010a83b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a83e:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
         memset(&(proc->context), 0, sizeof(proc->context));
c010a845:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a848:	83 c0 1c             	add    $0x1c,%eax
c010a84b:	c7 44 24 08 20 00 00 	movl   $0x20,0x8(%esp)
c010a852:	00 
c010a853:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a85a:	00 
c010a85b:	89 04 24             	mov    %eax,(%esp)
c010a85e:	e8 03 31 00 00       	call   c010d966 <memset>
         proc->tf = NULL;
c010a863:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a866:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%eax)
         proc->cr3 = boot_cr3;
c010a86d:	8b 15 ec 54 1c c0    	mov    0xc01c54ec,%edx
c010a873:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a876:	89 50 40             	mov    %edx,0x40(%eax)
         proc->flags = 0;
c010a879:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a87c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
         memset(proc->name, 0, sizeof(proc->name));
c010a883:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a886:	83 c0 48             	add    $0x48,%eax
c010a889:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010a890:	00 
c010a891:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a898:	00 
c010a899:	89 04 24             	mov    %eax,(%esp)
c010a89c:	e8 c5 30 00 00       	call   c010d966 <memset>
    /*
     * below fields(add in LAB5) in proc_struct need to be initialized
     *       uint32_t wait_state;                        // waiting state
     *       struct proc_struct *cptr, *yptr, *optr;     // relations between processes
	 */
         proc->wait_state = 0;
c010a8a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8a4:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010a8ab:	00 00 00 
         proc->cptr = proc->yptr = proc->optr = NULL;
c010a8ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8b1:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
c010a8b8:	00 00 00 
c010a8bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8be:	8b 90 9c 00 00 00    	mov    0x9c(%eax),%edx
c010a8c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8c7:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
c010a8cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8d0:	8b 90 98 00 00 00    	mov    0x98(%eax),%edx
c010a8d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8d9:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
     *     int time_slice;                             // time slice for occupying the CPU
     *     skew_heap_entry_t lab6_run_pool;            // FOR LAB6 ONLY: the entry in the run pool
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
         proc->rq = NULL;
c010a8df:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8e2:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
c010a8e9:	00 00 00 
         list_init(&(proc->run_link));
c010a8ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8ef:	05 a4 00 00 00       	add    $0xa4,%eax
c010a8f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a8f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a8fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a8fd:	89 50 04             	mov    %edx,0x4(%eax)
c010a900:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a903:	8b 50 04             	mov    0x4(%eax),%edx
c010a906:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a909:	89 10                	mov    %edx,(%eax)
         proc->time_slice = 0;
c010a90b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a90e:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
c010a915:	00 00 00 
         proc->lab6_run_pool.left = proc->lab6_run_pool.right = proc->lab6_run_pool.parent = NULL;
c010a918:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a91b:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
c010a922:	00 00 00 
c010a925:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a928:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
c010a92e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a931:	89 90 b8 00 00 00    	mov    %edx,0xb8(%eax)
c010a937:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a93a:	8b 90 b8 00 00 00    	mov    0xb8(%eax),%edx
c010a940:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a943:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
         proc->lab6_stride = 0;
c010a949:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a94c:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%eax)
c010a953:	00 00 00 
         proc->lab6_priority = 0;
c010a956:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a959:	c7 80 c0 00 00 00 00 	movl   $0x0,0xc0(%eax)
c010a960:	00 00 00 
    }
    return proc;
c010a963:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a966:	c9                   	leave  
c010a967:	c3                   	ret    

c010a968 <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010a968:	55                   	push   %ebp
c010a969:	89 e5                	mov    %esp,%ebp
c010a96b:	83 ec 18             	sub    $0x18,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010a96e:	8b 45 08             	mov    0x8(%ebp),%eax
c010a971:	83 c0 48             	add    $0x48,%eax
c010a974:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010a97b:	00 
c010a97c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a983:	00 
c010a984:	89 04 24             	mov    %eax,(%esp)
c010a987:	e8 da 2f 00 00       	call   c010d966 <memset>
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010a98c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a98f:	8d 50 48             	lea    0x48(%eax),%edx
c010a992:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a999:	00 
c010a99a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a99d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a9a1:	89 14 24             	mov    %edx,(%esp)
c010a9a4:	e8 9f 30 00 00       	call   c010da48 <memcpy>
}
c010a9a9:	c9                   	leave  
c010a9aa:	c3                   	ret    

c010a9ab <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010a9ab:	55                   	push   %ebp
c010a9ac:	89 e5                	mov    %esp,%ebp
c010a9ae:	83 ec 18             	sub    $0x18,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010a9b1:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010a9b8:	00 
c010a9b9:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010a9c0:	00 
c010a9c1:	c7 04 24 80 54 1c c0 	movl   $0xc01c5480,(%esp)
c010a9c8:	e8 99 2f 00 00       	call   c010d966 <memset>
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010a9cd:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9d0:	83 c0 48             	add    $0x48,%eax
c010a9d3:	c7 44 24 08 32 00 00 	movl   $0x32,0x8(%esp)
c010a9da:	00 
c010a9db:	89 44 24 04          	mov    %eax,0x4(%esp)
c010a9df:	c7 04 24 80 54 1c c0 	movl   $0xc01c5480,(%esp)
c010a9e6:	e8 5d 30 00 00       	call   c010da48 <memcpy>
}
c010a9eb:	c9                   	leave  
c010a9ec:	c3                   	ret    

c010a9ed <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010a9ed:	55                   	push   %ebp
c010a9ee:	89 e5                	mov    %esp,%ebp
c010a9f0:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010a9f3:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9f6:	83 c0 7c             	add    $0x7c,%eax
c010a9f9:	c7 45 fc bc 56 1c c0 	movl   $0xc01c56bc,-0x4(%ebp)
c010aa00:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010aa03:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010aa06:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aa09:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010aa0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010aa0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aa12:	8b 40 04             	mov    0x4(%eax),%eax
c010aa15:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010aa18:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010aa1b:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010aa1e:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010aa21:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010aa24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa27:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010aa2a:	89 10                	mov    %edx,(%eax)
c010aa2c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010aa2f:	8b 10                	mov    (%eax),%edx
c010aa31:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010aa34:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010aa37:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa3a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010aa3d:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010aa40:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa43:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010aa46:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010aa48:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa4b:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010aa52:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010aa55:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa58:	8b 40 14             	mov    0x14(%eax),%eax
c010aa5b:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010aa61:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa64:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010aa6a:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa6d:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010aa73:	85 c0                	test   %eax,%eax
c010aa75:	74 12                	je     c010aa89 <set_links+0x9c>
        proc->optr->yptr = proc;
c010aa77:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa7a:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010aa80:	8b 55 08             	mov    0x8(%ebp),%edx
c010aa83:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c010aa89:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa8c:	8b 40 14             	mov    0x14(%eax),%eax
c010aa8f:	8b 55 08             	mov    0x8(%ebp),%edx
c010aa92:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c010aa98:	a1 60 54 1c c0       	mov    0xc01c5460,%eax
c010aa9d:	83 c0 01             	add    $0x1,%eax
c010aaa0:	a3 60 54 1c c0       	mov    %eax,0xc01c5460
}
c010aaa5:	c9                   	leave  
c010aaa6:	c3                   	ret    

c010aaa7 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010aaa7:	55                   	push   %ebp
c010aaa8:	89 e5                	mov    %esp,%ebp
c010aaaa:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010aaad:	8b 45 08             	mov    0x8(%ebp),%eax
c010aab0:	83 c0 7c             	add    $0x7c,%eax
c010aab3:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010aab6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010aab9:	8b 40 04             	mov    0x4(%eax),%eax
c010aabc:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010aabf:	8b 12                	mov    (%edx),%edx
c010aac1:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010aac4:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010aac7:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010aaca:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010aacd:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010aad0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aad3:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010aad6:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010aad8:	8b 45 08             	mov    0x8(%ebp),%eax
c010aadb:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010aae1:	85 c0                	test   %eax,%eax
c010aae3:	74 18                	je     c010aafd <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c010aae5:	8b 45 08             	mov    0x8(%ebp),%eax
c010aae8:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010aaee:	8b 55 08             	mov    0x8(%ebp),%edx
c010aaf1:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c010aaf7:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c010aafd:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab00:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010ab06:	85 c0                	test   %eax,%eax
c010ab08:	74 1a                	je     c010ab24 <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c010ab0a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab0d:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010ab13:	8b 55 08             	mov    0x8(%ebp),%edx
c010ab16:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010ab1c:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010ab22:	eb 15                	jmp    c010ab39 <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c010ab24:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab27:	8b 40 14             	mov    0x14(%eax),%eax
c010ab2a:	8b 55 08             	mov    0x8(%ebp),%edx
c010ab2d:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010ab33:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c010ab39:	a1 60 54 1c c0       	mov    0xc01c5460,%eax
c010ab3e:	83 e8 01             	sub    $0x1,%eax
c010ab41:	a3 60 54 1c c0       	mov    %eax,0xc01c5460
}
c010ab46:	c9                   	leave  
c010ab47:	c3                   	ret    

c010ab48 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010ab48:	55                   	push   %ebp
c010ab49:	89 e5                	mov    %esp,%ebp
c010ab4b:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010ab4e:	c7 45 f8 bc 56 1c c0 	movl   $0xc01c56bc,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010ab55:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010ab5a:	83 c0 01             	add    $0x1,%eax
c010ab5d:	a3 84 1a 13 c0       	mov    %eax,0xc0131a84
c010ab62:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010ab67:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010ab6c:	7e 0c                	jle    c010ab7a <get_pid+0x32>
        last_pid = 1;
c010ab6e:	c7 05 84 1a 13 c0 01 	movl   $0x1,0xc0131a84
c010ab75:	00 00 00 
        goto inside;
c010ab78:	eb 13                	jmp    c010ab8d <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010ab7a:	8b 15 84 1a 13 c0    	mov    0xc0131a84,%edx
c010ab80:	a1 88 1a 13 c0       	mov    0xc0131a88,%eax
c010ab85:	39 c2                	cmp    %eax,%edx
c010ab87:	0f 8c ac 00 00 00    	jl     c010ac39 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010ab8d:	c7 05 88 1a 13 c0 00 	movl   $0x2000,0xc0131a88
c010ab94:	20 00 00 
    repeat:
        le = list;
c010ab97:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ab9a:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010ab9d:	eb 7f                	jmp    c010ac1e <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010ab9f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010aba2:	83 e8 7c             	sub    $0x7c,%eax
c010aba5:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010aba8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abab:	8b 50 04             	mov    0x4(%eax),%edx
c010abae:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010abb3:	39 c2                	cmp    %eax,%edx
c010abb5:	75 3e                	jne    c010abf5 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010abb7:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010abbc:	83 c0 01             	add    $0x1,%eax
c010abbf:	a3 84 1a 13 c0       	mov    %eax,0xc0131a84
c010abc4:	8b 15 84 1a 13 c0    	mov    0xc0131a84,%edx
c010abca:	a1 88 1a 13 c0       	mov    0xc0131a88,%eax
c010abcf:	39 c2                	cmp    %eax,%edx
c010abd1:	7c 4b                	jl     c010ac1e <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010abd3:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010abd8:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010abdd:	7e 0a                	jle    c010abe9 <get_pid+0xa1>
                        last_pid = 1;
c010abdf:	c7 05 84 1a 13 c0 01 	movl   $0x1,0xc0131a84
c010abe6:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010abe9:	c7 05 88 1a 13 c0 00 	movl   $0x2000,0xc0131a88
c010abf0:	20 00 00 
                    goto repeat;
c010abf3:	eb a2                	jmp    c010ab97 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010abf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abf8:	8b 50 04             	mov    0x4(%eax),%edx
c010abfb:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
c010ac00:	39 c2                	cmp    %eax,%edx
c010ac02:	7e 1a                	jle    c010ac1e <get_pid+0xd6>
c010ac04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac07:	8b 50 04             	mov    0x4(%eax),%edx
c010ac0a:	a1 88 1a 13 c0       	mov    0xc0131a88,%eax
c010ac0f:	39 c2                	cmp    %eax,%edx
c010ac11:	7d 0b                	jge    c010ac1e <get_pid+0xd6>
                next_safe = proc->pid;
c010ac13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac16:	8b 40 04             	mov    0x4(%eax),%eax
c010ac19:	a3 88 1a 13 c0       	mov    %eax,0xc0131a88
c010ac1e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ac21:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010ac24:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ac27:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010ac2a:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010ac2d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ac30:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010ac33:	0f 85 66 ff ff ff    	jne    c010ab9f <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010ac39:	a1 84 1a 13 c0       	mov    0xc0131a84,%eax
}
c010ac3e:	c9                   	leave  
c010ac3f:	c3                   	ret    

c010ac40 <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010ac40:	55                   	push   %ebp
c010ac41:	89 e5                	mov    %esp,%ebp
c010ac43:	83 ec 28             	sub    $0x28,%esp
    if (proc != current) {
c010ac46:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010ac4b:	39 45 08             	cmp    %eax,0x8(%ebp)
c010ac4e:	74 63                	je     c010acb3 <proc_run+0x73>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010ac50:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010ac55:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ac58:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac5b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010ac5e:	e8 a7 f9 ff ff       	call   c010a60a <__intr_save>
c010ac63:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010ac66:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac69:	a3 48 34 1c c0       	mov    %eax,0xc01c3448
            load_esp0(next->kstack + KSTACKSIZE);
c010ac6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ac71:	8b 40 0c             	mov    0xc(%eax),%eax
c010ac74:	05 00 20 00 00       	add    $0x2000,%eax
c010ac79:	89 04 24             	mov    %eax,(%esp)
c010ac7c:	e8 4f a6 ff ff       	call   c01052d0 <load_esp0>
            lcr3(next->cr3);
c010ac81:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ac84:	8b 40 40             	mov    0x40(%eax),%eax
c010ac87:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010ac8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ac8d:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010ac90:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ac93:	8d 50 1c             	lea    0x1c(%eax),%edx
c010ac96:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac99:	83 c0 1c             	add    $0x1c,%eax
c010ac9c:	89 54 24 04          	mov    %edx,0x4(%esp)
c010aca0:	89 04 24             	mov    %eax,(%esp)
c010aca3:	e8 6c 16 00 00       	call   c010c314 <switch_to>
        }
        local_intr_restore(intr_flag);
c010aca8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010acab:	89 04 24             	mov    %eax,(%esp)
c010acae:	e8 81 f9 ff ff       	call   c010a634 <__intr_restore>
    }
}
c010acb3:	c9                   	leave  
c010acb4:	c3                   	ret    

c010acb5 <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010acb5:	55                   	push   %ebp
c010acb6:	89 e5                	mov    %esp,%ebp
c010acb8:	83 ec 18             	sub    $0x18,%esp
    forkrets(current->tf);
c010acbb:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010acc0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010acc3:	89 04 24             	mov    %eax,(%esp)
c010acc6:	e8 b3 7d ff ff       	call   c0102a7e <forkrets>
}
c010accb:	c9                   	leave  
c010accc:	c3                   	ret    

c010accd <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010accd:	55                   	push   %ebp
c010acce:	89 e5                	mov    %esp,%ebp
c010acd0:	53                   	push   %ebx
c010acd1:	83 ec 34             	sub    $0x34,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010acd4:	8b 45 08             	mov    0x8(%ebp),%eax
c010acd7:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010acdd:	8b 45 08             	mov    0x8(%ebp),%eax
c010ace0:	8b 40 04             	mov    0x4(%eax),%eax
c010ace3:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010acea:	00 
c010aceb:	89 04 24             	mov    %eax,(%esp)
c010acee:	e8 c6 21 00 00       	call   c010ceb9 <hash32>
c010acf3:	c1 e0 03             	shl    $0x3,%eax
c010acf6:	05 60 34 1c c0       	add    $0xc01c3460,%eax
c010acfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010acfe:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010ad01:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad04:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ad07:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ad0a:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010ad0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ad10:	8b 40 04             	mov    0x4(%eax),%eax
c010ad13:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ad16:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010ad19:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010ad1c:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010ad1f:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010ad22:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ad25:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ad28:	89 10                	mov    %edx,(%eax)
c010ad2a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ad2d:	8b 10                	mov    (%eax),%edx
c010ad2f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ad32:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010ad35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ad38:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010ad3b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010ad3e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ad41:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010ad44:	89 10                	mov    %edx,(%eax)
}
c010ad46:	83 c4 34             	add    $0x34,%esp
c010ad49:	5b                   	pop    %ebx
c010ad4a:	5d                   	pop    %ebp
c010ad4b:	c3                   	ret    

c010ad4c <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010ad4c:	55                   	push   %ebp
c010ad4d:	89 e5                	mov    %esp,%ebp
c010ad4f:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010ad52:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad55:	05 84 00 00 00       	add    $0x84,%eax
c010ad5a:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010ad5d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ad60:	8b 40 04             	mov    0x4(%eax),%eax
c010ad63:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010ad66:	8b 12                	mov    (%edx),%edx
c010ad68:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010ad6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010ad6e:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ad71:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ad74:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010ad77:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ad7a:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010ad7d:	89 10                	mov    %edx,(%eax)
}
c010ad7f:	c9                   	leave  
c010ad80:	c3                   	ret    

c010ad81 <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010ad81:	55                   	push   %ebp
c010ad82:	89 e5                	mov    %esp,%ebp
c010ad84:	83 ec 28             	sub    $0x28,%esp
    if (0 < pid && pid < MAX_PID) {
c010ad87:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010ad8b:	7e 61                	jle    c010adee <find_proc+0x6d>
c010ad8d:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010ad94:	7f 58                	jg     c010adee <find_proc+0x6d>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010ad96:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad99:	c7 44 24 04 0a 00 00 	movl   $0xa,0x4(%esp)
c010ada0:	00 
c010ada1:	89 04 24             	mov    %eax,(%esp)
c010ada4:	e8 10 21 00 00       	call   c010ceb9 <hash32>
c010ada9:	c1 e0 03             	shl    $0x3,%eax
c010adac:	05 60 34 1c c0       	add    $0xc01c3460,%eax
c010adb1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010adb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010adb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010adba:	eb 1b                	jmp    c010add7 <find_proc+0x56>
            struct proc_struct *proc = le2proc(le, hash_link);
c010adbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010adbf:	2d 84 00 00 00       	sub    $0x84,%eax
c010adc4:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010adc7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010adca:	8b 40 04             	mov    0x4(%eax),%eax
c010adcd:	3b 45 08             	cmp    0x8(%ebp),%eax
c010add0:	75 05                	jne    c010add7 <find_proc+0x56>
                return proc;
c010add2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010add5:	eb 1c                	jmp    c010adf3 <find_proc+0x72>
c010add7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010adda:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010addd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ade0:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010ade3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ade6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ade9:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010adec:	75 ce                	jne    c010adbc <find_proc+0x3b>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010adee:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010adf3:	c9                   	leave  
c010adf4:	c3                   	ret    

c010adf5 <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010adf5:	55                   	push   %ebp
c010adf6:	89 e5                	mov    %esp,%ebp
c010adf8:	83 ec 68             	sub    $0x68,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010adfb:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010ae02:	00 
c010ae03:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010ae0a:	00 
c010ae0b:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010ae0e:	89 04 24             	mov    %eax,(%esp)
c010ae11:	e8 50 2b 00 00       	call   c010d966 <memset>
    tf.tf_cs = KERNEL_CS;
c010ae16:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010ae1c:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010ae22:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010ae26:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010ae2a:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010ae2e:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010ae32:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae35:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010ae38:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ae3b:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010ae3e:	b8 c8 a5 10 c0       	mov    $0xc010a5c8,%eax
c010ae43:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010ae46:	8b 45 10             	mov    0x10(%ebp),%eax
c010ae49:	80 cc 01             	or     $0x1,%ah
c010ae4c:	89 c2                	mov    %eax,%edx
c010ae4e:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010ae51:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ae55:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010ae5c:	00 
c010ae5d:	89 14 24             	mov    %edx,(%esp)
c010ae60:	e8 25 03 00 00       	call   c010b18a <do_fork>
}
c010ae65:	c9                   	leave  
c010ae66:	c3                   	ret    

c010ae67 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010ae67:	55                   	push   %ebp
c010ae68:	89 e5                	mov    %esp,%ebp
c010ae6a:	83 ec 28             	sub    $0x28,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010ae6d:	c7 04 24 02 00 00 00 	movl   $0x2,(%esp)
c010ae74:	e8 a5 a5 ff ff       	call   c010541e <alloc_pages>
c010ae79:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010ae7c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ae80:	74 1a                	je     c010ae9c <setup_kstack+0x35>
        proc->kstack = (uintptr_t)page2kva(page);
c010ae82:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae85:	89 04 24             	mov    %eax,(%esp)
c010ae88:	e8 29 f8 ff ff       	call   c010a6b6 <page2kva>
c010ae8d:	89 c2                	mov    %eax,%edx
c010ae8f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae92:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010ae95:	b8 00 00 00 00       	mov    $0x0,%eax
c010ae9a:	eb 05                	jmp    c010aea1 <setup_kstack+0x3a>
    }
    return -E_NO_MEM;
c010ae9c:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010aea1:	c9                   	leave  
c010aea2:	c3                   	ret    

c010aea3 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010aea3:	55                   	push   %ebp
c010aea4:	89 e5                	mov    %esp,%ebp
c010aea6:	83 ec 18             	sub    $0x18,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010aea9:	8b 45 08             	mov    0x8(%ebp),%eax
c010aeac:	8b 40 0c             	mov    0xc(%eax),%eax
c010aeaf:	89 04 24             	mov    %eax,(%esp)
c010aeb2:	e8 53 f8 ff ff       	call   c010a70a <kva2page>
c010aeb7:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
c010aebe:	00 
c010aebf:	89 04 24             	mov    %eax,(%esp)
c010aec2:	e8 c2 a5 ff ff       	call   c0105489 <free_pages>
}
c010aec7:	c9                   	leave  
c010aec8:	c3                   	ret    

c010aec9 <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010aec9:	55                   	push   %ebp
c010aeca:	89 e5                	mov    %esp,%ebp
c010aecc:	83 ec 28             	sub    $0x28,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010aecf:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
c010aed6:	e8 43 a5 ff ff       	call   c010541e <alloc_pages>
c010aedb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010aede:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010aee2:	75 0a                	jne    c010aeee <setup_pgdir+0x25>
        return -E_NO_MEM;
c010aee4:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010aee9:	e9 80 00 00 00       	jmp    c010af6e <setup_pgdir+0xa5>
    }
    pde_t *pgdir = page2kva(page);
c010aeee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aef1:	89 04 24             	mov    %eax,(%esp)
c010aef4:	e8 bd f7 ff ff       	call   c010a6b6 <page2kva>
c010aef9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010aefc:	a1 a4 33 1c c0       	mov    0xc01c33a4,%eax
c010af01:	c7 44 24 08 00 10 00 	movl   $0x1000,0x8(%esp)
c010af08:	00 
c010af09:	89 44 24 04          	mov    %eax,0x4(%esp)
c010af0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af10:	89 04 24             	mov    %eax,(%esp)
c010af13:	e8 30 2b 00 00       	call   c010da48 <memcpy>
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010af18:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af1b:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010af21:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010af24:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010af27:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010af2e:	77 23                	ja     c010af53 <setup_pgdir+0x8a>
c010af30:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af33:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010af37:	c7 44 24 08 b0 ff 10 	movl   $0xc010ffb0,0x8(%esp)
c010af3e:	c0 
c010af3f:	c7 44 24 04 3e 01 00 	movl   $0x13e,0x4(%esp)
c010af46:	00 
c010af47:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010af4e:	e8 80 5e ff ff       	call   c0100dd3 <__panic>
c010af53:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010af56:	05 00 00 00 40       	add    $0x40000000,%eax
c010af5b:	83 c8 03             	or     $0x3,%eax
c010af5e:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010af60:	8b 45 08             	mov    0x8(%ebp),%eax
c010af63:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010af66:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010af69:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010af6e:	c9                   	leave  
c010af6f:	c3                   	ret    

c010af70 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010af70:	55                   	push   %ebp
c010af71:	89 e5                	mov    %esp,%ebp
c010af73:	83 ec 18             	sub    $0x18,%esp
    free_page(kva2page(mm->pgdir));
c010af76:	8b 45 08             	mov    0x8(%ebp),%eax
c010af79:	8b 40 0c             	mov    0xc(%eax),%eax
c010af7c:	89 04 24             	mov    %eax,(%esp)
c010af7f:	e8 86 f7 ff ff       	call   c010a70a <kva2page>
c010af84:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
c010af8b:	00 
c010af8c:	89 04 24             	mov    %eax,(%esp)
c010af8f:	e8 f5 a4 ff ff       	call   c0105489 <free_pages>
}
c010af94:	c9                   	leave  
c010af95:	c3                   	ret    

c010af96 <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010af96:	55                   	push   %ebp
c010af97:	89 e5                	mov    %esp,%ebp
c010af99:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010af9c:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010afa1:	8b 40 18             	mov    0x18(%eax),%eax
c010afa4:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010afa7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010afab:	75 0a                	jne    c010afb7 <copy_mm+0x21>
        return 0;
c010afad:	b8 00 00 00 00       	mov    $0x0,%eax
c010afb2:	e9 f9 00 00 00       	jmp    c010b0b0 <copy_mm+0x11a>
    }
    if (clone_flags & CLONE_VM) {
c010afb7:	8b 45 08             	mov    0x8(%ebp),%eax
c010afba:	25 00 01 00 00       	and    $0x100,%eax
c010afbf:	85 c0                	test   %eax,%eax
c010afc1:	74 08                	je     c010afcb <copy_mm+0x35>
        mm = oldmm;
c010afc3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010afc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010afc9:	eb 78                	jmp    c010b043 <copy_mm+0xad>
    }

    int ret = -E_NO_MEM;
c010afcb:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010afd2:	e8 b6 d2 ff ff       	call   c010828d <mm_create>
c010afd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010afda:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010afde:	75 05                	jne    c010afe5 <copy_mm+0x4f>
        goto bad_mm;
c010afe0:	e9 c8 00 00 00       	jmp    c010b0ad <copy_mm+0x117>
    }
    if (setup_pgdir(mm) != 0) {
c010afe5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afe8:	89 04 24             	mov    %eax,(%esp)
c010afeb:	e8 d9 fe ff ff       	call   c010aec9 <setup_pgdir>
c010aff0:	85 c0                	test   %eax,%eax
c010aff2:	74 05                	je     c010aff9 <copy_mm+0x63>
        goto bad_pgdir_cleanup_mm;
c010aff4:	e9 a9 00 00 00       	jmp    c010b0a2 <copy_mm+0x10c>
    }

    lock_mm(oldmm);
c010aff9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010affc:	89 04 24             	mov    %eax,(%esp)
c010afff:	e8 84 f7 ff ff       	call   c010a788 <lock_mm>
    {
        ret = dup_mmap(mm, oldmm);
c010b004:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b007:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b00b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b00e:	89 04 24             	mov    %eax,(%esp)
c010b011:	e8 9a d7 ff ff       	call   c01087b0 <dup_mmap>
c010b016:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010b019:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b01c:	89 04 24             	mov    %eax,(%esp)
c010b01f:	e8 97 f7 ff ff       	call   c010a7bb <unlock_mm>

    if (ret != 0) {
c010b024:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b028:	74 19                	je     c010b043 <copy_mm+0xad>
        goto bad_dup_cleanup_mmap;
c010b02a:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010b02b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b02e:	89 04 24             	mov    %eax,(%esp)
c010b031:	e8 7b d8 ff ff       	call   c01088b1 <exit_mmap>
    put_pgdir(mm);
c010b036:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b039:	89 04 24             	mov    %eax,(%esp)
c010b03c:	e8 2f ff ff ff       	call   c010af70 <put_pgdir>
c010b041:	eb 5f                	jmp    c010b0a2 <copy_mm+0x10c>
    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010b043:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b046:	89 04 24             	mov    %eax,(%esp)
c010b049:	e8 06 f7 ff ff       	call   c010a754 <mm_count_inc>
    proc->mm = mm;
c010b04e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b051:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b054:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010b057:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b05a:	8b 40 0c             	mov    0xc(%eax),%eax
c010b05d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b060:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010b067:	77 23                	ja     c010b08c <copy_mm+0xf6>
c010b069:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b06c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b070:	c7 44 24 08 b0 ff 10 	movl   $0xc010ffb0,0x8(%esp)
c010b077:	c0 
c010b078:	c7 44 24 04 6d 01 00 	movl   $0x16d,0x4(%esp)
c010b07f:	00 
c010b080:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010b087:	e8 47 5d ff ff       	call   c0100dd3 <__panic>
c010b08c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b08f:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010b095:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b098:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010b09b:	b8 00 00 00 00       	mov    $0x0,%eax
c010b0a0:	eb 0e                	jmp    c010b0b0 <copy_mm+0x11a>
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010b0a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0a5:	89 04 24             	mov    %eax,(%esp)
c010b0a8:	e8 45 d5 ff ff       	call   c01085f2 <mm_destroy>
bad_mm:
    return ret;
c010b0ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010b0b0:	c9                   	leave  
c010b0b1:	c3                   	ret    

c010b0b2 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010b0b2:	55                   	push   %ebp
c010b0b3:	89 e5                	mov    %esp,%ebp
c010b0b5:	57                   	push   %edi
c010b0b6:	56                   	push   %esi
c010b0b7:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010b0b8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0bb:	8b 40 0c             	mov    0xc(%eax),%eax
c010b0be:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010b0c3:	89 c2                	mov    %eax,%edx
c010b0c5:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0c8:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010b0cb:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0ce:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b0d1:	8b 55 10             	mov    0x10(%ebp),%edx
c010b0d4:	bb 4c 00 00 00       	mov    $0x4c,%ebx
c010b0d9:	89 c1                	mov    %eax,%ecx
c010b0db:	83 e1 01             	and    $0x1,%ecx
c010b0de:	85 c9                	test   %ecx,%ecx
c010b0e0:	74 0e                	je     c010b0f0 <copy_thread+0x3e>
c010b0e2:	0f b6 0a             	movzbl (%edx),%ecx
c010b0e5:	88 08                	mov    %cl,(%eax)
c010b0e7:	83 c0 01             	add    $0x1,%eax
c010b0ea:	83 c2 01             	add    $0x1,%edx
c010b0ed:	83 eb 01             	sub    $0x1,%ebx
c010b0f0:	89 c1                	mov    %eax,%ecx
c010b0f2:	83 e1 02             	and    $0x2,%ecx
c010b0f5:	85 c9                	test   %ecx,%ecx
c010b0f7:	74 0f                	je     c010b108 <copy_thread+0x56>
c010b0f9:	0f b7 0a             	movzwl (%edx),%ecx
c010b0fc:	66 89 08             	mov    %cx,(%eax)
c010b0ff:	83 c0 02             	add    $0x2,%eax
c010b102:	83 c2 02             	add    $0x2,%edx
c010b105:	83 eb 02             	sub    $0x2,%ebx
c010b108:	89 d9                	mov    %ebx,%ecx
c010b10a:	c1 e9 02             	shr    $0x2,%ecx
c010b10d:	89 c7                	mov    %eax,%edi
c010b10f:	89 d6                	mov    %edx,%esi
c010b111:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010b113:	89 f2                	mov    %esi,%edx
c010b115:	89 f8                	mov    %edi,%eax
c010b117:	b9 00 00 00 00       	mov    $0x0,%ecx
c010b11c:	89 de                	mov    %ebx,%esi
c010b11e:	83 e6 02             	and    $0x2,%esi
c010b121:	85 f6                	test   %esi,%esi
c010b123:	74 0b                	je     c010b130 <copy_thread+0x7e>
c010b125:	0f b7 34 0a          	movzwl (%edx,%ecx,1),%esi
c010b129:	66 89 34 08          	mov    %si,(%eax,%ecx,1)
c010b12d:	83 c1 02             	add    $0x2,%ecx
c010b130:	83 e3 01             	and    $0x1,%ebx
c010b133:	85 db                	test   %ebx,%ebx
c010b135:	74 07                	je     c010b13e <copy_thread+0x8c>
c010b137:	0f b6 14 0a          	movzbl (%edx,%ecx,1),%edx
c010b13b:	88 14 08             	mov    %dl,(%eax,%ecx,1)
    proc->tf->tf_regs.reg_eax = 0;
c010b13e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b141:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b144:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010b14b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b14e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b151:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b154:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010b157:	8b 45 08             	mov    0x8(%ebp),%eax
c010b15a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b15d:	8b 55 08             	mov    0x8(%ebp),%edx
c010b160:	8b 52 3c             	mov    0x3c(%edx),%edx
c010b163:	8b 52 40             	mov    0x40(%edx),%edx
c010b166:	80 ce 02             	or     $0x2,%dh
c010b169:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010b16c:	ba b5 ac 10 c0       	mov    $0xc010acb5,%edx
c010b171:	8b 45 08             	mov    0x8(%ebp),%eax
c010b174:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010b177:	8b 45 08             	mov    0x8(%ebp),%eax
c010b17a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b17d:	89 c2                	mov    %eax,%edx
c010b17f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b182:	89 50 20             	mov    %edx,0x20(%eax)
}
c010b185:	5b                   	pop    %ebx
c010b186:	5e                   	pop    %esi
c010b187:	5f                   	pop    %edi
c010b188:	5d                   	pop    %ebp
c010b189:	c3                   	ret    

c010b18a <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010b18a:	55                   	push   %ebp
c010b18b:	89 e5                	mov    %esp,%ebp
c010b18d:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_NO_FREE_PROC;
c010b190:	c7 45 f4 fb ff ff ff 	movl   $0xfffffffb,-0xc(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010b197:	a1 60 54 1c c0       	mov    0xc01c5460,%eax
c010b19c:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010b1a1:	7e 05                	jle    c010b1a8 <do_fork+0x1e>
        goto fork_out;
c010b1a3:	e9 fa 00 00 00       	jmp    c010b2a2 <do_fork+0x118>
    }
    ret = -E_NO_MEM;
c010b1a8:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */

    //    1. call alloc_proc to allocate a proc_struct
    proc = alloc_proc();
c010b1af:	e8 2d f6 ff ff       	call   c010a7e1 <alloc_proc>
c010b1b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!proc)
c010b1b7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b1bb:	75 05                	jne    c010b1c2 <do_fork+0x38>
        goto fork_out;
c010b1bd:	e9 e0 00 00 00       	jmp    c010b2a2 <do_fork+0x118>
    assert(!(proc->wait_state));
c010b1c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1c5:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010b1cb:	85 c0                	test   %eax,%eax
c010b1cd:	74 24                	je     c010b1f3 <do_fork+0x69>
c010b1cf:	c7 44 24 0c e8 ff 10 	movl   $0xc010ffe8,0xc(%esp)
c010b1d6:	c0 
c010b1d7:	c7 44 24 08 fc ff 10 	movl   $0xc010fffc,0x8(%esp)
c010b1de:	c0 
c010b1df:	c7 44 24 04 b1 01 00 	movl   $0x1b1,0x4(%esp)
c010b1e6:	00 
c010b1e7:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010b1ee:	e8 e0 5b ff ff       	call   c0100dd3 <__panic>
    proc->parent = current;
c010b1f3:	8b 15 48 34 1c c0    	mov    0xc01c3448,%edx
c010b1f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b1fc:	89 50 14             	mov    %edx,0x14(%eax)
    //    2. call setup_kstack to allocate a kernel stack for child process
    ret = setup_kstack(proc);
c010b1ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b202:	89 04 24             	mov    %eax,(%esp)
c010b205:	e8 5d fc ff ff       	call   c010ae67 <setup_kstack>
c010b20a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ret)
c010b20d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b211:	74 05                	je     c010b218 <do_fork+0x8e>
        goto bad_fork_cleanup_proc;
c010b213:	e9 8f 00 00 00       	jmp    c010b2a7 <do_fork+0x11d>
    //    3. call copy_mm to dup OR share mm according clone_flag
    ret = copy_mm(clone_flags, proc);
c010b218:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b21b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b21f:	8b 45 08             	mov    0x8(%ebp),%eax
c010b222:	89 04 24             	mov    %eax,(%esp)
c010b225:	e8 6c fd ff ff       	call   c010af96 <copy_mm>
c010b22a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ret)
c010b22d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b231:	74 0e                	je     c010b241 <do_fork+0xb7>
        goto bad_fork_cleanup_kstack;
c010b233:	90                   	nop

fork_out:
    return ret;

bad_fork_cleanup_kstack:
    put_kstack(proc);
c010b234:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b237:	89 04 24             	mov    %eax,(%esp)
c010b23a:	e8 64 fc ff ff       	call   c010aea3 <put_kstack>
c010b23f:	eb 66                	jmp    c010b2a7 <do_fork+0x11d>
    //    3. call copy_mm to dup OR share mm according clone_flag
    ret = copy_mm(clone_flags, proc);
    if (ret)
        goto bad_fork_cleanup_kstack;
    //    4. call copy_thread to setup tf & context in proc_struct
    copy_thread(proc, stack, tf);
c010b241:	8b 45 10             	mov    0x10(%ebp),%eax
c010b244:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b248:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b24b:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b24f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b252:	89 04 24             	mov    %eax,(%esp)
c010b255:	e8 58 fe ff ff       	call   c010b0b2 <copy_thread>
    //    5. insert proc_struct into hash_list && proc_list
    bool intr_flag;
    local_intr_save(intr_flag);
c010b25a:	e8 ab f3 ff ff       	call   c010a60a <__intr_save>
c010b25f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    {
        proc->pid = get_pid();
c010b262:	e8 e1 f8 ff ff       	call   c010ab48 <get_pid>
c010b267:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b26a:	89 42 04             	mov    %eax,0x4(%edx)
        set_links(proc);
c010b26d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b270:	89 04 24             	mov    %eax,(%esp)
c010b273:	e8 75 f7 ff ff       	call   c010a9ed <set_links>
        hash_proc(proc);
c010b278:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b27b:	89 04 24             	mov    %eax,(%esp)
c010b27e:	e8 4a fa ff ff       	call   c010accd <hash_proc>
    }
    local_intr_restore(intr_flag);
c010b283:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b286:	89 04 24             	mov    %eax,(%esp)
c010b289:	e8 a6 f3 ff ff       	call   c010a634 <__intr_restore>
    //    6. call wakeup_proc to make the new child process RUNNABLE
    wakeup_proc(proc);
c010b28e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b291:	89 04 24             	mov    %eax,(%esp)
c010b294:	e8 78 15 00 00       	call   c010c811 <wakeup_proc>
    //    7. set ret vaule using child proc's pid
    ret = proc->pid;
c010b299:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b29c:	8b 40 04             	mov    0x4(%eax),%eax
c010b29f:	89 45 f4             	mov    %eax,-0xc(%ebp)

fork_out:
    return ret;
c010b2a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b2a5:	eb 0d                	jmp    c010b2b4 <do_fork+0x12a>

bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
c010b2a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2aa:	89 04 24             	mov    %eax,(%esp)
c010b2ad:	e8 12 9d ff ff       	call   c0104fc4 <kfree>
    goto fork_out;
c010b2b2:	eb ee                	jmp    c010b2a2 <do_fork+0x118>
}
c010b2b4:	c9                   	leave  
c010b2b5:	c3                   	ret    

c010b2b6 <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010b2b6:	55                   	push   %ebp
c010b2b7:	89 e5                	mov    %esp,%ebp
c010b2b9:	83 ec 28             	sub    $0x28,%esp
    if (current == idleproc) {
c010b2bc:	8b 15 48 34 1c c0    	mov    0xc01c3448,%edx
c010b2c2:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010b2c7:	39 c2                	cmp    %eax,%edx
c010b2c9:	75 1c                	jne    c010b2e7 <do_exit+0x31>
        panic("idleproc exit.\n");
c010b2cb:	c7 44 24 08 11 00 11 	movl   $0xc0110011,0x8(%esp)
c010b2d2:	c0 
c010b2d3:	c7 44 24 04 dc 01 00 	movl   $0x1dc,0x4(%esp)
c010b2da:	00 
c010b2db:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010b2e2:	e8 ec 5a ff ff       	call   c0100dd3 <__panic>
    }
    if (current == initproc) {
c010b2e7:	8b 15 48 34 1c c0    	mov    0xc01c3448,%edx
c010b2ed:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010b2f2:	39 c2                	cmp    %eax,%edx
c010b2f4:	75 1c                	jne    c010b312 <do_exit+0x5c>
        panic("initproc exit.\n");
c010b2f6:	c7 44 24 08 21 00 11 	movl   $0xc0110021,0x8(%esp)
c010b2fd:	c0 
c010b2fe:	c7 44 24 04 df 01 00 	movl   $0x1df,0x4(%esp)
c010b305:	00 
c010b306:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010b30d:	e8 c1 5a ff ff       	call   c0100dd3 <__panic>
    }

    struct mm_struct *mm = current->mm;
c010b312:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b317:	8b 40 18             	mov    0x18(%eax),%eax
c010b31a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010b31d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b321:	74 4a                	je     c010b36d <do_exit+0xb7>
        lcr3(boot_cr3);
c010b323:	a1 ec 54 1c c0       	mov    0xc01c54ec,%eax
c010b328:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b32b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b32e:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010b331:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b334:	89 04 24             	mov    %eax,(%esp)
c010b337:	e8 32 f4 ff ff       	call   c010a76e <mm_count_dec>
c010b33c:	85 c0                	test   %eax,%eax
c010b33e:	75 21                	jne    c010b361 <do_exit+0xab>
            exit_mmap(mm);
c010b340:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b343:	89 04 24             	mov    %eax,(%esp)
c010b346:	e8 66 d5 ff ff       	call   c01088b1 <exit_mmap>
            put_pgdir(mm);
c010b34b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b34e:	89 04 24             	mov    %eax,(%esp)
c010b351:	e8 1a fc ff ff       	call   c010af70 <put_pgdir>
            mm_destroy(mm);
c010b356:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b359:	89 04 24             	mov    %eax,(%esp)
c010b35c:	e8 91 d2 ff ff       	call   c01085f2 <mm_destroy>
        }
        current->mm = NULL;
c010b361:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b366:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    current->state = PROC_ZOMBIE;
c010b36d:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b372:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010b378:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b37d:	8b 55 08             	mov    0x8(%ebp),%edx
c010b380:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)

    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010b386:	e8 7f f2 ff ff       	call   c010a60a <__intr_save>
c010b38b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010b38e:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b393:	8b 40 14             	mov    0x14(%eax),%eax
c010b396:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010b399:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b39c:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010b3a2:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010b3a7:	75 10                	jne    c010b3b9 <do_exit+0x103>
            wakeup_proc(proc);
c010b3a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b3ac:	89 04 24             	mov    %eax,(%esp)
c010b3af:	e8 5d 14 00 00       	call   c010c811 <wakeup_proc>
        }
        while (current->cptr != NULL) {
c010b3b4:	e9 ac 00 00 00       	jmp    c010b465 <do_exit+0x1af>
c010b3b9:	e9 a7 00 00 00       	jmp    c010b465 <do_exit+0x1af>
            proc = current->cptr;
c010b3be:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b3c3:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b3c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010b3cc:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b3d1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b3d4:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010b3da:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)

            proc->yptr = NULL;
c010b3e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b3e3:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010b3ea:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010b3ed:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010b3f2:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010b3f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b3fb:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010b401:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b404:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b40a:	85 c0                	test   %eax,%eax
c010b40c:	74 14                	je     c010b422 <do_exit+0x16c>
                initproc->cptr->yptr = proc;
c010b40e:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010b413:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b419:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b41c:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010b422:	8b 15 44 34 1c c0    	mov    0xc01c3444,%edx
c010b428:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b42b:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010b42e:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010b433:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b436:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010b43c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b43f:	8b 00                	mov    (%eax),%eax
c010b441:	83 f8 03             	cmp    $0x3,%eax
c010b444:	75 1f                	jne    c010b465 <do_exit+0x1af>
                if (initproc->wait_state == WT_CHILD) {
c010b446:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010b44b:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010b451:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010b456:	75 0d                	jne    c010b465 <do_exit+0x1af>
                    wakeup_proc(initproc);
c010b458:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010b45d:	89 04 24             	mov    %eax,(%esp)
c010b460:	e8 ac 13 00 00       	call   c010c811 <wakeup_proc>
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010b465:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b46a:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b470:	85 c0                	test   %eax,%eax
c010b472:	0f 85 46 ff ff ff    	jne    c010b3be <do_exit+0x108>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010b478:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b47b:	89 04 24             	mov    %eax,(%esp)
c010b47e:	e8 b1 f1 ff ff       	call   c010a634 <__intr_restore>

    schedule();
c010b483:	e8 25 14 00 00       	call   c010c8ad <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010b488:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b48d:	8b 40 04             	mov    0x4(%eax),%eax
c010b490:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b494:	c7 44 24 08 34 00 11 	movl   $0xc0110034,0x8(%esp)
c010b49b:	c0 
c010b49c:	c7 44 24 04 0b 02 00 	movl   $0x20b,0x4(%esp)
c010b4a3:	00 
c010b4a4:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010b4ab:	e8 23 59 ff ff       	call   c0100dd3 <__panic>

c010b4b0 <load_icode>:
/* load_icode - load the content of binary program(ELF format) as the new content of current process
 * @binary:  the memory addr of the content of binary program
 * @size:  the size of the content of binary program
 */
static int
load_icode(unsigned char *binary, size_t size) {
c010b4b0:	55                   	push   %ebp
c010b4b1:	89 e5                	mov    %esp,%ebp
c010b4b3:	83 ec 78             	sub    $0x78,%esp
    if (current->mm != NULL) {
c010b4b6:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b4bb:	8b 40 18             	mov    0x18(%eax),%eax
c010b4be:	85 c0                	test   %eax,%eax
c010b4c0:	74 1c                	je     c010b4de <load_icode+0x2e>
        panic("load_icode: current->mm must be empty.\n");
c010b4c2:	c7 44 24 08 54 00 11 	movl   $0xc0110054,0x8(%esp)
c010b4c9:	c0 
c010b4ca:	c7 44 24 04 15 02 00 	movl   $0x215,0x4(%esp)
c010b4d1:	00 
c010b4d2:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010b4d9:	e8 f5 58 ff ff       	call   c0100dd3 <__panic>
    }

    int ret = -E_NO_MEM;
c010b4de:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct mm_struct *mm;
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
c010b4e5:	e8 a3 cd ff ff       	call   c010828d <mm_create>
c010b4ea:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010b4ed:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c010b4f1:	75 06                	jne    c010b4f9 <load_icode+0x49>
        goto bad_mm;
c010b4f3:	90                   	nop
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    goto out;
c010b4f4:	e9 ef 05 00 00       	jmp    c010bae8 <load_icode+0x638>
    //(1) create a new mm for current process
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    //(2) create a new PDT, and mm->pgdir= kernel virtual addr of PDT
    if (setup_pgdir(mm) != 0) {
c010b4f9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b4fc:	89 04 24             	mov    %eax,(%esp)
c010b4ff:	e8 c5 f9 ff ff       	call   c010aec9 <setup_pgdir>
c010b504:	85 c0                	test   %eax,%eax
c010b506:	74 05                	je     c010b50d <load_icode+0x5d>
        goto bad_pgdir_cleanup_mm;
c010b508:	e9 f6 05 00 00       	jmp    c010bb03 <load_icode+0x653>
    }
    //(3) copy TEXT/DATA section, build BSS parts in binary to memory space of process
    struct Page *page;
    //(3.1) get the file header of the bianry program (ELF format)
    struct elfhdr *elf = (struct elfhdr *)binary;
c010b50d:	8b 45 08             	mov    0x8(%ebp),%eax
c010b510:	89 45 cc             	mov    %eax,-0x34(%ebp)
    //(3.2) get the entry of the program section headers of the bianry program (ELF format)
    struct proghdr *ph = (struct proghdr *)(binary + elf->e_phoff);
c010b513:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b516:	8b 50 1c             	mov    0x1c(%eax),%edx
c010b519:	8b 45 08             	mov    0x8(%ebp),%eax
c010b51c:	01 d0                	add    %edx,%eax
c010b51e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    //(3.3) This program is valid?
    if (elf->e_magic != ELF_MAGIC) {
c010b521:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b524:	8b 00                	mov    (%eax),%eax
c010b526:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
c010b52b:	74 0c                	je     c010b539 <load_icode+0x89>
        ret = -E_INVAL_ELF;
c010b52d:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
        goto bad_elf_cleanup_pgdir;
c010b534:	e9 bf 05 00 00       	jmp    c010baf8 <load_icode+0x648>
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
c010b539:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010b53c:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c010b540:	0f b7 c0             	movzwl %ax,%eax
c010b543:	c1 e0 05             	shl    $0x5,%eax
c010b546:	89 c2                	mov    %eax,%edx
c010b548:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b54b:	01 d0                	add    %edx,%eax
c010b54d:	89 45 c8             	mov    %eax,-0x38(%ebp)
    for (; ph < ph_end; ph ++) {
c010b550:	e9 13 03 00 00       	jmp    c010b868 <load_icode+0x3b8>
    //(3.4) find every program section headers
        if (ph->p_type != ELF_PT_LOAD) {
c010b555:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b558:	8b 00                	mov    (%eax),%eax
c010b55a:	83 f8 01             	cmp    $0x1,%eax
c010b55d:	74 05                	je     c010b564 <load_icode+0xb4>
            continue ;
c010b55f:	e9 00 03 00 00       	jmp    c010b864 <load_icode+0x3b4>
        }
        if (ph->p_filesz > ph->p_memsz) {
c010b564:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b567:	8b 50 10             	mov    0x10(%eax),%edx
c010b56a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b56d:	8b 40 14             	mov    0x14(%eax),%eax
c010b570:	39 c2                	cmp    %eax,%edx
c010b572:	76 0c                	jbe    c010b580 <load_icode+0xd0>
            ret = -E_INVAL_ELF;
c010b574:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
            goto bad_cleanup_mmap;
c010b57b:	e9 6d 05 00 00       	jmp    c010baed <load_icode+0x63d>
        }
        if (ph->p_filesz == 0) {
c010b580:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b583:	8b 40 10             	mov    0x10(%eax),%eax
c010b586:	85 c0                	test   %eax,%eax
c010b588:	75 05                	jne    c010b58f <load_icode+0xdf>
            continue ;
c010b58a:	e9 d5 02 00 00       	jmp    c010b864 <load_icode+0x3b4>
        }
    //(3.5) call mm_map fun to setup the new vma ( ph->p_va, ph->p_memsz)
        vm_flags = 0, perm = PTE_U;
c010b58f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c010b596:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%ebp)
        if (ph->p_flags & ELF_PF_X) vm_flags |= VM_EXEC;
c010b59d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b5a0:	8b 40 18             	mov    0x18(%eax),%eax
c010b5a3:	83 e0 01             	and    $0x1,%eax
c010b5a6:	85 c0                	test   %eax,%eax
c010b5a8:	74 04                	je     c010b5ae <load_icode+0xfe>
c010b5aa:	83 4d e8 04          	orl    $0x4,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_W) vm_flags |= VM_WRITE;
c010b5ae:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b5b1:	8b 40 18             	mov    0x18(%eax),%eax
c010b5b4:	83 e0 02             	and    $0x2,%eax
c010b5b7:	85 c0                	test   %eax,%eax
c010b5b9:	74 04                	je     c010b5bf <load_icode+0x10f>
c010b5bb:	83 4d e8 02          	orl    $0x2,-0x18(%ebp)
        if (ph->p_flags & ELF_PF_R) vm_flags |= VM_READ;
c010b5bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b5c2:	8b 40 18             	mov    0x18(%eax),%eax
c010b5c5:	83 e0 04             	and    $0x4,%eax
c010b5c8:	85 c0                	test   %eax,%eax
c010b5ca:	74 04                	je     c010b5d0 <load_icode+0x120>
c010b5cc:	83 4d e8 01          	orl    $0x1,-0x18(%ebp)
        if (vm_flags & VM_WRITE) perm |= PTE_W;
c010b5d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b5d3:	83 e0 02             	and    $0x2,%eax
c010b5d6:	85 c0                	test   %eax,%eax
c010b5d8:	74 04                	je     c010b5de <load_icode+0x12e>
c010b5da:	83 4d e4 02          	orl    $0x2,-0x1c(%ebp)
        if ((ret = mm_map(mm, ph->p_va, ph->p_memsz, vm_flags, NULL)) != 0) {
c010b5de:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b5e1:	8b 50 14             	mov    0x14(%eax),%edx
c010b5e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b5e7:	8b 40 08             	mov    0x8(%eax),%eax
c010b5ea:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b5f1:	00 
c010b5f2:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010b5f5:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
c010b5f9:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b5fd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b601:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b604:	89 04 24             	mov    %eax,(%esp)
c010b607:	e8 88 d0 ff ff       	call   c0108694 <mm_map>
c010b60c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b60f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b613:	74 05                	je     c010b61a <load_icode+0x16a>
            goto bad_cleanup_mmap;
c010b615:	e9 d3 04 00 00       	jmp    c010baed <load_icode+0x63d>
        }
        unsigned char *from = binary + ph->p_offset;
c010b61a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b61d:	8b 50 04             	mov    0x4(%eax),%edx
c010b620:	8b 45 08             	mov    0x8(%ebp),%eax
c010b623:	01 d0                	add    %edx,%eax
c010b625:	89 45 e0             	mov    %eax,-0x20(%ebp)
        size_t off, size;
        uintptr_t start = ph->p_va, end, la = ROUNDDOWN(start, PGSIZE);
c010b628:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b62b:	8b 40 08             	mov    0x8(%eax),%eax
c010b62e:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010b631:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b634:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c010b637:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010b63a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010b63f:	89 45 d4             	mov    %eax,-0x2c(%ebp)

        ret = -E_NO_MEM;
c010b642:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
c010b649:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b64c:	8b 50 08             	mov    0x8(%eax),%edx
c010b64f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b652:	8b 40 10             	mov    0x10(%eax),%eax
c010b655:	01 d0                	add    %edx,%eax
c010b657:	89 45 c0             	mov    %eax,-0x40(%ebp)
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010b65a:	e9 90 00 00 00       	jmp    c010b6ef <load_icode+0x23f>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010b65f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b662:	8b 40 0c             	mov    0xc(%eax),%eax
c010b665:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b668:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b66c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b66f:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b673:	89 04 24             	mov    %eax,(%esp)
c010b676:	e8 87 ac ff ff       	call   c0106302 <pgdir_alloc_page>
c010b67b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b67e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b682:	75 05                	jne    c010b689 <load_icode+0x1d9>
                goto bad_cleanup_mmap;
c010b684:	e9 64 04 00 00       	jmp    c010baed <load_icode+0x63d>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010b689:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b68c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b68f:	29 c2                	sub    %eax,%edx
c010b691:	89 d0                	mov    %edx,%eax
c010b693:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b696:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b69b:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b69e:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b6a1:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010b6a8:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b6ab:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b6ae:	73 0d                	jae    c010b6bd <load_icode+0x20d>
                size -= la - end;
c010b6b0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b6b3:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b6b6:	29 c2                	sub    %eax,%edx
c010b6b8:	89 d0                	mov    %edx,%eax
c010b6ba:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memcpy(page2kva(page) + off, from, size);
c010b6bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b6c0:	89 04 24             	mov    %eax,(%esp)
c010b6c3:	e8 ee ef ff ff       	call   c010a6b6 <page2kva>
c010b6c8:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b6cb:	01 c2                	add    %eax,%edx
c010b6cd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b6d0:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b6d4:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b6d7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010b6db:	89 14 24             	mov    %edx,(%esp)
c010b6de:	e8 65 23 00 00       	call   c010da48 <memcpy>
            start += size, from += size;
c010b6e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b6e6:	01 45 d8             	add    %eax,-0x28(%ebp)
c010b6e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b6ec:	01 45 e0             	add    %eax,-0x20(%ebp)
        ret = -E_NO_MEM;

     //(3.6) alloc memory, and  copy the contents of every program section (from, from+end) to process's memory (la, la+end)
        end = ph->p_va + ph->p_filesz;
     //(3.6.1) copy TEXT/DATA section of bianry program
        while (start < end) {
c010b6ef:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b6f2:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b6f5:	0f 82 64 ff ff ff    	jb     c010b65f <load_icode+0x1af>
            memcpy(page2kva(page) + off, from, size);
            start += size, from += size;
        }

      //(3.6.2) build BSS section of binary program
        end = ph->p_va + ph->p_memsz;
c010b6fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b6fe:	8b 50 08             	mov    0x8(%eax),%edx
c010b701:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b704:	8b 40 14             	mov    0x14(%eax),%eax
c010b707:	01 d0                	add    %edx,%eax
c010b709:	89 45 c0             	mov    %eax,-0x40(%ebp)
        if (start < la) {
c010b70c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b70f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b712:	0f 83 b0 00 00 00    	jae    c010b7c8 <load_icode+0x318>
            /* ph->p_memsz == ph->p_filesz */
            if (start == end) {
c010b718:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b71b:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b71e:	75 05                	jne    c010b725 <load_icode+0x275>
                continue ;
c010b720:	e9 3f 01 00 00       	jmp    c010b864 <load_icode+0x3b4>
            }
            off = start + PGSIZE - la, size = PGSIZE - off;
c010b725:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b728:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b72b:	29 c2                	sub    %eax,%edx
c010b72d:	89 d0                	mov    %edx,%eax
c010b72f:	05 00 10 00 00       	add    $0x1000,%eax
c010b734:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b737:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b73c:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b73f:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (end < la) {
c010b742:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b745:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b748:	73 0d                	jae    c010b757 <load_icode+0x2a7>
                size -= la - end;
c010b74a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b74d:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b750:	29 c2                	sub    %eax,%edx
c010b752:	89 d0                	mov    %edx,%eax
c010b754:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010b757:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b75a:	89 04 24             	mov    %eax,(%esp)
c010b75d:	e8 54 ef ff ff       	call   c010a6b6 <page2kva>
c010b762:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b765:	01 c2                	add    %eax,%edx
c010b767:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b76a:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b76e:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b775:	00 
c010b776:	89 14 24             	mov    %edx,(%esp)
c010b779:	e8 e8 21 00 00       	call   c010d966 <memset>
            start += size;
c010b77e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b781:	01 45 d8             	add    %eax,-0x28(%ebp)
            assert((end < la && start == end) || (end >= la && start == la));
c010b784:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b787:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b78a:	73 08                	jae    c010b794 <load_icode+0x2e4>
c010b78c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b78f:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b792:	74 34                	je     c010b7c8 <load_icode+0x318>
c010b794:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b797:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b79a:	72 08                	jb     c010b7a4 <load_icode+0x2f4>
c010b79c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b79f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b7a2:	74 24                	je     c010b7c8 <load_icode+0x318>
c010b7a4:	c7 44 24 0c 7c 00 11 	movl   $0xc011007c,0xc(%esp)
c010b7ab:	c0 
c010b7ac:	c7 44 24 08 fc ff 10 	movl   $0xc010fffc,0x8(%esp)
c010b7b3:	c0 
c010b7b4:	c7 44 24 04 67 02 00 	movl   $0x267,0x4(%esp)
c010b7bb:	00 
c010b7bc:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010b7c3:	e8 0b 56 ff ff       	call   c0100dd3 <__panic>
        }
        while (start < end) {
c010b7c8:	e9 8b 00 00 00       	jmp    c010b858 <load_icode+0x3a8>
            if ((page = pgdir_alloc_page(mm->pgdir, la, perm)) == NULL) {
c010b7cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b7d0:	8b 40 0c             	mov    0xc(%eax),%eax
c010b7d3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b7d6:	89 54 24 08          	mov    %edx,0x8(%esp)
c010b7da:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010b7dd:	89 54 24 04          	mov    %edx,0x4(%esp)
c010b7e1:	89 04 24             	mov    %eax,(%esp)
c010b7e4:	e8 19 ab ff ff       	call   c0106302 <pgdir_alloc_page>
c010b7e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b7ec:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b7f0:	75 05                	jne    c010b7f7 <load_icode+0x347>
                goto bad_cleanup_mmap;
c010b7f2:	e9 f6 02 00 00       	jmp    c010baed <load_icode+0x63d>
            }
            off = start - la, size = PGSIZE - off, la += PGSIZE;
c010b7f7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b7fa:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010b7fd:	29 c2                	sub    %eax,%edx
c010b7ff:	89 d0                	mov    %edx,%eax
c010b801:	89 45 bc             	mov    %eax,-0x44(%ebp)
c010b804:	b8 00 10 00 00       	mov    $0x1000,%eax
c010b809:	2b 45 bc             	sub    -0x44(%ebp),%eax
c010b80c:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010b80f:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
            if (end < la) {
c010b816:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010b819:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c010b81c:	73 0d                	jae    c010b82b <load_icode+0x37b>
                size -= la - end;
c010b81e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010b821:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010b824:	29 c2                	sub    %eax,%edx
c010b826:	89 d0                	mov    %edx,%eax
c010b828:	01 45 dc             	add    %eax,-0x24(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
c010b82b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b82e:	89 04 24             	mov    %eax,(%esp)
c010b831:	e8 80 ee ff ff       	call   c010a6b6 <page2kva>
c010b836:	8b 55 bc             	mov    -0x44(%ebp),%edx
c010b839:	01 c2                	add    %eax,%edx
c010b83b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b83e:	89 44 24 08          	mov    %eax,0x8(%esp)
c010b842:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010b849:	00 
c010b84a:	89 14 24             	mov    %edx,(%esp)
c010b84d:	e8 14 21 00 00       	call   c010d966 <memset>
            start += size;
c010b852:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b855:	01 45 d8             	add    %eax,-0x28(%ebp)
            }
            memset(page2kva(page) + off, 0, size);
            start += size;
            assert((end < la && start == end) || (end >= la && start == la));
        }
        while (start < end) {
c010b858:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010b85b:	3b 45 c0             	cmp    -0x40(%ebp),%eax
c010b85e:	0f 82 69 ff ff ff    	jb     c010b7cd <load_icode+0x31d>
        goto bad_elf_cleanup_pgdir;
    }

    uint32_t vm_flags, perm;
    struct proghdr *ph_end = ph + elf->e_phnum;
    for (; ph < ph_end; ph ++) {
c010b864:	83 45 ec 20          	addl   $0x20,-0x14(%ebp)
c010b868:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b86b:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c010b86e:	0f 82 e1 fc ff ff    	jb     c010b555 <load_icode+0xa5>
            memset(page2kva(page) + off, 0, size);
            start += size;
        }
    }
    //(4) build user stack memory
    vm_flags = VM_READ | VM_WRITE | VM_STACK;
c010b874:	c7 45 e8 0b 00 00 00 	movl   $0xb,-0x18(%ebp)
    if ((ret = mm_map(mm, USTACKTOP - USTACKSIZE, USTACKSIZE, vm_flags, NULL)) != 0) {
c010b87b:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
c010b882:	00 
c010b883:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b886:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b88a:	c7 44 24 08 00 00 10 	movl   $0x100000,0x8(%esp)
c010b891:	00 
c010b892:	c7 44 24 04 00 00 f0 	movl   $0xaff00000,0x4(%esp)
c010b899:	af 
c010b89a:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b89d:	89 04 24             	mov    %eax,(%esp)
c010b8a0:	e8 ef cd ff ff       	call   c0108694 <mm_map>
c010b8a5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b8a8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b8ac:	74 05                	je     c010b8b3 <load_icode+0x403>
        goto bad_cleanup_mmap;
c010b8ae:	e9 3a 02 00 00       	jmp    c010baed <load_icode+0x63d>
    }
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-PGSIZE , PTE_USER) != NULL);
c010b8b3:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b8b6:	8b 40 0c             	mov    0xc(%eax),%eax
c010b8b9:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b8c0:	00 
c010b8c1:	c7 44 24 04 00 f0 ff 	movl   $0xaffff000,0x4(%esp)
c010b8c8:	af 
c010b8c9:	89 04 24             	mov    %eax,(%esp)
c010b8cc:	e8 31 aa ff ff       	call   c0106302 <pgdir_alloc_page>
c010b8d1:	85 c0                	test   %eax,%eax
c010b8d3:	75 24                	jne    c010b8f9 <load_icode+0x449>
c010b8d5:	c7 44 24 0c b8 00 11 	movl   $0xc01100b8,0xc(%esp)
c010b8dc:	c0 
c010b8dd:	c7 44 24 08 fc ff 10 	movl   $0xc010fffc,0x8(%esp)
c010b8e4:	c0 
c010b8e5:	c7 44 24 04 7a 02 00 	movl   $0x27a,0x4(%esp)
c010b8ec:	00 
c010b8ed:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010b8f4:	e8 da 54 ff ff       	call   c0100dd3 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-2*PGSIZE , PTE_USER) != NULL);
c010b8f9:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b8fc:	8b 40 0c             	mov    0xc(%eax),%eax
c010b8ff:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b906:	00 
c010b907:	c7 44 24 04 00 e0 ff 	movl   $0xafffe000,0x4(%esp)
c010b90e:	af 
c010b90f:	89 04 24             	mov    %eax,(%esp)
c010b912:	e8 eb a9 ff ff       	call   c0106302 <pgdir_alloc_page>
c010b917:	85 c0                	test   %eax,%eax
c010b919:	75 24                	jne    c010b93f <load_icode+0x48f>
c010b91b:	c7 44 24 0c fc 00 11 	movl   $0xc01100fc,0xc(%esp)
c010b922:	c0 
c010b923:	c7 44 24 08 fc ff 10 	movl   $0xc010fffc,0x8(%esp)
c010b92a:	c0 
c010b92b:	c7 44 24 04 7b 02 00 	movl   $0x27b,0x4(%esp)
c010b932:	00 
c010b933:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010b93a:	e8 94 54 ff ff       	call   c0100dd3 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-3*PGSIZE , PTE_USER) != NULL);
c010b93f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b942:	8b 40 0c             	mov    0xc(%eax),%eax
c010b945:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b94c:	00 
c010b94d:	c7 44 24 04 00 d0 ff 	movl   $0xafffd000,0x4(%esp)
c010b954:	af 
c010b955:	89 04 24             	mov    %eax,(%esp)
c010b958:	e8 a5 a9 ff ff       	call   c0106302 <pgdir_alloc_page>
c010b95d:	85 c0                	test   %eax,%eax
c010b95f:	75 24                	jne    c010b985 <load_icode+0x4d5>
c010b961:	c7 44 24 0c 40 01 11 	movl   $0xc0110140,0xc(%esp)
c010b968:	c0 
c010b969:	c7 44 24 08 fc ff 10 	movl   $0xc010fffc,0x8(%esp)
c010b970:	c0 
c010b971:	c7 44 24 04 7c 02 00 	movl   $0x27c,0x4(%esp)
c010b978:	00 
c010b979:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010b980:	e8 4e 54 ff ff       	call   c0100dd3 <__panic>
    assert(pgdir_alloc_page(mm->pgdir, USTACKTOP-4*PGSIZE , PTE_USER) != NULL);
c010b985:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b988:	8b 40 0c             	mov    0xc(%eax),%eax
c010b98b:	c7 44 24 08 07 00 00 	movl   $0x7,0x8(%esp)
c010b992:	00 
c010b993:	c7 44 24 04 00 c0 ff 	movl   $0xafffc000,0x4(%esp)
c010b99a:	af 
c010b99b:	89 04 24             	mov    %eax,(%esp)
c010b99e:	e8 5f a9 ff ff       	call   c0106302 <pgdir_alloc_page>
c010b9a3:	85 c0                	test   %eax,%eax
c010b9a5:	75 24                	jne    c010b9cb <load_icode+0x51b>
c010b9a7:	c7 44 24 0c 84 01 11 	movl   $0xc0110184,0xc(%esp)
c010b9ae:	c0 
c010b9af:	c7 44 24 08 fc ff 10 	movl   $0xc010fffc,0x8(%esp)
c010b9b6:	c0 
c010b9b7:	c7 44 24 04 7d 02 00 	movl   $0x27d,0x4(%esp)
c010b9be:	00 
c010b9bf:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010b9c6:	e8 08 54 ff ff       	call   c0100dd3 <__panic>

    //(5) set current process's mm, sr3, and set CR3 reg = physical addr of Page Directory
    mm_count_inc(mm);
c010b9cb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010b9ce:	89 04 24             	mov    %eax,(%esp)
c010b9d1:	e8 7e ed ff ff       	call   c010a754 <mm_count_inc>
    current->mm = mm;
c010b9d6:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b9db:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b9de:	89 50 18             	mov    %edx,0x18(%eax)
    current->cr3 = PADDR(mm->pgdir);
c010b9e1:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010b9e6:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010b9e9:	8b 52 0c             	mov    0xc(%edx),%edx
c010b9ec:	89 55 b8             	mov    %edx,-0x48(%ebp)
c010b9ef:	81 7d b8 ff ff ff bf 	cmpl   $0xbfffffff,-0x48(%ebp)
c010b9f6:	77 23                	ja     c010ba1b <load_icode+0x56b>
c010b9f8:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010b9fb:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010b9ff:	c7 44 24 08 b0 ff 10 	movl   $0xc010ffb0,0x8(%esp)
c010ba06:	c0 
c010ba07:	c7 44 24 04 82 02 00 	movl   $0x282,0x4(%esp)
c010ba0e:	00 
c010ba0f:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010ba16:	e8 b8 53 ff ff       	call   c0100dd3 <__panic>
c010ba1b:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010ba1e:	81 c2 00 00 00 40    	add    $0x40000000,%edx
c010ba24:	89 50 40             	mov    %edx,0x40(%eax)
    lcr3(PADDR(mm->pgdir));
c010ba27:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ba2a:	8b 40 0c             	mov    0xc(%eax),%eax
c010ba2d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c010ba30:	81 7d b4 ff ff ff bf 	cmpl   $0xbfffffff,-0x4c(%ebp)
c010ba37:	77 23                	ja     c010ba5c <load_icode+0x5ac>
c010ba39:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010ba3c:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ba40:	c7 44 24 08 b0 ff 10 	movl   $0xc010ffb0,0x8(%esp)
c010ba47:	c0 
c010ba48:	c7 44 24 04 83 02 00 	movl   $0x283,0x4(%esp)
c010ba4f:	00 
c010ba50:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010ba57:	e8 77 53 ff ff       	call   c0100dd3 <__panic>
c010ba5c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c010ba5f:	05 00 00 00 40       	add    $0x40000000,%eax
c010ba64:	89 45 ac             	mov    %eax,-0x54(%ebp)
c010ba67:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010ba6a:	0f 22 d8             	mov    %eax,%cr3

    //(6) setup trapframe for user environment
    struct trapframe *tf = current->tf;
c010ba6d:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010ba72:	8b 40 3c             	mov    0x3c(%eax),%eax
c010ba75:	89 45 b0             	mov    %eax,-0x50(%ebp)
    memset(tf, 0, sizeof(struct trapframe));
c010ba78:	c7 44 24 08 4c 00 00 	movl   $0x4c,0x8(%esp)
c010ba7f:	00 
c010ba80:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010ba87:	00 
c010ba88:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ba8b:	89 04 24             	mov    %eax,(%esp)
c010ba8e:	e8 d3 1e 00 00       	call   c010d966 <memset>
     *          tf_ds=tf_es=tf_ss should be USER_DS segment
     *          tf_esp should be the top addr of user stack (USTACKTOP)
     *          tf_eip should be the entry point of this binary program (elf->e_entry)
     *          tf_eflags should be set to enable computer to produce Interrupt
     */
    tf->tf_cs = USER_CS;
c010ba93:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ba96:	66 c7 40 3c 1b 00    	movw   $0x1b,0x3c(%eax)
    tf->tf_ds = tf->tf_es = tf->tf_ss = USER_DS;
c010ba9c:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010ba9f:	66 c7 40 48 23 00    	movw   $0x23,0x48(%eax)
c010baa5:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010baa8:	0f b7 50 48          	movzwl 0x48(%eax),%edx
c010baac:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010baaf:	66 89 50 28          	mov    %dx,0x28(%eax)
c010bab3:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bab6:	0f b7 50 28          	movzwl 0x28(%eax),%edx
c010baba:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010babd:	66 89 50 2c          	mov    %dx,0x2c(%eax)
    tf->tf_esp = USTACKTOP;
c010bac1:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bac4:	c7 40 44 00 00 00 b0 	movl   $0xb0000000,0x44(%eax)
    tf->tf_eip = elf->e_entry;
c010bacb:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010bace:	8b 50 18             	mov    0x18(%eax),%edx
c010bad1:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bad4:	89 50 38             	mov    %edx,0x38(%eax)
    tf->tf_eflags = FL_IF;
c010bad7:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010bada:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
    ret = 0;
c010bae1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
out:
    return ret;
c010bae8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010baeb:	eb 23                	jmp    c010bb10 <load_icode+0x660>
bad_cleanup_mmap:
    exit_mmap(mm);
c010baed:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010baf0:	89 04 24             	mov    %eax,(%esp)
c010baf3:	e8 b9 cd ff ff       	call   c01088b1 <exit_mmap>
bad_elf_cleanup_pgdir:
    put_pgdir(mm);
c010baf8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010bafb:	89 04 24             	mov    %eax,(%esp)
c010bafe:	e8 6d f4 ff ff       	call   c010af70 <put_pgdir>
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010bb03:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010bb06:	89 04 24             	mov    %eax,(%esp)
c010bb09:	e8 e4 ca ff ff       	call   c01085f2 <mm_destroy>
bad_mm:
    goto out;
c010bb0e:	eb d8                	jmp    c010bae8 <load_icode+0x638>
}
c010bb10:	c9                   	leave  
c010bb11:	c3                   	ret    

c010bb12 <do_execve>:

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, size_t len, unsigned char *binary, size_t size) {
c010bb12:	55                   	push   %ebp
c010bb13:	89 e5                	mov    %esp,%ebp
c010bb15:	83 ec 58             	sub    $0x58,%esp
    struct mm_struct *mm = current->mm;
c010bb18:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010bb1d:	8b 40 18             	mov    0x18(%eax),%eax
c010bb20:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!user_mem_check(mm, (uintptr_t)name, len, 0)) {
c010bb23:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb26:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
c010bb2d:	00 
c010bb2e:	8b 55 0c             	mov    0xc(%ebp),%edx
c010bb31:	89 54 24 08          	mov    %edx,0x8(%esp)
c010bb35:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb39:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bb3c:	89 04 24             	mov    %eax,(%esp)
c010bb3f:	e8 e8 d7 ff ff       	call   c010932c <user_mem_check>
c010bb44:	85 c0                	test   %eax,%eax
c010bb46:	75 0a                	jne    c010bb52 <do_execve+0x40>
        return -E_INVAL;
c010bb48:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010bb4d:	e9 f4 00 00 00       	jmp    c010bc46 <do_execve+0x134>
    }
    if (len > PROC_NAME_LEN) {
c010bb52:	83 7d 0c 32          	cmpl   $0x32,0xc(%ebp)
c010bb56:	76 07                	jbe    c010bb5f <do_execve+0x4d>
        len = PROC_NAME_LEN;
c010bb58:	c7 45 0c 32 00 00 00 	movl   $0x32,0xc(%ebp)
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010bb5f:	c7 44 24 08 33 00 00 	movl   $0x33,0x8(%esp)
c010bb66:	00 
c010bb67:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bb6e:	00 
c010bb6f:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010bb72:	89 04 24             	mov    %eax,(%esp)
c010bb75:	e8 ec 1d 00 00       	call   c010d966 <memset>
    memcpy(local_name, name, len);
c010bb7a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bb7d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010bb81:	8b 45 08             	mov    0x8(%ebp),%eax
c010bb84:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bb88:	8d 45 b9             	lea    -0x47(%ebp),%eax
c010bb8b:	89 04 24             	mov    %eax,(%esp)
c010bb8e:	e8 b5 1e 00 00       	call   c010da48 <memcpy>

    if (mm != NULL) {
c010bb93:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bb97:	74 4a                	je     c010bbe3 <do_execve+0xd1>
        lcr3(boot_cr3);
c010bb99:	a1 ec 54 1c c0       	mov    0xc01c54ec,%eax
c010bb9e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010bba1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bba4:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010bba7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bbaa:	89 04 24             	mov    %eax,(%esp)
c010bbad:	e8 bc eb ff ff       	call   c010a76e <mm_count_dec>
c010bbb2:	85 c0                	test   %eax,%eax
c010bbb4:	75 21                	jne    c010bbd7 <do_execve+0xc5>
            exit_mmap(mm);
c010bbb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bbb9:	89 04 24             	mov    %eax,(%esp)
c010bbbc:	e8 f0 cc ff ff       	call   c01088b1 <exit_mmap>
            put_pgdir(mm);
c010bbc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bbc4:	89 04 24             	mov    %eax,(%esp)
c010bbc7:	e8 a4 f3 ff ff       	call   c010af70 <put_pgdir>
            mm_destroy(mm);
c010bbcc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bbcf:	89 04 24             	mov    %eax,(%esp)
c010bbd2:	e8 1b ca ff ff       	call   c01085f2 <mm_destroy>
        }
        current->mm = NULL;
c010bbd7:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010bbdc:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
c010bbe3:	8b 45 14             	mov    0x14(%ebp),%eax
c010bbe6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bbea:	8b 45 10             	mov    0x10(%ebp),%eax
c010bbed:	89 04 24             	mov    %eax,(%esp)
c010bbf0:	e8 bb f8 ff ff       	call   c010b4b0 <load_icode>
c010bbf5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010bbf8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bbfc:	74 2f                	je     c010bc2d <do_execve+0x11b>
        goto execve_exit;
c010bbfe:	90                   	nop
    }
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    do_exit(ret);
c010bbff:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc02:	89 04 24             	mov    %eax,(%esp)
c010bc05:	e8 ac f6 ff ff       	call   c010b2b6 <do_exit>
    panic("already exit: %e.\n", ret);
c010bc0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010bc0d:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010bc11:	c7 44 24 08 c7 01 11 	movl   $0xc01101c7,0x8(%esp)
c010bc18:	c0 
c010bc19:	c7 44 24 04 c5 02 00 	movl   $0x2c5,0x4(%esp)
c010bc20:	00 
c010bc21:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010bc28:	e8 a6 51 ff ff       	call   c0100dd3 <__panic>
    }
    int ret;
    if ((ret = load_icode(binary, size)) != 0) {
        goto execve_exit;
    }
    set_proc_name(current, local_name);
c010bc2d:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010bc32:	8d 55 b9             	lea    -0x47(%ebp),%edx
c010bc35:	89 54 24 04          	mov    %edx,0x4(%esp)
c010bc39:	89 04 24             	mov    %eax,(%esp)
c010bc3c:	e8 27 ed ff ff       	call   c010a968 <set_proc_name>
    return 0;
c010bc41:	b8 00 00 00 00       	mov    $0x0,%eax

execve_exit:
    do_exit(ret);
    panic("already exit: %e.\n", ret);
}
c010bc46:	c9                   	leave  
c010bc47:	c3                   	ret    

c010bc48 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010bc48:	55                   	push   %ebp
c010bc49:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010bc4b:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010bc50:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010bc57:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bc5c:	5d                   	pop    %ebp
c010bc5d:	c3                   	ret    

c010bc5e <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010bc5e:	55                   	push   %ebp
c010bc5f:	89 e5                	mov    %esp,%ebp
c010bc61:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010bc64:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010bc69:	8b 40 18             	mov    0x18(%eax),%eax
c010bc6c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010bc6f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bc73:	74 30                	je     c010bca5 <do_wait+0x47>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010bc75:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bc78:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
c010bc7f:	00 
c010bc80:	c7 44 24 08 04 00 00 	movl   $0x4,0x8(%esp)
c010bc87:	00 
c010bc88:	89 44 24 04          	mov    %eax,0x4(%esp)
c010bc8c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010bc8f:	89 04 24             	mov    %eax,(%esp)
c010bc92:	e8 95 d6 ff ff       	call   c010932c <user_mem_check>
c010bc97:	85 c0                	test   %eax,%eax
c010bc99:	75 0a                	jne    c010bca5 <do_wait+0x47>
            return -E_INVAL;
c010bc9b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010bca0:	e9 57 01 00 00       	jmp    c010bdfc <do_wait+0x19e>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010bca5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010bcac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bcb0:	74 39                	je     c010bceb <do_wait+0x8d>
        proc = find_proc(pid);
c010bcb2:	8b 45 08             	mov    0x8(%ebp),%eax
c010bcb5:	89 04 24             	mov    %eax,(%esp)
c010bcb8:	e8 c4 f0 ff ff       	call   c010ad81 <find_proc>
c010bcbd:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010bcc0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bcc4:	74 5a                	je     c010bd20 <do_wait+0xc2>
c010bcc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bcc9:	8b 50 14             	mov    0x14(%eax),%edx
c010bccc:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010bcd1:	39 c2                	cmp    %eax,%edx
c010bcd3:	75 4b                	jne    c010bd20 <do_wait+0xc2>
            haskid = 1;
c010bcd5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010bcdc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bcdf:	8b 00                	mov    (%eax),%eax
c010bce1:	83 f8 03             	cmp    $0x3,%eax
c010bce4:	75 3a                	jne    c010bd20 <do_wait+0xc2>
                goto found;
c010bce6:	e9 89 00 00 00       	jmp    c010bd74 <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
c010bceb:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010bcf0:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010bcf6:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010bcf9:	eb 1f                	jmp    c010bd1a <do_wait+0xbc>
            haskid = 1;
c010bcfb:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010bd02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd05:	8b 00                	mov    (%eax),%eax
c010bd07:	83 f8 03             	cmp    $0x3,%eax
c010bd0a:	75 02                	jne    c010bd0e <do_wait+0xb0>
                goto found;
c010bd0c:	eb 66                	jmp    c010bd74 <do_wait+0x116>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010bd0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd11:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010bd17:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bd1a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bd1e:	75 db                	jne    c010bcfb <do_wait+0x9d>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010bd20:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bd24:	74 44                	je     c010bd6a <do_wait+0x10c>
        current->state = PROC_SLEEPING;
c010bd26:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010bd2b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010bd31:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010bd36:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010bd3d:	00 00 80 
        schedule();
c010bd40:	e8 68 0b 00 00       	call   c010c8ad <schedule>
        if (current->flags & PF_EXITING) {
c010bd45:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010bd4a:	8b 40 44             	mov    0x44(%eax),%eax
c010bd4d:	83 e0 01             	and    $0x1,%eax
c010bd50:	85 c0                	test   %eax,%eax
c010bd52:	74 11                	je     c010bd65 <do_wait+0x107>
            do_exit(-E_KILLED);
c010bd54:	c7 04 24 f7 ff ff ff 	movl   $0xfffffff7,(%esp)
c010bd5b:	e8 56 f5 ff ff       	call   c010b2b6 <do_exit>
        }
        goto repeat;
c010bd60:	e9 40 ff ff ff       	jmp    c010bca5 <do_wait+0x47>
c010bd65:	e9 3b ff ff ff       	jmp    c010bca5 <do_wait+0x47>
    }
    return -E_BAD_PROC;
c010bd6a:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010bd6f:	e9 88 00 00 00       	jmp    c010bdfc <do_wait+0x19e>

found:
    if (proc == idleproc || proc == initproc) {
c010bd74:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010bd79:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010bd7c:	74 0a                	je     c010bd88 <do_wait+0x12a>
c010bd7e:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010bd83:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010bd86:	75 1c                	jne    c010bda4 <do_wait+0x146>
        panic("wait idleproc or initproc.\n");
c010bd88:	c7 44 24 08 da 01 11 	movl   $0xc01101da,0x8(%esp)
c010bd8f:	c0 
c010bd90:	c7 44 24 04 fe 02 00 	movl   $0x2fe,0x4(%esp)
c010bd97:	00 
c010bd98:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010bd9f:	e8 2f 50 ff ff       	call   c0100dd3 <__panic>
    }
    if (code_store != NULL) {
c010bda4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bda8:	74 0e                	je     c010bdb8 <do_wait+0x15a>
        *code_store = proc->exit_code;
c010bdaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bdad:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010bdb3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bdb6:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010bdb8:	e8 4d e8 ff ff       	call   c010a60a <__intr_save>
c010bdbd:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010bdc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bdc3:	89 04 24             	mov    %eax,(%esp)
c010bdc6:	e8 81 ef ff ff       	call   c010ad4c <unhash_proc>
        remove_links(proc);
c010bdcb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bdce:	89 04 24             	mov    %eax,(%esp)
c010bdd1:	e8 d1 ec ff ff       	call   c010aaa7 <remove_links>
    }
    local_intr_restore(intr_flag);
c010bdd6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010bdd9:	89 04 24             	mov    %eax,(%esp)
c010bddc:	e8 53 e8 ff ff       	call   c010a634 <__intr_restore>
    put_kstack(proc);
c010bde1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bde4:	89 04 24             	mov    %eax,(%esp)
c010bde7:	e8 b7 f0 ff ff       	call   c010aea3 <put_kstack>
    kfree(proc);
c010bdec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bdef:	89 04 24             	mov    %eax,(%esp)
c010bdf2:	e8 cd 91 ff ff       	call   c0104fc4 <kfree>
    return 0;
c010bdf7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bdfc:	c9                   	leave  
c010bdfd:	c3                   	ret    

c010bdfe <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010bdfe:	55                   	push   %ebp
c010bdff:	89 e5                	mov    %esp,%ebp
c010be01:	83 ec 28             	sub    $0x28,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010be04:	8b 45 08             	mov    0x8(%ebp),%eax
c010be07:	89 04 24             	mov    %eax,(%esp)
c010be0a:	e8 72 ef ff ff       	call   c010ad81 <find_proc>
c010be0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010be12:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010be16:	74 44                	je     c010be5c <do_kill+0x5e>
        if (!(proc->flags & PF_EXITING)) {
c010be18:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be1b:	8b 40 44             	mov    0x44(%eax),%eax
c010be1e:	83 e0 01             	and    $0x1,%eax
c010be21:	85 c0                	test   %eax,%eax
c010be23:	75 30                	jne    c010be55 <do_kill+0x57>
            proc->flags |= PF_EXITING;
c010be25:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be28:	8b 40 44             	mov    0x44(%eax),%eax
c010be2b:	83 c8 01             	or     $0x1,%eax
c010be2e:	89 c2                	mov    %eax,%edx
c010be30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be33:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010be36:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be39:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010be3f:	85 c0                	test   %eax,%eax
c010be41:	79 0b                	jns    c010be4e <do_kill+0x50>
                wakeup_proc(proc);
c010be43:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010be46:	89 04 24             	mov    %eax,(%esp)
c010be49:	e8 c3 09 00 00       	call   c010c811 <wakeup_proc>
            }
            return 0;
c010be4e:	b8 00 00 00 00       	mov    $0x0,%eax
c010be53:	eb 0c                	jmp    c010be61 <do_kill+0x63>
        }
        return -E_KILLED;
c010be55:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010be5a:	eb 05                	jmp    c010be61 <do_kill+0x63>
    }
    return -E_INVAL;
c010be5c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010be61:	c9                   	leave  
c010be62:	c3                   	ret    

c010be63 <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, unsigned char *binary, size_t size) {
c010be63:	55                   	push   %ebp
c010be64:	89 e5                	mov    %esp,%ebp
c010be66:	57                   	push   %edi
c010be67:	56                   	push   %esi
c010be68:	53                   	push   %ebx
c010be69:	83 ec 2c             	sub    $0x2c,%esp
    int ret, len = strlen(name);
c010be6c:	8b 45 08             	mov    0x8(%ebp),%eax
c010be6f:	89 04 24             	mov    %eax,(%esp)
c010be72:	e8 c0 17 00 00       	call   c010d637 <strlen>
c010be77:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    asm volatile (
c010be7a:	b8 04 00 00 00       	mov    $0x4,%eax
c010be7f:	8b 55 08             	mov    0x8(%ebp),%edx
c010be82:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
c010be85:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010be88:	8b 75 10             	mov    0x10(%ebp),%esi
c010be8b:	89 f7                	mov    %esi,%edi
c010be8d:	cd 80                	int    $0x80
c010be8f:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (len), "b" (binary), "D" (size)
        : "memory");
    return ret;
c010be92:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
c010be95:	83 c4 2c             	add    $0x2c,%esp
c010be98:	5b                   	pop    %ebx
c010be99:	5e                   	pop    %esi
c010be9a:	5f                   	pop    %edi
c010be9b:	5d                   	pop    %ebp
c010be9c:	c3                   	ret    

c010be9d <user_main>:

#define KERNEL_EXECVE2(x, xstart, xsize)        __KERNEL_EXECVE2(x, xstart, xsize)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010be9d:	55                   	push   %ebp
c010be9e:	89 e5                	mov    %esp,%ebp
c010bea0:	83 ec 18             	sub    $0x18,%esp
#ifdef TEST
    KERNEL_EXECVE2(TEST, TESTSTART, TESTSIZE);
c010bea3:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010bea8:	8b 40 04             	mov    0x4(%eax),%eax
c010beab:	c7 44 24 08 f6 01 11 	movl   $0xc01101f6,0x8(%esp)
c010beb2:	c0 
c010beb3:	89 44 24 04          	mov    %eax,0x4(%esp)
c010beb7:	c7 04 24 00 02 11 c0 	movl   $0xc0110200,(%esp)
c010bebe:	e8 95 44 ff ff       	call   c0100358 <cprintf>
c010bec3:	b8 04 7a 00 00       	mov    $0x7a04,%eax
c010bec8:	89 44 24 08          	mov    %eax,0x8(%esp)
c010becc:	c7 44 24 04 e0 63 17 	movl   $0xc01763e0,0x4(%esp)
c010bed3:	c0 
c010bed4:	c7 04 24 f6 01 11 c0 	movl   $0xc01101f6,(%esp)
c010bedb:	e8 83 ff ff ff       	call   c010be63 <kernel_execve>
#else
    KERNEL_EXECVE(exit);
#endif
    panic("user_main execve failed.\n");
c010bee0:	c7 44 24 08 27 02 11 	movl   $0xc0110227,0x8(%esp)
c010bee7:	c0 
c010bee8:	c7 44 24 04 47 03 00 	movl   $0x347,0x4(%esp)
c010beef:	00 
c010bef0:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010bef7:	e8 d7 4e ff ff       	call   c0100dd3 <__panic>

c010befc <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010befc:	55                   	push   %ebp
c010befd:	89 e5                	mov    %esp,%ebp
c010beff:	83 ec 38             	sub    $0x38,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010bf02:	e8 b4 95 ff ff       	call   c01054bb <nr_free_pages>
c010bf07:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t kernel_allocated_store = kallocated();
c010bf0a:	e8 7d 8f ff ff       	call   c0104e8c <kallocated>
c010bf0f:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010bf12:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010bf19:	00 
c010bf1a:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bf21:	00 
c010bf22:	c7 04 24 9d be 10 c0 	movl   $0xc010be9d,(%esp)
c010bf29:	e8 c7 ee ff ff       	call   c010adf5 <kernel_thread>
c010bf2e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010bf31:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010bf35:	7f 1c                	jg     c010bf53 <init_main+0x57>
        panic("create user_main failed.\n");
c010bf37:	c7 44 24 08 41 02 11 	movl   $0xc0110241,0x8(%esp)
c010bf3e:	c0 
c010bf3f:	c7 44 24 04 52 03 00 	movl   $0x352,0x4(%esp)
c010bf46:	00 
c010bf47:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010bf4e:	e8 80 4e ff ff       	call   c0100dd3 <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010bf53:	e8 e1 d9 ff ff       	call   c0109939 <check_sync>

    while (do_wait(0, NULL) == 0) {
c010bf58:	eb 05                	jmp    c010bf5f <init_main+0x63>
        schedule();
c010bf5a:	e8 4e 09 00 00       	call   c010c8ad <schedule>
        panic("create user_main failed.\n");
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c010bf5f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010bf66:	00 
c010bf67:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010bf6e:	e8 eb fc ff ff       	call   c010bc5e <do_wait>
c010bf73:	85 c0                	test   %eax,%eax
c010bf75:	74 e3                	je     c010bf5a <init_main+0x5e>
        schedule();
    }

    cprintf("all user-mode processes have quit.\n");
c010bf77:	c7 04 24 5c 02 11 c0 	movl   $0xc011025c,(%esp)
c010bf7e:	e8 d5 43 ff ff       	call   c0100358 <cprintf>
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010bf83:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010bf88:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010bf8e:	85 c0                	test   %eax,%eax
c010bf90:	75 1e                	jne    c010bfb0 <init_main+0xb4>
c010bf92:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010bf97:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010bf9d:	85 c0                	test   %eax,%eax
c010bf9f:	75 0f                	jne    c010bfb0 <init_main+0xb4>
c010bfa1:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010bfa6:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010bfac:	85 c0                	test   %eax,%eax
c010bfae:	74 24                	je     c010bfd4 <init_main+0xd8>
c010bfb0:	c7 44 24 0c 80 02 11 	movl   $0xc0110280,0xc(%esp)
c010bfb7:	c0 
c010bfb8:	c7 44 24 08 fc ff 10 	movl   $0xc010fffc,0x8(%esp)
c010bfbf:	c0 
c010bfc0:	c7 44 24 04 5c 03 00 	movl   $0x35c,0x4(%esp)
c010bfc7:	00 
c010bfc8:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010bfcf:	e8 ff 4d ff ff       	call   c0100dd3 <__panic>
    assert(nr_process == 2);
c010bfd4:	a1 60 54 1c c0       	mov    0xc01c5460,%eax
c010bfd9:	83 f8 02             	cmp    $0x2,%eax
c010bfdc:	74 24                	je     c010c002 <init_main+0x106>
c010bfde:	c7 44 24 0c cb 02 11 	movl   $0xc01102cb,0xc(%esp)
c010bfe5:	c0 
c010bfe6:	c7 44 24 08 fc ff 10 	movl   $0xc010fffc,0x8(%esp)
c010bfed:	c0 
c010bfee:	c7 44 24 04 5d 03 00 	movl   $0x35d,0x4(%esp)
c010bff5:	00 
c010bff6:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010bffd:	e8 d1 4d ff ff       	call   c0100dd3 <__panic>
c010c002:	c7 45 e8 bc 56 1c c0 	movl   $0xc01c56bc,-0x18(%ebp)
c010c009:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c00c:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010c00f:	8b 15 44 34 1c c0    	mov    0xc01c3444,%edx
c010c015:	83 c2 7c             	add    $0x7c,%edx
c010c018:	39 d0                	cmp    %edx,%eax
c010c01a:	74 24                	je     c010c040 <init_main+0x144>
c010c01c:	c7 44 24 0c dc 02 11 	movl   $0xc01102dc,0xc(%esp)
c010c023:	c0 
c010c024:	c7 44 24 08 fc ff 10 	movl   $0xc010fffc,0x8(%esp)
c010c02b:	c0 
c010c02c:	c7 44 24 04 5e 03 00 	movl   $0x35e,0x4(%esp)
c010c033:	00 
c010c034:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010c03b:	e8 93 4d ff ff       	call   c0100dd3 <__panic>
c010c040:	c7 45 e4 bc 56 1c c0 	movl   $0xc01c56bc,-0x1c(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010c047:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c04a:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010c04c:	8b 15 44 34 1c c0    	mov    0xc01c3444,%edx
c010c052:	83 c2 7c             	add    $0x7c,%edx
c010c055:	39 d0                	cmp    %edx,%eax
c010c057:	74 24                	je     c010c07d <init_main+0x181>
c010c059:	c7 44 24 0c 0c 03 11 	movl   $0xc011030c,0xc(%esp)
c010c060:	c0 
c010c061:	c7 44 24 08 fc ff 10 	movl   $0xc010fffc,0x8(%esp)
c010c068:	c0 
c010c069:	c7 44 24 04 5f 03 00 	movl   $0x35f,0x4(%esp)
c010c070:	00 
c010c071:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010c078:	e8 56 4d ff ff       	call   c0100dd3 <__panic>

    cprintf("init check memory pass.\n");
c010c07d:	c7 04 24 3c 03 11 c0 	movl   $0xc011033c,(%esp)
c010c084:	e8 cf 42 ff ff       	call   c0100358 <cprintf>
    return 0;
c010c089:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c08e:	c9                   	leave  
c010c08f:	c3                   	ret    

c010c090 <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and
//           - create the second kernel thread init_main
void
proc_init(void) {
c010c090:	55                   	push   %ebp
c010c091:	89 e5                	mov    %esp,%ebp
c010c093:	83 ec 28             	sub    $0x28,%esp
c010c096:	c7 45 ec bc 56 1c c0 	movl   $0xc01c56bc,-0x14(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010c09d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c0a0:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c0a3:	89 50 04             	mov    %edx,0x4(%eax)
c010c0a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c0a9:	8b 50 04             	mov    0x4(%eax),%edx
c010c0ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c0af:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010c0b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010c0b8:	eb 26                	jmp    c010c0e0 <proc_init+0x50>
        list_init(hash_list + i);
c010c0ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c0bd:	c1 e0 03             	shl    $0x3,%eax
c010c0c0:	05 60 34 1c c0       	add    $0xc01c3460,%eax
c010c0c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c0c8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c0cb:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c0ce:	89 50 04             	mov    %edx,0x4(%eax)
c010c0d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c0d4:	8b 50 04             	mov    0x4(%eax),%edx
c010c0d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c0da:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010c0dc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010c0e0:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010c0e7:	7e d1                	jle    c010c0ba <proc_init+0x2a>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010c0e9:	e8 f3 e6 ff ff       	call   c010a7e1 <alloc_proc>
c010c0ee:	a3 40 34 1c c0       	mov    %eax,0xc01c3440
c010c0f3:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010c0f8:	85 c0                	test   %eax,%eax
c010c0fa:	75 1c                	jne    c010c118 <proc_init+0x88>
        panic("cannot alloc idleproc.\n");
c010c0fc:	c7 44 24 08 55 03 11 	movl   $0xc0110355,0x8(%esp)
c010c103:	c0 
c010c104:	c7 44 24 04 71 03 00 	movl   $0x371,0x4(%esp)
c010c10b:	00 
c010c10c:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010c113:	e8 bb 4c ff ff       	call   c0100dd3 <__panic>
    }

    idleproc->pid = 0;
c010c118:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010c11d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010c124:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010c129:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010c12f:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010c134:	ba 00 f0 12 c0       	mov    $0xc012f000,%edx
c010c139:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010c13c:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010c141:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    set_proc_name(idleproc, "idle");
c010c148:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010c14d:	c7 44 24 04 6d 03 11 	movl   $0xc011036d,0x4(%esp)
c010c154:	c0 
c010c155:	89 04 24             	mov    %eax,(%esp)
c010c158:	e8 0b e8 ff ff       	call   c010a968 <set_proc_name>
    nr_process ++;
c010c15d:	a1 60 54 1c c0       	mov    0xc01c5460,%eax
c010c162:	83 c0 01             	add    $0x1,%eax
c010c165:	a3 60 54 1c c0       	mov    %eax,0xc01c5460

    current = idleproc;
c010c16a:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010c16f:	a3 48 34 1c c0       	mov    %eax,0xc01c3448

    int pid = kernel_thread(init_main, NULL, 0);
c010c174:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
c010c17b:	00 
c010c17c:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
c010c183:	00 
c010c184:	c7 04 24 fc be 10 c0 	movl   $0xc010befc,(%esp)
c010c18b:	e8 65 ec ff ff       	call   c010adf5 <kernel_thread>
c010c190:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pid <= 0) {
c010c193:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c197:	7f 1c                	jg     c010c1b5 <proc_init+0x125>
        panic("create init_main failed.\n");
c010c199:	c7 44 24 08 72 03 11 	movl   $0xc0110372,0x8(%esp)
c010c1a0:	c0 
c010c1a1:	c7 44 24 04 7f 03 00 	movl   $0x37f,0x4(%esp)
c010c1a8:	00 
c010c1a9:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010c1b0:	e8 1e 4c ff ff       	call   c0100dd3 <__panic>
    }

    initproc = find_proc(pid);
c010c1b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c1b8:	89 04 24             	mov    %eax,(%esp)
c010c1bb:	e8 c1 eb ff ff       	call   c010ad81 <find_proc>
c010c1c0:	a3 44 34 1c c0       	mov    %eax,0xc01c3444
    set_proc_name(initproc, "init");
c010c1c5:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010c1ca:	c7 44 24 04 8c 03 11 	movl   $0xc011038c,0x4(%esp)
c010c1d1:	c0 
c010c1d2:	89 04 24             	mov    %eax,(%esp)
c010c1d5:	e8 8e e7 ff ff       	call   c010a968 <set_proc_name>

    assert(idleproc != NULL && idleproc->pid == 0);
c010c1da:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010c1df:	85 c0                	test   %eax,%eax
c010c1e1:	74 0c                	je     c010c1ef <proc_init+0x15f>
c010c1e3:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010c1e8:	8b 40 04             	mov    0x4(%eax),%eax
c010c1eb:	85 c0                	test   %eax,%eax
c010c1ed:	74 24                	je     c010c213 <proc_init+0x183>
c010c1ef:	c7 44 24 0c 94 03 11 	movl   $0xc0110394,0xc(%esp)
c010c1f6:	c0 
c010c1f7:	c7 44 24 08 fc ff 10 	movl   $0xc010fffc,0x8(%esp)
c010c1fe:	c0 
c010c1ff:	c7 44 24 04 85 03 00 	movl   $0x385,0x4(%esp)
c010c206:	00 
c010c207:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010c20e:	e8 c0 4b ff ff       	call   c0100dd3 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010c213:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010c218:	85 c0                	test   %eax,%eax
c010c21a:	74 0d                	je     c010c229 <proc_init+0x199>
c010c21c:	a1 44 34 1c c0       	mov    0xc01c3444,%eax
c010c221:	8b 40 04             	mov    0x4(%eax),%eax
c010c224:	83 f8 01             	cmp    $0x1,%eax
c010c227:	74 24                	je     c010c24d <proc_init+0x1bd>
c010c229:	c7 44 24 0c bc 03 11 	movl   $0xc01103bc,0xc(%esp)
c010c230:	c0 
c010c231:	c7 44 24 08 fc ff 10 	movl   $0xc010fffc,0x8(%esp)
c010c238:	c0 
c010c239:	c7 44 24 04 86 03 00 	movl   $0x386,0x4(%esp)
c010c240:	00 
c010c241:	c7 04 24 d4 ff 10 c0 	movl   $0xc010ffd4,(%esp)
c010c248:	e8 86 4b ff ff       	call   c0100dd3 <__panic>
}
c010c24d:	c9                   	leave  
c010c24e:	c3                   	ret    

c010c24f <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010c24f:	55                   	push   %ebp
c010c250:	89 e5                	mov    %esp,%ebp
c010c252:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010c255:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c25a:	8b 40 10             	mov    0x10(%eax),%eax
c010c25d:	85 c0                	test   %eax,%eax
c010c25f:	74 07                	je     c010c268 <cpu_idle+0x19>
            schedule();
c010c261:	e8 47 06 00 00       	call   c010c8ad <schedule>
        }
    }
c010c266:	eb ed                	jmp    c010c255 <cpu_idle+0x6>
c010c268:	eb eb                	jmp    c010c255 <cpu_idle+0x6>

c010c26a <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time)
void
lab6_set_priority(uint32_t priority)
{
c010c26a:	55                   	push   %ebp
c010c26b:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010c26d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c271:	75 11                	jne    c010c284 <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010c273:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c278:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010c27f:	00 00 00 
c010c282:	eb 0e                	jmp    c010c292 <lab6_set_priority+0x28>
    else current->lab6_priority = priority;
c010c284:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c289:	8b 55 08             	mov    0x8(%ebp),%edx
c010c28c:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010c292:	5d                   	pop    %ebp
c010c293:	c3                   	ret    

c010c294 <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010c294:	55                   	push   %ebp
c010c295:	89 e5                	mov    %esp,%ebp
c010c297:	83 ec 38             	sub    $0x38,%esp
    if (time == 0) {
c010c29a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c29e:	75 07                	jne    c010c2a7 <do_sleep+0x13>
        return 0;
c010c2a0:	b8 00 00 00 00       	mov    $0x0,%eax
c010c2a5:	eb 6b                	jmp    c010c312 <do_sleep+0x7e>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010c2a7:	e8 5e e3 ff ff       	call   c010a60a <__intr_save>
c010c2ac:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010c2af:	8b 55 08             	mov    0x8(%ebp),%edx
c010c2b2:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c2b7:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c2bb:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c2bf:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010c2c2:	89 04 24             	mov    %eax,(%esp)
c010c2c5:	e8 07 e3 ff ff       	call   c010a5d1 <timer_init>
c010c2ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010c2cd:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c2d2:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010c2d8:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c2dd:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010c2e4:	00 00 80 
    add_timer(timer);
c010c2e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c2ea:	89 04 24             	mov    %eax,(%esp)
c010c2ed:	e8 46 06 00 00       	call   c010c938 <add_timer>
    local_intr_restore(intr_flag);
c010c2f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c2f5:	89 04 24             	mov    %eax,(%esp)
c010c2f8:	e8 37 e3 ff ff       	call   c010a634 <__intr_restore>

    schedule();
c010c2fd:	e8 ab 05 00 00       	call   c010c8ad <schedule>

    del_timer(timer);
c010c302:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c305:	89 04 24             	mov    %eax,(%esp)
c010c308:	e8 69 07 00 00       	call   c010ca76 <del_timer>
    return 0;
c010c30d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c312:	c9                   	leave  
c010c313:	c3                   	ret    

c010c314 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010c314:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010c318:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010c31a:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010c31d:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010c320:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010c323:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010c326:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010c329:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010c32c:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010c32f:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010c333:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010c336:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010c339:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010c33c:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010c33f:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010c342:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010c345:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010c348:	ff 30                	pushl  (%eax)

    ret
c010c34a:	c3                   	ret    

c010c34b <skew_heap_merge>:
}

static inline skew_heap_entry_t *
skew_heap_merge(skew_heap_entry_t *a, skew_heap_entry_t *b,
                compare_f comp)
{
c010c34b:	55                   	push   %ebp
c010c34c:	89 e5                	mov    %esp,%ebp
c010c34e:	83 ec 28             	sub    $0x28,%esp
     if (a == NULL) return b;
c010c351:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c355:	75 08                	jne    c010c35f <skew_heap_merge+0x14>
c010c357:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c35a:	e9 bd 00 00 00       	jmp    c010c41c <skew_heap_merge+0xd1>
     else if (b == NULL) return a;
c010c35f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010c363:	75 08                	jne    c010c36d <skew_heap_merge+0x22>
c010c365:	8b 45 08             	mov    0x8(%ebp),%eax
c010c368:	e9 af 00 00 00       	jmp    c010c41c <skew_heap_merge+0xd1>
     
     skew_heap_entry_t *l, *r;
     if (comp(a, b) == -1)
c010c36d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c370:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c374:	8b 45 08             	mov    0x8(%ebp),%eax
c010c377:	89 04 24             	mov    %eax,(%esp)
c010c37a:	8b 45 10             	mov    0x10(%ebp),%eax
c010c37d:	ff d0                	call   *%eax
c010c37f:	83 f8 ff             	cmp    $0xffffffff,%eax
c010c382:	75 4d                	jne    c010c3d1 <skew_heap_merge+0x86>
     {
          r = a->left;
c010c384:	8b 45 08             	mov    0x8(%ebp),%eax
c010c387:	8b 40 04             	mov    0x4(%eax),%eax
c010c38a:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a->right, b, comp);
c010c38d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c390:	8b 40 08             	mov    0x8(%eax),%eax
c010c393:	8b 55 10             	mov    0x10(%ebp),%edx
c010c396:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c39a:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c39d:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c3a1:	89 04 24             	mov    %eax,(%esp)
c010c3a4:	e8 a2 ff ff ff       	call   c010c34b <skew_heap_merge>
c010c3a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          a->left = l;
c010c3ac:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3af:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c3b2:	89 50 04             	mov    %edx,0x4(%eax)
          a->right = r;
c010c3b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c3bb:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = a;
c010c3be:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c3c2:	74 08                	je     c010c3cc <skew_heap_merge+0x81>
c010c3c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c3c7:	8b 55 08             	mov    0x8(%ebp),%edx
c010c3ca:	89 10                	mov    %edx,(%eax)

          return a;
c010c3cc:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3cf:	eb 4b                	jmp    c010c41c <skew_heap_merge+0xd1>
     }
     else
     {
          r = b->left;
c010c3d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c3d4:	8b 40 04             	mov    0x4(%eax),%eax
c010c3d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
          l = skew_heap_merge(a, b->right, comp);
c010c3da:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c3dd:	8b 40 08             	mov    0x8(%eax),%eax
c010c3e0:	8b 55 10             	mov    0x10(%ebp),%edx
c010c3e3:	89 54 24 08          	mov    %edx,0x8(%esp)
c010c3e7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c3eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3ee:	89 04 24             	mov    %eax,(%esp)
c010c3f1:	e8 55 ff ff ff       	call   c010c34b <skew_heap_merge>
c010c3f6:	89 45 f0             	mov    %eax,-0x10(%ebp)
          
          b->left = l;
c010c3f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c3fc:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c3ff:	89 50 04             	mov    %edx,0x4(%eax)
          b->right = r;
c010c402:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c405:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c408:	89 50 08             	mov    %edx,0x8(%eax)
          if (l) l->parent = b;
c010c40b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010c40f:	74 08                	je     c010c419 <skew_heap_merge+0xce>
c010c411:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c414:	8b 55 0c             	mov    0xc(%ebp),%edx
c010c417:	89 10                	mov    %edx,(%eax)

          return b;
c010c419:	8b 45 0c             	mov    0xc(%ebp),%eax
     }
}
c010c41c:	c9                   	leave  
c010c41d:	c3                   	ret    

c010c41e <proc_stride_comp_f>:

/* The compare function for two skew_heap_node_t's and the
 * corresponding procs*/
static int
proc_stride_comp_f(void *a, void *b)
{
c010c41e:	55                   	push   %ebp
c010c41f:	89 e5                	mov    %esp,%ebp
c010c421:	83 ec 10             	sub    $0x10,%esp
     struct proc_struct *p = le2proc(a, lab6_run_pool);
c010c424:	8b 45 08             	mov    0x8(%ebp),%eax
c010c427:	2d b0 00 00 00       	sub    $0xb0,%eax
c010c42c:	89 45 fc             	mov    %eax,-0x4(%ebp)
     struct proc_struct *q = le2proc(b, lab6_run_pool);
c010c42f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c432:	2d b0 00 00 00       	sub    $0xb0,%eax
c010c437:	89 45 f8             	mov    %eax,-0x8(%ebp)
     int32_t c = p->lab6_stride - q->lab6_stride;
c010c43a:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c43d:	8b 90 bc 00 00 00    	mov    0xbc(%eax),%edx
c010c443:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c446:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010c44c:	29 c2                	sub    %eax,%edx
c010c44e:	89 d0                	mov    %edx,%eax
c010c450:	89 45 f4             	mov    %eax,-0xc(%ebp)
     if (c > 0) return 1;
c010c453:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c457:	7e 07                	jle    c010c460 <proc_stride_comp_f+0x42>
c010c459:	b8 01 00 00 00       	mov    $0x1,%eax
c010c45e:	eb 12                	jmp    c010c472 <proc_stride_comp_f+0x54>
     else if (c == 0) return 0;
c010c460:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c464:	75 07                	jne    c010c46d <proc_stride_comp_f+0x4f>
c010c466:	b8 00 00 00 00       	mov    $0x0,%eax
c010c46b:	eb 05                	jmp    c010c472 <proc_stride_comp_f+0x54>
     else return -1;
c010c46d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
c010c472:	c9                   	leave  
c010c473:	c3                   	ret    

c010c474 <stride_init>:
 *   - max_time_slice: no need here, the variable would be assigned by the caller.
 *
 * hint: see libs/list.h for routines of the list structures.
 */
static void
stride_init(struct run_queue *rq) {
c010c474:	55                   	push   %ebp
c010c475:	89 e5                	mov    %esp,%ebp
c010c477:	83 ec 10             	sub    $0x10,%esp
     /* LAB6: 2014011381
      * (1) init the ready process list: rq->run_list
      * (2) init the run pool: rq->lab6_run_pool
      * (3) set number of process: rq->proc_num to 0
      */
     list_init(&(rq->run_list));
c010c47a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c47d:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010c480:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c483:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c486:	89 50 04             	mov    %edx,0x4(%eax)
c010c489:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c48c:	8b 50 04             	mov    0x4(%eax),%edx
c010c48f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c492:	89 10                	mov    %edx,(%eax)
     rq->lab6_run_pool = NULL;
c010c494:	8b 45 08             	mov    0x8(%ebp),%eax
c010c497:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
     rq->proc_num = 0;
c010c49e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4a1:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010c4a8:	c9                   	leave  
c010c4a9:	c3                   	ret    

c010c4aa <stride_enqueue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010c4aa:	55                   	push   %ebp
c010c4ab:	89 e5                	mov    %esp,%ebp
c010c4ad:	83 ec 28             	sub    $0x28,%esp
      * (2) recalculate proc->time_slice
      * (3) set proc->rq pointer to rq
      * (4) increase rq->proc_num
      */
#if USE_SKEW_HEAP
      rq->lab6_run_pool = skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010c4b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c4b3:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010c4b9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c4bc:	8b 40 10             	mov    0x10(%eax),%eax
c010c4bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c4c2:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010c4c5:	c7 45 ec 1e c4 10 c0 	movl   $0xc010c41e,-0x14(%ebp)
c010c4cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c4cf:	89 45 e8             	mov    %eax,-0x18(%ebp)
     compare_f comp) __attribute__((always_inline));

static inline void
skew_heap_init(skew_heap_entry_t *a)
{
     a->left = a->right = a->parent = NULL;
c010c4d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c4d5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c010c4db:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c4de:	8b 10                	mov    (%eax),%edx
c010c4e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c4e3:	89 50 08             	mov    %edx,0x8(%eax)
c010c4e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c4e9:	8b 50 08             	mov    0x8(%eax),%edx
c010c4ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c4ef:	89 50 04             	mov    %edx,0x4(%eax)
static inline skew_heap_entry_t *
skew_heap_insert(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_init(b);
     return skew_heap_merge(a, b, comp);
c010c4f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c4f5:	89 44 24 08          	mov    %eax,0x8(%esp)
c010c4f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c4fc:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c500:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c503:	89 04 24             	mov    %eax,(%esp)
c010c506:	e8 40 fe ff ff       	call   c010c34b <skew_heap_merge>
c010c50b:	89 c2                	mov    %eax,%edx
c010c50d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c510:	89 50 10             	mov    %edx,0x10(%eax)
#else
      assert(list_empty(&(proc->run_link)));
      list_add_before(&(rq->run_list), &(proc->run_link));
#endif
      if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010c513:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c516:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c51c:	85 c0                	test   %eax,%eax
c010c51e:	74 13                	je     c010c533 <stride_enqueue+0x89>
c010c520:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c523:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c010c529:	8b 45 08             	mov    0x8(%ebp),%eax
c010c52c:	8b 40 0c             	mov    0xc(%eax),%eax
c010c52f:	39 c2                	cmp    %eax,%edx
c010c531:	7e 0f                	jle    c010c542 <stride_enqueue+0x98>
          proc->time_slice = rq->max_time_slice;
c010c533:	8b 45 08             	mov    0x8(%ebp),%eax
c010c536:	8b 50 0c             	mov    0xc(%eax),%edx
c010c539:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c53c:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
      }
      proc->rq = rq;
c010c542:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c545:	8b 55 08             	mov    0x8(%ebp),%edx
c010c548:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
      ++rq->proc_num;
c010c54e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c551:	8b 40 08             	mov    0x8(%eax),%eax
c010c554:	8d 50 01             	lea    0x1(%eax),%edx
c010c557:	8b 45 08             	mov    0x8(%ebp),%eax
c010c55a:	89 50 08             	mov    %edx,0x8(%eax)
}
c010c55d:	c9                   	leave  
c010c55e:	c3                   	ret    

c010c55f <stride_dequeue>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static void
stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010c55f:	55                   	push   %ebp
c010c560:	89 e5                	mov    %esp,%ebp
c010c562:	83 ec 38             	sub    $0x38,%esp
      * NOTICE: you can use skew_heap or list. Important functions
      *         skew_heap_remove: remove a entry from skew_heap
      *         list_del_init: remove a entry from the  list
      */
#if USE_SKEW_HEAP
      rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
c010c565:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c568:	8d 90 b0 00 00 00    	lea    0xb0(%eax),%edx
c010c56e:	8b 45 08             	mov    0x8(%ebp),%eax
c010c571:	8b 40 10             	mov    0x10(%eax),%eax
c010c574:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c577:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010c57a:	c7 45 ec 1e c4 10 c0 	movl   $0xc010c41e,-0x14(%ebp)

static inline skew_heap_entry_t *
skew_heap_remove(skew_heap_entry_t *a, skew_heap_entry_t *b,
                 compare_f comp)
{
     skew_heap_entry_t *p   = b->parent;
c010c581:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c584:	8b 00                	mov    (%eax),%eax
c010c586:	89 45 e8             	mov    %eax,-0x18(%ebp)
     skew_heap_entry_t *rep = skew_heap_merge(b->left, b->right, comp);
c010c589:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c58c:	8b 50 08             	mov    0x8(%eax),%edx
c010c58f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c592:	8b 40 04             	mov    0x4(%eax),%eax
c010c595:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010c598:	89 4c 24 08          	mov    %ecx,0x8(%esp)
c010c59c:	89 54 24 04          	mov    %edx,0x4(%esp)
c010c5a0:	89 04 24             	mov    %eax,(%esp)
c010c5a3:	e8 a3 fd ff ff       	call   c010c34b <skew_heap_merge>
c010c5a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if (rep) rep->parent = p;
c010c5ab:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010c5af:	74 08                	je     c010c5b9 <stride_dequeue+0x5a>
c010c5b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c5b4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c5b7:	89 10                	mov    %edx,(%eax)
     
     if (p)
c010c5b9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010c5bd:	74 24                	je     c010c5e3 <stride_dequeue+0x84>
     {
          if (p->left == b)
c010c5bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c5c2:	8b 40 04             	mov    0x4(%eax),%eax
c010c5c5:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010c5c8:	75 0b                	jne    c010c5d5 <stride_dequeue+0x76>
               p->left = rep;
c010c5ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c5cd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c5d0:	89 50 04             	mov    %edx,0x4(%eax)
c010c5d3:	eb 09                	jmp    c010c5de <stride_dequeue+0x7f>
          else p->right = rep;
c010c5d5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c5d8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c5db:	89 50 08             	mov    %edx,0x8(%eax)
          return a;
c010c5de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5e1:	eb 03                	jmp    c010c5e6 <stride_dequeue+0x87>
     }
     else return rep;
c010c5e3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c5e6:	89 c2                	mov    %eax,%edx
c010c5e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5eb:	89 50 10             	mov    %edx,0x10(%eax)
#else
      assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
      list_del_init(&(proc->run_link));
#endif
      --rq->proc_num;
c010c5ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5f1:	8b 40 08             	mov    0x8(%eax),%eax
c010c5f4:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c5f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5fa:	89 50 08             	mov    %edx,0x8(%eax)
}
c010c5fd:	c9                   	leave  
c010c5fe:	c3                   	ret    

c010c5ff <stride_pick_next>:
 *
 * hint: see libs/skew_heap.h for routines of the priority
 * queue structures.
 */
static struct proc_struct *
stride_pick_next(struct run_queue *rq) {
c010c5ff:	55                   	push   %ebp
c010c600:	89 e5                	mov    %esp,%ebp
c010c602:	53                   	push   %ebx
c010c603:	83 ec 10             	sub    $0x10,%esp
             (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_poll
             (1.2) If using list, we have to search list to find the p with minimum stride value
      * (2) update p;s stride value: p->lab6_stride
      * (3) return p
      */
      struct proc_struct *p = NULL;
c010c606:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
#if USE_SKEW_HEAP
      skew_heap_entry_t *a = rq->lab6_run_pool;
c010c60d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c610:	8b 40 10             	mov    0x10(%eax),%eax
c010c613:	89 45 f4             	mov    %eax,-0xc(%ebp)
      if (a)
c010c616:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c61a:	74 0b                	je     c010c627 <stride_pick_next+0x28>
          p = le2proc(a, lab6_run_pool);
c010c61c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c61f:	2d b0 00 00 00       	sub    $0xb0,%eax
c010c624:	89 45 f8             	mov    %eax,-0x8(%ebp)
          if (p == NULL || (int32_t) (p0->lab6_stride - p->lab6_stride) < 0)
              p = p0;
          le = list_next(le);
      }
#endif
      if (p != NULL) {
c010c627:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c010c62b:	74 52                	je     c010c67f <stride_pick_next+0x80>
          if (p->lab6_priority > 1)
c010c62d:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c630:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
c010c636:	83 f8 01             	cmp    $0x1,%eax
c010c639:	76 2c                	jbe    c010c667 <stride_pick_next+0x68>
              p->lab6_stride += BIG_STRIDE / p->lab6_priority;
c010c63b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c63e:	8b 88 bc 00 00 00    	mov    0xbc(%eax),%ecx
c010c644:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c647:	8b 98 c0 00 00 00    	mov    0xc0(%eax),%ebx
c010c64d:	b8 99 48 18 0d       	mov    $0xd184899,%eax
c010c652:	ba 00 00 00 00       	mov    $0x0,%edx
c010c657:	f7 f3                	div    %ebx
c010c659:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c010c65c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c65f:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
c010c665:	eb 18                	jmp    c010c67f <stride_pick_next+0x80>
          else
              p->lab6_stride += BIG_STRIDE;
c010c667:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c66a:	8b 80 bc 00 00 00    	mov    0xbc(%eax),%eax
c010c670:	8d 90 99 48 18 0d    	lea    0xd184899(%eax),%edx
c010c676:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010c679:	89 90 bc 00 00 00    	mov    %edx,0xbc(%eax)
      }

      return p;
c010c67f:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010c682:	83 c4 10             	add    $0x10,%esp
c010c685:	5b                   	pop    %ebx
c010c686:	5d                   	pop    %ebp
c010c687:	c3                   	ret    

c010c688 <stride_proc_tick>:
 * denotes the time slices left for current
 * process. proc->need_resched is the flag variable for process
 * switching.
 */
static void
stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010c688:	55                   	push   %ebp
c010c689:	89 e5                	mov    %esp,%ebp
     /* LAB6: 2014011381 */
     if (proc->time_slice > 0)
c010c68b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c68e:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c694:	85 c0                	test   %eax,%eax
c010c696:	7e 15                	jle    c010c6ad <stride_proc_tick+0x25>
         --proc->time_slice;
c010c698:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c69b:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c6a1:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c6a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c6a7:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
     if (proc->time_slice == 0)
c010c6ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c6b0:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c6b6:	85 c0                	test   %eax,%eax
c010c6b8:	75 0a                	jne    c010c6c4 <stride_proc_tick+0x3c>
         proc->need_resched = 1;
c010c6ba:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c6bd:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
}
c010c6c4:	5d                   	pop    %ebp
c010c6c5:	c3                   	ret    

c010c6c6 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010c6c6:	55                   	push   %ebp
c010c6c7:	89 e5                	mov    %esp,%ebp
c010c6c9:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010c6cc:	9c                   	pushf  
c010c6cd:	58                   	pop    %eax
c010c6ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010c6d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010c6d4:	25 00 02 00 00       	and    $0x200,%eax
c010c6d9:	85 c0                	test   %eax,%eax
c010c6db:	74 0c                	je     c010c6e9 <__intr_save+0x23>
        intr_disable();
c010c6dd:	e8 49 59 ff ff       	call   c010202b <intr_disable>
        return 1;
c010c6e2:	b8 01 00 00 00       	mov    $0x1,%eax
c010c6e7:	eb 05                	jmp    c010c6ee <__intr_save+0x28>
    }
    return 0;
c010c6e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c6ee:	c9                   	leave  
c010c6ef:	c3                   	ret    

c010c6f0 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010c6f0:	55                   	push   %ebp
c010c6f1:	89 e5                	mov    %esp,%ebp
c010c6f3:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010c6f6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c6fa:	74 05                	je     c010c701 <__intr_restore+0x11>
        intr_enable();
c010c6fc:	e8 24 59 ff ff       	call   c0102025 <intr_enable>
    }
}
c010c701:	c9                   	leave  
c010c702:	c3                   	ret    

c010c703 <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010c703:	55                   	push   %ebp
c010c704:	89 e5                	mov    %esp,%ebp
c010c706:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010c709:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010c70e:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c711:	74 1a                	je     c010c72d <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010c713:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
c010c718:	8b 40 08             	mov    0x8(%eax),%eax
c010c71b:	8b 15 c0 54 1c c0    	mov    0xc01c54c0,%edx
c010c721:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010c724:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010c728:	89 14 24             	mov    %edx,(%esp)
c010c72b:	ff d0                	call   *%eax
    }
}
c010c72d:	c9                   	leave  
c010c72e:	c3                   	ret    

c010c72f <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010c72f:	55                   	push   %ebp
c010c730:	89 e5                	mov    %esp,%ebp
c010c732:	83 ec 18             	sub    $0x18,%esp
    sched_class->dequeue(rq, proc);
c010c735:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
c010c73a:	8b 40 0c             	mov    0xc(%eax),%eax
c010c73d:	8b 15 c0 54 1c c0    	mov    0xc01c54c0,%edx
c010c743:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010c746:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010c74a:	89 14 24             	mov    %edx,(%esp)
c010c74d:	ff d0                	call   *%eax
}
c010c74f:	c9                   	leave  
c010c750:	c3                   	ret    

c010c751 <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010c751:	55                   	push   %ebp
c010c752:	89 e5                	mov    %esp,%ebp
c010c754:	83 ec 18             	sub    $0x18,%esp
    return sched_class->pick_next(rq);
c010c757:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
c010c75c:	8b 40 10             	mov    0x10(%eax),%eax
c010c75f:	8b 15 c0 54 1c c0    	mov    0xc01c54c0,%edx
c010c765:	89 14 24             	mov    %edx,(%esp)
c010c768:	ff d0                	call   *%eax
}
c010c76a:	c9                   	leave  
c010c76b:	c3                   	ret    

c010c76c <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010c76c:	55                   	push   %ebp
c010c76d:	89 e5                	mov    %esp,%ebp
c010c76f:	83 ec 18             	sub    $0x18,%esp
    if (proc != idleproc) {
c010c772:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010c777:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c77a:	74 1c                	je     c010c798 <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010c77c:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
c010c781:	8b 40 14             	mov    0x14(%eax),%eax
c010c784:	8b 15 c0 54 1c c0    	mov    0xc01c54c0,%edx
c010c78a:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010c78d:	89 4c 24 04          	mov    %ecx,0x4(%esp)
c010c791:	89 14 24             	mov    %edx,(%esp)
c010c794:	ff d0                	call   *%eax
c010c796:	eb 0a                	jmp    c010c7a2 <sched_class_proc_tick+0x36>
    }
    else {
        proc->need_resched = 1;
c010c798:	8b 45 08             	mov    0x8(%ebp),%eax
c010c79b:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010c7a2:	c9                   	leave  
c010c7a3:	c3                   	ret    

c010c7a4 <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010c7a4:	55                   	push   %ebp
c010c7a5:	89 e5                	mov    %esp,%ebp
c010c7a7:	83 ec 28             	sub    $0x28,%esp
c010c7aa:	c7 45 f4 b4 54 1c c0 	movl   $0xc01c54b4,-0xc(%ebp)
c010c7b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c7b7:	89 50 04             	mov    %edx,0x4(%eax)
c010c7ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7bd:	8b 50 04             	mov    0x4(%eax),%edx
c010c7c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7c3:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010c7c5:	c7 05 bc 54 1c c0 8c 	movl   $0xc0131a8c,0xc01c54bc
c010c7cc:	1a 13 c0 

    rq = &__rq;
c010c7cf:	c7 05 c0 54 1c c0 c4 	movl   $0xc01c54c4,0xc01c54c0
c010c7d6:	54 1c c0 
    rq->max_time_slice = 5;
c010c7d9:	a1 c0 54 1c c0       	mov    0xc01c54c0,%eax
c010c7de:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010c7e5:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
c010c7ea:	8b 40 04             	mov    0x4(%eax),%eax
c010c7ed:	8b 15 c0 54 1c c0    	mov    0xc01c54c0,%edx
c010c7f3:	89 14 24             	mov    %edx,(%esp)
c010c7f6:	ff d0                	call   *%eax

    cprintf("sched class: %s\n", sched_class->name);
c010c7f8:	a1 bc 54 1c c0       	mov    0xc01c54bc,%eax
c010c7fd:	8b 00                	mov    (%eax),%eax
c010c7ff:	89 44 24 04          	mov    %eax,0x4(%esp)
c010c803:	c7 04 24 f4 03 11 c0 	movl   $0xc01103f4,(%esp)
c010c80a:	e8 49 3b ff ff       	call   c0100358 <cprintf>
}
c010c80f:	c9                   	leave  
c010c810:	c3                   	ret    

c010c811 <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010c811:	55                   	push   %ebp
c010c812:	89 e5                	mov    %esp,%ebp
c010c814:	83 ec 28             	sub    $0x28,%esp
    assert(proc->state != PROC_ZOMBIE);
c010c817:	8b 45 08             	mov    0x8(%ebp),%eax
c010c81a:	8b 00                	mov    (%eax),%eax
c010c81c:	83 f8 03             	cmp    $0x3,%eax
c010c81f:	75 24                	jne    c010c845 <wakeup_proc+0x34>
c010c821:	c7 44 24 0c 05 04 11 	movl   $0xc0110405,0xc(%esp)
c010c828:	c0 
c010c829:	c7 44 24 08 20 04 11 	movl   $0xc0110420,0x8(%esp)
c010c830:	c0 
c010c831:	c7 44 24 04 3c 00 00 	movl   $0x3c,0x4(%esp)
c010c838:	00 
c010c839:	c7 04 24 35 04 11 c0 	movl   $0xc0110435,(%esp)
c010c840:	e8 8e 45 ff ff       	call   c0100dd3 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010c845:	e8 7c fe ff ff       	call   c010c6c6 <__intr_save>
c010c84a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010c84d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c850:	8b 00                	mov    (%eax),%eax
c010c852:	83 f8 02             	cmp    $0x2,%eax
c010c855:	74 2d                	je     c010c884 <wakeup_proc+0x73>
            proc->state = PROC_RUNNABLE;
c010c857:	8b 45 08             	mov    0x8(%ebp),%eax
c010c85a:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010c860:	8b 45 08             	mov    0x8(%ebp),%eax
c010c863:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010c86a:	00 00 00 
            if (proc != current) {
c010c86d:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c872:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c875:	74 29                	je     c010c8a0 <wakeup_proc+0x8f>
                sched_class_enqueue(proc);
c010c877:	8b 45 08             	mov    0x8(%ebp),%eax
c010c87a:	89 04 24             	mov    %eax,(%esp)
c010c87d:	e8 81 fe ff ff       	call   c010c703 <sched_class_enqueue>
c010c882:	eb 1c                	jmp    c010c8a0 <wakeup_proc+0x8f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010c884:	c7 44 24 08 4b 04 11 	movl   $0xc011044b,0x8(%esp)
c010c88b:	c0 
c010c88c:	c7 44 24 04 48 00 00 	movl   $0x48,0x4(%esp)
c010c893:	00 
c010c894:	c7 04 24 35 04 11 c0 	movl   $0xc0110435,(%esp)
c010c89b:	e8 9f 45 ff ff       	call   c0100e3f <__warn>
        }
    }
    local_intr_restore(intr_flag);
c010c8a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8a3:	89 04 24             	mov    %eax,(%esp)
c010c8a6:	e8 45 fe ff ff       	call   c010c6f0 <__intr_restore>
}
c010c8ab:	c9                   	leave  
c010c8ac:	c3                   	ret    

c010c8ad <schedule>:

void
schedule(void) {
c010c8ad:	55                   	push   %ebp
c010c8ae:	89 e5                	mov    %esp,%ebp
c010c8b0:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010c8b3:	e8 0e fe ff ff       	call   c010c6c6 <__intr_save>
c010c8b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010c8bb:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c8c0:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010c8c7:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c8cc:	8b 00                	mov    (%eax),%eax
c010c8ce:	83 f8 02             	cmp    $0x2,%eax
c010c8d1:	75 0d                	jne    c010c8e0 <schedule+0x33>
            sched_class_enqueue(current);
c010c8d3:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c8d8:	89 04 24             	mov    %eax,(%esp)
c010c8db:	e8 23 fe ff ff       	call   c010c703 <sched_class_enqueue>
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010c8e0:	e8 6c fe ff ff       	call   c010c751 <sched_class_pick_next>
c010c8e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c8e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c8ec:	74 0b                	je     c010c8f9 <schedule+0x4c>
            sched_class_dequeue(next);
c010c8ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8f1:	89 04 24             	mov    %eax,(%esp)
c010c8f4:	e8 36 fe ff ff       	call   c010c72f <sched_class_dequeue>
        }
        if (next == NULL) {
c010c8f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c8fd:	75 08                	jne    c010c907 <schedule+0x5a>
            next = idleproc;
c010c8ff:	a1 40 34 1c c0       	mov    0xc01c3440,%eax
c010c904:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010c907:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c90a:	8b 40 08             	mov    0x8(%eax),%eax
c010c90d:	8d 50 01             	lea    0x1(%eax),%edx
c010c910:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c913:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010c916:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010c91b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010c91e:	74 0b                	je     c010c92b <schedule+0x7e>
            proc_run(next);
c010c920:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c923:	89 04 24             	mov    %eax,(%esp)
c010c926:	e8 15 e3 ff ff       	call   c010ac40 <proc_run>
        }
    }
    local_intr_restore(intr_flag);
c010c92b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c92e:	89 04 24             	mov    %eax,(%esp)
c010c931:	e8 ba fd ff ff       	call   c010c6f0 <__intr_restore>
}
c010c936:	c9                   	leave  
c010c937:	c3                   	ret    

c010c938 <add_timer>:

// add timer to timer_list
void
add_timer(timer_t *timer) {
c010c938:	55                   	push   %ebp
c010c939:	89 e5                	mov    %esp,%ebp
c010c93b:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c93e:	e8 83 fd ff ff       	call   c010c6c6 <__intr_save>
c010c943:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010c946:	8b 45 08             	mov    0x8(%ebp),%eax
c010c949:	8b 00                	mov    (%eax),%eax
c010c94b:	85 c0                	test   %eax,%eax
c010c94d:	74 0a                	je     c010c959 <add_timer+0x21>
c010c94f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c952:	8b 40 04             	mov    0x4(%eax),%eax
c010c955:	85 c0                	test   %eax,%eax
c010c957:	75 24                	jne    c010c97d <add_timer+0x45>
c010c959:	c7 44 24 0c 68 04 11 	movl   $0xc0110468,0xc(%esp)
c010c960:	c0 
c010c961:	c7 44 24 08 20 04 11 	movl   $0xc0110420,0x8(%esp)
c010c968:	c0 
c010c969:	c7 44 24 04 6c 00 00 	movl   $0x6c,0x4(%esp)
c010c970:	00 
c010c971:	c7 04 24 35 04 11 c0 	movl   $0xc0110435,(%esp)
c010c978:	e8 56 44 ff ff       	call   c0100dd3 <__panic>
        assert(list_empty(&(timer->timer_link)));
c010c97d:	8b 45 08             	mov    0x8(%ebp),%eax
c010c980:	83 c0 08             	add    $0x8,%eax
c010c983:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010c986:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c989:	8b 40 04             	mov    0x4(%eax),%eax
c010c98c:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010c98f:	0f 94 c0             	sete   %al
c010c992:	0f b6 c0             	movzbl %al,%eax
c010c995:	85 c0                	test   %eax,%eax
c010c997:	75 24                	jne    c010c9bd <add_timer+0x85>
c010c999:	c7 44 24 0c 94 04 11 	movl   $0xc0110494,0xc(%esp)
c010c9a0:	c0 
c010c9a1:	c7 44 24 08 20 04 11 	movl   $0xc0110420,0x8(%esp)
c010c9a8:	c0 
c010c9a9:	c7 44 24 04 6d 00 00 	movl   $0x6d,0x4(%esp)
c010c9b0:	00 
c010c9b1:	c7 04 24 35 04 11 c0 	movl   $0xc0110435,(%esp)
c010c9b8:	e8 16 44 ff ff       	call   c0100dd3 <__panic>
c010c9bd:	c7 45 e4 b4 54 1c c0 	movl   $0xc01c54b4,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c9c4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c9c7:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010c9ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010c9cd:	eb 4a                	jmp    c010ca19 <add_timer+0xe1>
            timer_t *next = le2timer(le, timer_link);
c010c9cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c9d2:	83 e8 08             	sub    $0x8,%eax
c010c9d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (timer->expires < next->expires) {
c010c9d8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9db:	8b 10                	mov    (%eax),%edx
c010c9dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c9e0:	8b 00                	mov    (%eax),%eax
c010c9e2:	39 c2                	cmp    %eax,%edx
c010c9e4:	73 13                	jae    c010c9f9 <add_timer+0xc1>
                next->expires -= timer->expires;
c010c9e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c9e9:	8b 10                	mov    (%eax),%edx
c010c9eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9ee:	8b 00                	mov    (%eax),%eax
c010c9f0:	29 c2                	sub    %eax,%edx
c010c9f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c9f5:	89 10                	mov    %edx,(%eax)
                break;
c010c9f7:	eb 29                	jmp    c010ca22 <add_timer+0xea>
            }
            timer->expires -= next->expires;
c010c9f9:	8b 45 08             	mov    0x8(%ebp),%eax
c010c9fc:	8b 10                	mov    (%eax),%edx
c010c9fe:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ca01:	8b 00                	mov    (%eax),%eax
c010ca03:	29 c2                	sub    %eax,%edx
c010ca05:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca08:	89 10                	mov    %edx,(%eax)
c010ca0a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca0d:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010ca10:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ca13:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010ca16:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010ca19:	81 7d f4 b4 54 1c c0 	cmpl   $0xc01c54b4,-0xc(%ebp)
c010ca20:	75 ad                	jne    c010c9cf <add_timer+0x97>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010ca22:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca25:	8d 50 08             	lea    0x8(%eax),%edx
c010ca28:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ca2b:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010ca2e:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010ca31:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ca34:	8b 00                	mov    (%eax),%eax
c010ca36:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010ca39:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010ca3c:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010ca3f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010ca42:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010ca45:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010ca48:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010ca4b:	89 10                	mov    %edx,(%eax)
c010ca4d:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010ca50:	8b 10                	mov    (%eax),%edx
c010ca52:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010ca55:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010ca58:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ca5b:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010ca5e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010ca61:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010ca64:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010ca67:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010ca69:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ca6c:	89 04 24             	mov    %eax,(%esp)
c010ca6f:	e8 7c fc ff ff       	call   c010c6f0 <__intr_restore>
}
c010ca74:	c9                   	leave  
c010ca75:	c3                   	ret    

c010ca76 <del_timer>:

// del timer from timer_list
void
del_timer(timer_t *timer) {
c010ca76:	55                   	push   %ebp
c010ca77:	89 e5                	mov    %esp,%ebp
c010ca79:	83 ec 48             	sub    $0x48,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010ca7c:	e8 45 fc ff ff       	call   c010c6c6 <__intr_save>
c010ca81:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010ca84:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca87:	83 c0 08             	add    $0x8,%eax
c010ca8a:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010ca8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010ca90:	8b 40 04             	mov    0x4(%eax),%eax
c010ca93:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c010ca96:	0f 94 c0             	sete   %al
c010ca99:	0f b6 c0             	movzbl %al,%eax
c010ca9c:	85 c0                	test   %eax,%eax
c010ca9e:	0f 85 89 00 00 00    	jne    c010cb2d <del_timer+0xb7>
            if (timer->expires != 0) {
c010caa4:	8b 45 08             	mov    0x8(%ebp),%eax
c010caa7:	8b 00                	mov    (%eax),%eax
c010caa9:	85 c0                	test   %eax,%eax
c010caab:	74 35                	je     c010cae2 <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010caad:	8b 45 08             	mov    0x8(%ebp),%eax
c010cab0:	83 c0 08             	add    $0x8,%eax
c010cab3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010cab6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010cab9:	8b 40 04             	mov    0x4(%eax),%eax
c010cabc:	89 45 f0             	mov    %eax,-0x10(%ebp)
                if (le != &timer_list) {
c010cabf:	81 7d f0 b4 54 1c c0 	cmpl   $0xc01c54b4,-0x10(%ebp)
c010cac6:	74 1a                	je     c010cae2 <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010cac8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cacb:	83 e8 08             	sub    $0x8,%eax
c010cace:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    next->expires += timer->expires;
c010cad1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cad4:	8b 10                	mov    (%eax),%edx
c010cad6:	8b 45 08             	mov    0x8(%ebp),%eax
c010cad9:	8b 00                	mov    (%eax),%eax
c010cadb:	01 c2                	add    %eax,%edx
c010cadd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cae0:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010cae2:	8b 45 08             	mov    0x8(%ebp),%eax
c010cae5:	83 c0 08             	add    $0x8,%eax
c010cae8:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010caeb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010caee:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010caf1:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010caf4:	8b 40 04             	mov    0x4(%eax),%eax
c010caf7:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010cafa:	8b 12                	mov    (%edx),%edx
c010cafc:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010caff:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010cb02:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cb05:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010cb08:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010cb0b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010cb0e:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010cb11:	89 10                	mov    %edx,(%eax)
c010cb13:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cb16:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010cb19:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010cb1c:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010cb1f:	89 50 04             	mov    %edx,0x4(%eax)
c010cb22:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010cb25:	8b 50 04             	mov    0x4(%eax),%edx
c010cb28:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010cb2b:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010cb2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb30:	89 04 24             	mov    %eax,(%esp)
c010cb33:	e8 b8 fb ff ff       	call   c010c6f0 <__intr_restore>
}
c010cb38:	c9                   	leave  
c010cb39:	c3                   	ret    

c010cb3a <run_timer_list>:

// call scheduler to update tick related info, and check the timer is expired? If expired, then wakup proc
void
run_timer_list(void) {
c010cb3a:	55                   	push   %ebp
c010cb3b:	89 e5                	mov    %esp,%ebp
c010cb3d:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010cb40:	e8 81 fb ff ff       	call   c010c6c6 <__intr_save>
c010cb45:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010cb48:	c7 45 e4 b4 54 1c c0 	movl   $0xc01c54b4,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010cb4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010cb52:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010cb55:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010cb58:	81 7d f4 b4 54 1c c0 	cmpl   $0xc01c54b4,-0xc(%ebp)
c010cb5f:	0f 84 fb 00 00 00    	je     c010cc60 <run_timer_list+0x126>
            timer_t *timer = le2timer(le, timer_link);
c010cb65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cb68:	83 e8 08             	sub    $0x8,%eax
c010cb6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010cb6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb71:	8b 00                	mov    (%eax),%eax
c010cb73:	85 c0                	test   %eax,%eax
c010cb75:	75 24                	jne    c010cb9b <run_timer_list+0x61>
c010cb77:	c7 44 24 0c b5 04 11 	movl   $0xc01104b5,0xc(%esp)
c010cb7e:	c0 
c010cb7f:	c7 44 24 08 20 04 11 	movl   $0xc0110420,0x8(%esp)
c010cb86:	c0 
c010cb87:	c7 44 24 04 9a 00 00 	movl   $0x9a,0x4(%esp)
c010cb8e:	00 
c010cb8f:	c7 04 24 35 04 11 c0 	movl   $0xc0110435,(%esp)
c010cb96:	e8 38 42 ff ff       	call   c0100dd3 <__panic>
            timer->expires --;
c010cb9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cb9e:	8b 00                	mov    (%eax),%eax
c010cba0:	8d 50 ff             	lea    -0x1(%eax),%edx
c010cba3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cba6:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010cba8:	e9 a6 00 00 00       	jmp    c010cc53 <run_timer_list+0x119>
c010cbad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cbb0:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cbb3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cbb6:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010cbb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010cbbc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cbbf:	8b 40 04             	mov    0x4(%eax),%eax
c010cbc2:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (proc->wait_state != 0) {
c010cbc5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cbc8:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010cbce:	85 c0                	test   %eax,%eax
c010cbd0:	74 31                	je     c010cc03 <run_timer_list+0xc9>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010cbd2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cbd5:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010cbdb:	85 c0                	test   %eax,%eax
c010cbdd:	78 4a                	js     c010cc29 <run_timer_list+0xef>
c010cbdf:	c7 44 24 0c cc 04 11 	movl   $0xc01104cc,0xc(%esp)
c010cbe6:	c0 
c010cbe7:	c7 44 24 08 20 04 11 	movl   $0xc0110420,0x8(%esp)
c010cbee:	c0 
c010cbef:	c7 44 24 04 a0 00 00 	movl   $0xa0,0x4(%esp)
c010cbf6:	00 
c010cbf7:	c7 04 24 35 04 11 c0 	movl   $0xc0110435,(%esp)
c010cbfe:	e8 d0 41 ff ff       	call   c0100dd3 <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010cc03:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cc06:	8b 40 04             	mov    0x4(%eax),%eax
c010cc09:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cc0d:	c7 44 24 08 f0 04 11 	movl   $0xc01104f0,0x8(%esp)
c010cc14:	c0 
c010cc15:	c7 44 24 04 a3 00 00 	movl   $0xa3,0x4(%esp)
c010cc1c:	00 
c010cc1d:	c7 04 24 35 04 11 c0 	movl   $0xc0110435,(%esp)
c010cc24:	e8 16 42 ff ff       	call   c0100e3f <__warn>
                }
                wakeup_proc(proc);
c010cc29:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cc2c:	89 04 24             	mov    %eax,(%esp)
c010cc2f:	e8 dd fb ff ff       	call   c010c811 <wakeup_proc>
                del_timer(timer);
c010cc34:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc37:	89 04 24             	mov    %eax,(%esp)
c010cc3a:	e8 37 fe ff ff       	call   c010ca76 <del_timer>
                if (le == &timer_list) {
c010cc3f:	81 7d f4 b4 54 1c c0 	cmpl   $0xc01c54b4,-0xc(%ebp)
c010cc46:	75 02                	jne    c010cc4a <run_timer_list+0x110>
                    break;
c010cc48:	eb 16                	jmp    c010cc60 <run_timer_list+0x126>
                }
                timer = le2timer(le, timer_link);
c010cc4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc4d:	83 e8 08             	sub    $0x8,%eax
c010cc50:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010cc53:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cc56:	8b 00                	mov    (%eax),%eax
c010cc58:	85 c0                	test   %eax,%eax
c010cc5a:	0f 84 4d ff ff ff    	je     c010cbad <run_timer_list+0x73>
                    break;
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010cc60:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010cc65:	89 04 24             	mov    %eax,(%esp)
c010cc68:	e8 ff fa ff ff       	call   c010c76c <sched_class_proc_tick>
    }
    local_intr_restore(intr_flag);
c010cc6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cc70:	89 04 24             	mov    %eax,(%esp)
c010cc73:	e8 78 fa ff ff       	call   c010c6f0 <__intr_restore>
}
c010cc78:	c9                   	leave  
c010cc79:	c3                   	ret    

c010cc7a <sys_exit>:
#include <pmm.h>
#include <assert.h>
#include <clock.h>

static int
sys_exit(uint32_t arg[]) {
c010cc7a:	55                   	push   %ebp
c010cc7b:	89 e5                	mov    %esp,%ebp
c010cc7d:	83 ec 28             	sub    $0x28,%esp
    int error_code = (int)arg[0];
c010cc80:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc83:	8b 00                	mov    (%eax),%eax
c010cc85:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010cc88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cc8b:	89 04 24             	mov    %eax,(%esp)
c010cc8e:	e8 23 e6 ff ff       	call   c010b2b6 <do_exit>
}
c010cc93:	c9                   	leave  
c010cc94:	c3                   	ret    

c010cc95 <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010cc95:	55                   	push   %ebp
c010cc96:	89 e5                	mov    %esp,%ebp
c010cc98:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010cc9b:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010cca0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010cca3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010cca6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cca9:	8b 40 44             	mov    0x44(%eax),%eax
c010ccac:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010ccaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ccb2:	89 44 24 08          	mov    %eax,0x8(%esp)
c010ccb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ccb9:	89 44 24 04          	mov    %eax,0x4(%esp)
c010ccbd:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
c010ccc4:	e8 c1 e4 ff ff       	call   c010b18a <do_fork>
}
c010ccc9:	c9                   	leave  
c010ccca:	c3                   	ret    

c010cccb <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010cccb:	55                   	push   %ebp
c010cccc:	89 e5                	mov    %esp,%ebp
c010ccce:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010ccd1:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccd4:	8b 00                	mov    (%eax),%eax
c010ccd6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010ccd9:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccdc:	83 c0 04             	add    $0x4,%eax
c010ccdf:	8b 00                	mov    (%eax),%eax
c010cce1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010cce4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cce7:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cceb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ccee:	89 04 24             	mov    %eax,(%esp)
c010ccf1:	e8 68 ef ff ff       	call   c010bc5e <do_wait>
}
c010ccf6:	c9                   	leave  
c010ccf7:	c3                   	ret    

c010ccf8 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010ccf8:	55                   	push   %ebp
c010ccf9:	89 e5                	mov    %esp,%ebp
c010ccfb:	83 ec 28             	sub    $0x28,%esp
    const char *name = (const char *)arg[0];
c010ccfe:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd01:	8b 00                	mov    (%eax),%eax
c010cd03:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010cd06:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd09:	8b 40 04             	mov    0x4(%eax),%eax
c010cd0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    unsigned char *binary = (unsigned char *)arg[2];
c010cd0f:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd12:	83 c0 08             	add    $0x8,%eax
c010cd15:	8b 00                	mov    (%eax),%eax
c010cd17:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t size = (size_t)arg[3];
c010cd1a:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd1d:	8b 40 0c             	mov    0xc(%eax),%eax
c010cd20:	89 45 e8             	mov    %eax,-0x18(%ebp)
    return do_execve(name, len, binary, size);
c010cd23:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cd26:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010cd2a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010cd2d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cd31:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cd34:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cd38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd3b:	89 04 24             	mov    %eax,(%esp)
c010cd3e:	e8 cf ed ff ff       	call   c010bb12 <do_execve>
}
c010cd43:	c9                   	leave  
c010cd44:	c3                   	ret    

c010cd45 <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010cd45:	55                   	push   %ebp
c010cd46:	89 e5                	mov    %esp,%ebp
c010cd48:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010cd4b:	e8 f8 ee ff ff       	call   c010bc48 <do_yield>
}
c010cd50:	c9                   	leave  
c010cd51:	c3                   	ret    

c010cd52 <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010cd52:	55                   	push   %ebp
c010cd53:	89 e5                	mov    %esp,%ebp
c010cd55:	83 ec 28             	sub    $0x28,%esp
    int pid = (int)arg[0];
c010cd58:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd5b:	8b 00                	mov    (%eax),%eax
c010cd5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010cd60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd63:	89 04 24             	mov    %eax,(%esp)
c010cd66:	e8 93 f0 ff ff       	call   c010bdfe <do_kill>
}
c010cd6b:	c9                   	leave  
c010cd6c:	c3                   	ret    

c010cd6d <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010cd6d:	55                   	push   %ebp
c010cd6e:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010cd70:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010cd75:	8b 40 04             	mov    0x4(%eax),%eax
}
c010cd78:	5d                   	pop    %ebp
c010cd79:	c3                   	ret    

c010cd7a <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010cd7a:	55                   	push   %ebp
c010cd7b:	89 e5                	mov    %esp,%ebp
c010cd7d:	83 ec 28             	sub    $0x28,%esp
    int c = (int)arg[0];
c010cd80:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd83:	8b 00                	mov    (%eax),%eax
c010cd85:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010cd88:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cd8b:	89 04 24             	mov    %eax,(%esp)
c010cd8e:	e8 eb 35 ff ff       	call   c010037e <cputchar>
    return 0;
c010cd93:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010cd98:	c9                   	leave  
c010cd99:	c3                   	ret    

c010cd9a <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010cd9a:	55                   	push   %ebp
c010cd9b:	89 e5                	mov    %esp,%ebp
c010cd9d:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010cda0:	e8 77 a1 ff ff       	call   c0106f1c <print_pgdir>
    return 0;
c010cda5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010cdaa:	c9                   	leave  
c010cdab:	c3                   	ret    

c010cdac <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010cdac:	55                   	push   %ebp
c010cdad:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010cdaf:	a1 d8 54 1c c0       	mov    0xc01c54d8,%eax
}
c010cdb4:	5d                   	pop    %ebp
c010cdb5:	c3                   	ret    

c010cdb6 <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010cdb6:	55                   	push   %ebp
c010cdb7:	89 e5                	mov    %esp,%ebp
c010cdb9:	83 ec 28             	sub    $0x28,%esp
    uint32_t priority = (uint32_t)arg[0];
c010cdbc:	8b 45 08             	mov    0x8(%ebp),%eax
c010cdbf:	8b 00                	mov    (%eax),%eax
c010cdc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010cdc4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cdc7:	89 04 24             	mov    %eax,(%esp)
c010cdca:	e8 9b f4 ff ff       	call   c010c26a <lab6_set_priority>
    return 0;
c010cdcf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010cdd4:	c9                   	leave  
c010cdd5:	c3                   	ret    

c010cdd6 <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010cdd6:	55                   	push   %ebp
c010cdd7:	89 e5                	mov    %esp,%ebp
c010cdd9:	83 ec 28             	sub    $0x28,%esp
    unsigned int time = (unsigned int)arg[0];
c010cddc:	8b 45 08             	mov    0x8(%ebp),%eax
c010cddf:	8b 00                	mov    (%eax),%eax
c010cde1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010cde4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cde7:	89 04 24             	mov    %eax,(%esp)
c010cdea:	e8 a5 f4 ff ff       	call   c010c294 <do_sleep>
}
c010cdef:	c9                   	leave  
c010cdf0:	c3                   	ret    

c010cdf1 <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010cdf1:	55                   	push   %ebp
c010cdf2:	89 e5                	mov    %esp,%ebp
c010cdf4:	83 ec 48             	sub    $0x48,%esp
    struct trapframe *tf = current->tf;
c010cdf7:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010cdfc:	8b 40 3c             	mov    0x3c(%eax),%eax
c010cdff:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010ce02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce05:	8b 40 1c             	mov    0x1c(%eax),%eax
c010ce08:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010ce0b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ce0f:	78 60                	js     c010ce71 <syscall+0x80>
c010ce11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ce14:	3d ff 00 00 00       	cmp    $0xff,%eax
c010ce19:	77 56                	ja     c010ce71 <syscall+0x80>
        if (syscalls[num] != NULL) {
c010ce1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ce1e:	8b 04 85 c0 1a 13 c0 	mov    -0x3fece540(,%eax,4),%eax
c010ce25:	85 c0                	test   %eax,%eax
c010ce27:	74 48                	je     c010ce71 <syscall+0x80>
            arg[0] = tf->tf_regs.reg_edx;
c010ce29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce2c:	8b 40 14             	mov    0x14(%eax),%eax
c010ce2f:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010ce32:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce35:	8b 40 18             	mov    0x18(%eax),%eax
c010ce38:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010ce3b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce3e:	8b 40 10             	mov    0x10(%eax),%eax
c010ce41:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010ce44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce47:	8b 00                	mov    (%eax),%eax
c010ce49:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010ce4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce4f:	8b 40 04             	mov    0x4(%eax),%eax
c010ce52:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010ce55:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ce58:	8b 04 85 c0 1a 13 c0 	mov    -0x3fece540(,%eax,4),%eax
c010ce5f:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010ce62:	89 14 24             	mov    %edx,(%esp)
c010ce65:	ff d0                	call   *%eax
c010ce67:	89 c2                	mov    %eax,%edx
c010ce69:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce6c:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010ce6f:	eb 46                	jmp    c010ceb7 <syscall+0xc6>
        }
    }
    print_trapframe(tf);
c010ce71:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce74:	89 04 24             	mov    %eax,(%esp)
c010ce77:	e8 72 55 ff ff       	call   c01023ee <print_trapframe>
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010ce7c:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010ce81:	8d 50 48             	lea    0x48(%eax),%edx
c010ce84:	a1 48 34 1c c0       	mov    0xc01c3448,%eax
c010ce89:	8b 40 04             	mov    0x4(%eax),%eax
c010ce8c:	89 54 24 14          	mov    %edx,0x14(%esp)
c010ce90:	89 44 24 10          	mov    %eax,0x10(%esp)
c010ce94:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ce97:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010ce9b:	c7 44 24 08 10 05 11 	movl   $0xc0110510,0x8(%esp)
c010cea2:	c0 
c010cea3:	c7 44 24 04 79 00 00 	movl   $0x79,0x4(%esp)
c010ceaa:	00 
c010ceab:	c7 04 24 3c 05 11 c0 	movl   $0xc011053c,(%esp)
c010ceb2:	e8 1c 3f ff ff       	call   c0100dd3 <__panic>
            num, current->pid, current->name);
}
c010ceb7:	c9                   	leave  
c010ceb8:	c3                   	ret    

c010ceb9 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c010ceb9:	55                   	push   %ebp
c010ceba:	89 e5                	mov    %esp,%ebp
c010cebc:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c010cebf:	8b 45 08             	mov    0x8(%ebp),%eax
c010cec2:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c010cec8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c010cecb:	b8 20 00 00 00       	mov    $0x20,%eax
c010ced0:	2b 45 0c             	sub    0xc(%ebp),%eax
c010ced3:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010ced6:	89 c1                	mov    %eax,%ecx
c010ced8:	d3 ea                	shr    %cl,%edx
c010ceda:	89 d0                	mov    %edx,%eax
}
c010cedc:	c9                   	leave  
c010cedd:	c3                   	ret    

c010cede <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*), void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c010cede:	55                   	push   %ebp
c010cedf:	89 e5                	mov    %esp,%ebp
c010cee1:	83 ec 58             	sub    $0x58,%esp
c010cee4:	8b 45 10             	mov    0x10(%ebp),%eax
c010cee7:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010ceea:	8b 45 14             	mov    0x14(%ebp),%eax
c010ceed:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c010cef0:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010cef3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010cef6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cef9:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c010cefc:	8b 45 18             	mov    0x18(%ebp),%eax
c010ceff:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010cf02:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cf05:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cf08:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cf0b:	89 55 f0             	mov    %edx,-0x10(%ebp)
c010cf0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cf11:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cf14:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010cf18:	74 1c                	je     c010cf36 <printnum+0x58>
c010cf1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cf1d:	ba 00 00 00 00       	mov    $0x0,%edx
c010cf22:	f7 75 e4             	divl   -0x1c(%ebp)
c010cf25:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010cf28:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cf2b:	ba 00 00 00 00       	mov    $0x0,%edx
c010cf30:	f7 75 e4             	divl   -0x1c(%ebp)
c010cf33:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010cf36:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cf39:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010cf3c:	f7 75 e4             	divl   -0x1c(%ebp)
c010cf3f:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010cf42:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010cf45:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010cf48:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010cf4b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010cf4e:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010cf51:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010cf54:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c010cf57:	8b 45 18             	mov    0x18(%ebp),%eax
c010cf5a:	ba 00 00 00 00       	mov    $0x0,%edx
c010cf5f:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010cf62:	77 56                	ja     c010cfba <printnum+0xdc>
c010cf64:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010cf67:	72 05                	jb     c010cf6e <printnum+0x90>
c010cf69:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c010cf6c:	77 4c                	ja     c010cfba <printnum+0xdc>
        printnum(putch, putdat, result, base, width - 1, padc);
c010cf6e:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010cf71:	8d 50 ff             	lea    -0x1(%eax),%edx
c010cf74:	8b 45 20             	mov    0x20(%ebp),%eax
c010cf77:	89 44 24 18          	mov    %eax,0x18(%esp)
c010cf7b:	89 54 24 14          	mov    %edx,0x14(%esp)
c010cf7f:	8b 45 18             	mov    0x18(%ebp),%eax
c010cf82:	89 44 24 10          	mov    %eax,0x10(%esp)
c010cf86:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010cf89:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010cf8c:	89 44 24 08          	mov    %eax,0x8(%esp)
c010cf90:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010cf94:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cf97:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cf9b:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf9e:	89 04 24             	mov    %eax,(%esp)
c010cfa1:	e8 38 ff ff ff       	call   c010cede <printnum>
c010cfa6:	eb 1c                	jmp    c010cfc4 <printnum+0xe6>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat);
c010cfa8:	8b 45 0c             	mov    0xc(%ebp),%eax
c010cfab:	89 44 24 04          	mov    %eax,0x4(%esp)
c010cfaf:	8b 45 20             	mov    0x20(%ebp),%eax
c010cfb2:	89 04 24             	mov    %eax,(%esp)
c010cfb5:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfb8:	ff d0                	call   *%eax
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c010cfba:	83 6d 1c 01          	subl   $0x1,0x1c(%ebp)
c010cfbe:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010cfc2:	7f e4                	jg     c010cfa8 <printnum+0xca>
            putch(padc, putdat);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat);
c010cfc4:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010cfc7:	05 64 06 11 c0       	add    $0xc0110664,%eax
c010cfcc:	0f b6 00             	movzbl (%eax),%eax
c010cfcf:	0f be c0             	movsbl %al,%eax
c010cfd2:	8b 55 0c             	mov    0xc(%ebp),%edx
c010cfd5:	89 54 24 04          	mov    %edx,0x4(%esp)
c010cfd9:	89 04 24             	mov    %eax,(%esp)
c010cfdc:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfdf:	ff d0                	call   *%eax
}
c010cfe1:	c9                   	leave  
c010cfe2:	c3                   	ret    

c010cfe3 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c010cfe3:	55                   	push   %ebp
c010cfe4:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010cfe6:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010cfea:	7e 14                	jle    c010d000 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c010cfec:	8b 45 08             	mov    0x8(%ebp),%eax
c010cfef:	8b 00                	mov    (%eax),%eax
c010cff1:	8d 48 08             	lea    0x8(%eax),%ecx
c010cff4:	8b 55 08             	mov    0x8(%ebp),%edx
c010cff7:	89 0a                	mov    %ecx,(%edx)
c010cff9:	8b 50 04             	mov    0x4(%eax),%edx
c010cffc:	8b 00                	mov    (%eax),%eax
c010cffe:	eb 30                	jmp    c010d030 <getuint+0x4d>
    }
    else if (lflag) {
c010d000:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d004:	74 16                	je     c010d01c <getuint+0x39>
        return va_arg(*ap, unsigned long);
c010d006:	8b 45 08             	mov    0x8(%ebp),%eax
c010d009:	8b 00                	mov    (%eax),%eax
c010d00b:	8d 48 04             	lea    0x4(%eax),%ecx
c010d00e:	8b 55 08             	mov    0x8(%ebp),%edx
c010d011:	89 0a                	mov    %ecx,(%edx)
c010d013:	8b 00                	mov    (%eax),%eax
c010d015:	ba 00 00 00 00       	mov    $0x0,%edx
c010d01a:	eb 14                	jmp    c010d030 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c010d01c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d01f:	8b 00                	mov    (%eax),%eax
c010d021:	8d 48 04             	lea    0x4(%eax),%ecx
c010d024:	8b 55 08             	mov    0x8(%ebp),%edx
c010d027:	89 0a                	mov    %ecx,(%edx)
c010d029:	8b 00                	mov    (%eax),%eax
c010d02b:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c010d030:	5d                   	pop    %ebp
c010d031:	c3                   	ret    

c010d032 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c010d032:	55                   	push   %ebp
c010d033:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c010d035:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010d039:	7e 14                	jle    c010d04f <getint+0x1d>
        return va_arg(*ap, long long);
c010d03b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d03e:	8b 00                	mov    (%eax),%eax
c010d040:	8d 48 08             	lea    0x8(%eax),%ecx
c010d043:	8b 55 08             	mov    0x8(%ebp),%edx
c010d046:	89 0a                	mov    %ecx,(%edx)
c010d048:	8b 50 04             	mov    0x4(%eax),%edx
c010d04b:	8b 00                	mov    (%eax),%eax
c010d04d:	eb 28                	jmp    c010d077 <getint+0x45>
    }
    else if (lflag) {
c010d04f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d053:	74 12                	je     c010d067 <getint+0x35>
        return va_arg(*ap, long);
c010d055:	8b 45 08             	mov    0x8(%ebp),%eax
c010d058:	8b 00                	mov    (%eax),%eax
c010d05a:	8d 48 04             	lea    0x4(%eax),%ecx
c010d05d:	8b 55 08             	mov    0x8(%ebp),%edx
c010d060:	89 0a                	mov    %ecx,(%edx)
c010d062:	8b 00                	mov    (%eax),%eax
c010d064:	99                   	cltd   
c010d065:	eb 10                	jmp    c010d077 <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c010d067:	8b 45 08             	mov    0x8(%ebp),%eax
c010d06a:	8b 00                	mov    (%eax),%eax
c010d06c:	8d 48 04             	lea    0x4(%eax),%ecx
c010d06f:	8b 55 08             	mov    0x8(%ebp),%edx
c010d072:	89 0a                	mov    %ecx,(%edx)
c010d074:	8b 00                	mov    (%eax),%eax
c010d076:	99                   	cltd   
    }
}
c010d077:	5d                   	pop    %ebp
c010d078:	c3                   	ret    

c010d079 <printfmt>:
 * @putch:      specified putch function, print a single character
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...) {
c010d079:	55                   	push   %ebp
c010d07a:	89 e5                	mov    %esp,%ebp
c010d07c:	83 ec 28             	sub    $0x28,%esp
    va_list ap;

    va_start(ap, fmt);
c010d07f:	8d 45 14             	lea    0x14(%ebp),%eax
c010d082:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, putdat, fmt, ap);
c010d085:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d088:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d08c:	8b 45 10             	mov    0x10(%ebp),%eax
c010d08f:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d093:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d096:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d09a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d09d:	89 04 24             	mov    %eax,(%esp)
c010d0a0:	e8 02 00 00 00       	call   c010d0a7 <vprintfmt>
    va_end(ap);
}
c010d0a5:	c9                   	leave  
c010d0a6:	c3                   	ret    

c010d0a7 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap) {
c010d0a7:	55                   	push   %ebp
c010d0a8:	89 e5                	mov    %esp,%ebp
c010d0aa:	56                   	push   %esi
c010d0ab:	53                   	push   %ebx
c010d0ac:	83 ec 40             	sub    $0x40,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010d0af:	eb 18                	jmp    c010d0c9 <vprintfmt+0x22>
            if (ch == '\0') {
c010d0b1:	85 db                	test   %ebx,%ebx
c010d0b3:	75 05                	jne    c010d0ba <vprintfmt+0x13>
                return;
c010d0b5:	e9 d1 03 00 00       	jmp    c010d48b <vprintfmt+0x3e4>
            }
            putch(ch, putdat);
c010d0ba:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d0bd:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d0c1:	89 1c 24             	mov    %ebx,(%esp)
c010d0c4:	8b 45 08             	mov    0x8(%ebp),%eax
c010d0c7:	ff d0                	call   *%eax
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010d0c9:	8b 45 10             	mov    0x10(%ebp),%eax
c010d0cc:	8d 50 01             	lea    0x1(%eax),%edx
c010d0cf:	89 55 10             	mov    %edx,0x10(%ebp)
c010d0d2:	0f b6 00             	movzbl (%eax),%eax
c010d0d5:	0f b6 d8             	movzbl %al,%ebx
c010d0d8:	83 fb 25             	cmp    $0x25,%ebx
c010d0db:	75 d4                	jne    c010d0b1 <vprintfmt+0xa>
            }
            putch(ch, putdat);
        }

        // Process a %-escape sequence
        char padc = ' ';
c010d0dd:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c010d0e1:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c010d0e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d0eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c010d0ee:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010d0f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d0f8:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c010d0fb:	8b 45 10             	mov    0x10(%ebp),%eax
c010d0fe:	8d 50 01             	lea    0x1(%eax),%edx
c010d101:	89 55 10             	mov    %edx,0x10(%ebp)
c010d104:	0f b6 00             	movzbl (%eax),%eax
c010d107:	0f b6 d8             	movzbl %al,%ebx
c010d10a:	8d 43 dd             	lea    -0x23(%ebx),%eax
c010d10d:	83 f8 55             	cmp    $0x55,%eax
c010d110:	0f 87 44 03 00 00    	ja     c010d45a <vprintfmt+0x3b3>
c010d116:	8b 04 85 88 06 11 c0 	mov    -0x3feef978(,%eax,4),%eax
c010d11d:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c010d11f:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c010d123:	eb d6                	jmp    c010d0fb <vprintfmt+0x54>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c010d125:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c010d129:	eb d0                	jmp    c010d0fb <vprintfmt+0x54>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010d12b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c010d132:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d135:	89 d0                	mov    %edx,%eax
c010d137:	c1 e0 02             	shl    $0x2,%eax
c010d13a:	01 d0                	add    %edx,%eax
c010d13c:	01 c0                	add    %eax,%eax
c010d13e:	01 d8                	add    %ebx,%eax
c010d140:	83 e8 30             	sub    $0x30,%eax
c010d143:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c010d146:	8b 45 10             	mov    0x10(%ebp),%eax
c010d149:	0f b6 00             	movzbl (%eax),%eax
c010d14c:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c010d14f:	83 fb 2f             	cmp    $0x2f,%ebx
c010d152:	7e 0b                	jle    c010d15f <vprintfmt+0xb8>
c010d154:	83 fb 39             	cmp    $0x39,%ebx
c010d157:	7f 06                	jg     c010d15f <vprintfmt+0xb8>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c010d159:	83 45 10 01          	addl   $0x1,0x10(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c010d15d:	eb d3                	jmp    c010d132 <vprintfmt+0x8b>
            goto process_precision;
c010d15f:	eb 33                	jmp    c010d194 <vprintfmt+0xed>

        case '*':
            precision = va_arg(ap, int);
c010d161:	8b 45 14             	mov    0x14(%ebp),%eax
c010d164:	8d 50 04             	lea    0x4(%eax),%edx
c010d167:	89 55 14             	mov    %edx,0x14(%ebp)
c010d16a:	8b 00                	mov    (%eax),%eax
c010d16c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c010d16f:	eb 23                	jmp    c010d194 <vprintfmt+0xed>

        case '.':
            if (width < 0)
c010d171:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d175:	79 0c                	jns    c010d183 <vprintfmt+0xdc>
                width = 0;
c010d177:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c010d17e:	e9 78 ff ff ff       	jmp    c010d0fb <vprintfmt+0x54>
c010d183:	e9 73 ff ff ff       	jmp    c010d0fb <vprintfmt+0x54>

        case '#':
            altflag = 1;
c010d188:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c010d18f:	e9 67 ff ff ff       	jmp    c010d0fb <vprintfmt+0x54>

        process_precision:
            if (width < 0)
c010d194:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d198:	79 12                	jns    c010d1ac <vprintfmt+0x105>
                width = precision, precision = -1;
c010d19a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d19d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d1a0:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c010d1a7:	e9 4f ff ff ff       	jmp    c010d0fb <vprintfmt+0x54>
c010d1ac:	e9 4a ff ff ff       	jmp    c010d0fb <vprintfmt+0x54>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c010d1b1:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c010d1b5:	e9 41 ff ff ff       	jmp    c010d0fb <vprintfmt+0x54>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat);
c010d1ba:	8b 45 14             	mov    0x14(%ebp),%eax
c010d1bd:	8d 50 04             	lea    0x4(%eax),%edx
c010d1c0:	89 55 14             	mov    %edx,0x14(%ebp)
c010d1c3:	8b 00                	mov    (%eax),%eax
c010d1c5:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d1c8:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d1cc:	89 04 24             	mov    %eax,(%esp)
c010d1cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010d1d2:	ff d0                	call   *%eax
            break;
c010d1d4:	e9 ac 02 00 00       	jmp    c010d485 <vprintfmt+0x3de>

        // error message
        case 'e':
            err = va_arg(ap, int);
c010d1d9:	8b 45 14             	mov    0x14(%ebp),%eax
c010d1dc:	8d 50 04             	lea    0x4(%eax),%edx
c010d1df:	89 55 14             	mov    %edx,0x14(%ebp)
c010d1e2:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c010d1e4:	85 db                	test   %ebx,%ebx
c010d1e6:	79 02                	jns    c010d1ea <vprintfmt+0x143>
                err = -err;
c010d1e8:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c010d1ea:	83 fb 18             	cmp    $0x18,%ebx
c010d1ed:	7f 0b                	jg     c010d1fa <vprintfmt+0x153>
c010d1ef:	8b 34 9d 00 06 11 c0 	mov    -0x3feefa00(,%ebx,4),%esi
c010d1f6:	85 f6                	test   %esi,%esi
c010d1f8:	75 23                	jne    c010d21d <vprintfmt+0x176>
                printfmt(putch, putdat, "error %d", err);
c010d1fa:	89 5c 24 0c          	mov    %ebx,0xc(%esp)
c010d1fe:	c7 44 24 08 75 06 11 	movl   $0xc0110675,0x8(%esp)
c010d205:	c0 
c010d206:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d209:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d20d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d210:	89 04 24             	mov    %eax,(%esp)
c010d213:	e8 61 fe ff ff       	call   c010d079 <printfmt>
            }
            else {
                printfmt(putch, putdat, "%s", p);
            }
            break;
c010d218:	e9 68 02 00 00       	jmp    c010d485 <vprintfmt+0x3de>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, putdat, "error %d", err);
            }
            else {
                printfmt(putch, putdat, "%s", p);
c010d21d:	89 74 24 0c          	mov    %esi,0xc(%esp)
c010d221:	c7 44 24 08 7e 06 11 	movl   $0xc011067e,0x8(%esp)
c010d228:	c0 
c010d229:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d22c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d230:	8b 45 08             	mov    0x8(%ebp),%eax
c010d233:	89 04 24             	mov    %eax,(%esp)
c010d236:	e8 3e fe ff ff       	call   c010d079 <printfmt>
            }
            break;
c010d23b:	e9 45 02 00 00       	jmp    c010d485 <vprintfmt+0x3de>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c010d240:	8b 45 14             	mov    0x14(%ebp),%eax
c010d243:	8d 50 04             	lea    0x4(%eax),%edx
c010d246:	89 55 14             	mov    %edx,0x14(%ebp)
c010d249:	8b 30                	mov    (%eax),%esi
c010d24b:	85 f6                	test   %esi,%esi
c010d24d:	75 05                	jne    c010d254 <vprintfmt+0x1ad>
                p = "(null)";
c010d24f:	be 81 06 11 c0       	mov    $0xc0110681,%esi
            }
            if (width > 0 && padc != '-') {
c010d254:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d258:	7e 3e                	jle    c010d298 <vprintfmt+0x1f1>
c010d25a:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c010d25e:	74 38                	je     c010d298 <vprintfmt+0x1f1>
                for (width -= strnlen(p, precision); width > 0; width --) {
c010d260:	8b 5d e8             	mov    -0x18(%ebp),%ebx
c010d263:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d266:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d26a:	89 34 24             	mov    %esi,(%esp)
c010d26d:	e8 ed 03 00 00       	call   c010d65f <strnlen>
c010d272:	29 c3                	sub    %eax,%ebx
c010d274:	89 d8                	mov    %ebx,%eax
c010d276:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d279:	eb 17                	jmp    c010d292 <vprintfmt+0x1eb>
                    putch(padc, putdat);
c010d27b:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c010d27f:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d282:	89 54 24 04          	mov    %edx,0x4(%esp)
c010d286:	89 04 24             	mov    %eax,(%esp)
c010d289:	8b 45 08             	mov    0x8(%ebp),%eax
c010d28c:	ff d0                	call   *%eax
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c010d28e:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010d292:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d296:	7f e3                	jg     c010d27b <vprintfmt+0x1d4>
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010d298:	eb 38                	jmp    c010d2d2 <vprintfmt+0x22b>
                if (altflag && (ch < ' ' || ch > '~')) {
c010d29a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010d29e:	74 1f                	je     c010d2bf <vprintfmt+0x218>
c010d2a0:	83 fb 1f             	cmp    $0x1f,%ebx
c010d2a3:	7e 05                	jle    c010d2aa <vprintfmt+0x203>
c010d2a5:	83 fb 7e             	cmp    $0x7e,%ebx
c010d2a8:	7e 15                	jle    c010d2bf <vprintfmt+0x218>
                    putch('?', putdat);
c010d2aa:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d2ad:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d2b1:	c7 04 24 3f 00 00 00 	movl   $0x3f,(%esp)
c010d2b8:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2bb:	ff d0                	call   *%eax
c010d2bd:	eb 0f                	jmp    c010d2ce <vprintfmt+0x227>
                }
                else {
                    putch(ch, putdat);
c010d2bf:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d2c2:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d2c6:	89 1c 24             	mov    %ebx,(%esp)
c010d2c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010d2cc:	ff d0                	call   *%eax
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c010d2ce:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010d2d2:	89 f0                	mov    %esi,%eax
c010d2d4:	8d 70 01             	lea    0x1(%eax),%esi
c010d2d7:	0f b6 00             	movzbl (%eax),%eax
c010d2da:	0f be d8             	movsbl %al,%ebx
c010d2dd:	85 db                	test   %ebx,%ebx
c010d2df:	74 10                	je     c010d2f1 <vprintfmt+0x24a>
c010d2e1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010d2e5:	78 b3                	js     c010d29a <vprintfmt+0x1f3>
c010d2e7:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c010d2eb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010d2ef:	79 a9                	jns    c010d29a <vprintfmt+0x1f3>
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010d2f1:	eb 17                	jmp    c010d30a <vprintfmt+0x263>
                putch(' ', putdat);
c010d2f3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d2f6:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d2fa:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
c010d301:	8b 45 08             	mov    0x8(%ebp),%eax
c010d304:	ff d0                	call   *%eax
                }
                else {
                    putch(ch, putdat);
                }
            }
            for (; width > 0; width --) {
c010d306:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c010d30a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d30e:	7f e3                	jg     c010d2f3 <vprintfmt+0x24c>
                putch(' ', putdat);
            }
            break;
c010d310:	e9 70 01 00 00       	jmp    c010d485 <vprintfmt+0x3de>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c010d315:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d318:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d31c:	8d 45 14             	lea    0x14(%ebp),%eax
c010d31f:	89 04 24             	mov    %eax,(%esp)
c010d322:	e8 0b fd ff ff       	call   c010d032 <getint>
c010d327:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d32a:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c010d32d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d330:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d333:	85 d2                	test   %edx,%edx
c010d335:	79 26                	jns    c010d35d <vprintfmt+0x2b6>
                putch('-', putdat);
c010d337:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d33a:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d33e:	c7 04 24 2d 00 00 00 	movl   $0x2d,(%esp)
c010d345:	8b 45 08             	mov    0x8(%ebp),%eax
c010d348:	ff d0                	call   *%eax
                num = -(long long)num;
c010d34a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d34d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d350:	f7 d8                	neg    %eax
c010d352:	83 d2 00             	adc    $0x0,%edx
c010d355:	f7 da                	neg    %edx
c010d357:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d35a:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c010d35d:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010d364:	e9 a8 00 00 00       	jmp    c010d411 <vprintfmt+0x36a>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c010d369:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d36c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d370:	8d 45 14             	lea    0x14(%ebp),%eax
c010d373:	89 04 24             	mov    %eax,(%esp)
c010d376:	e8 68 fc ff ff       	call   c010cfe3 <getuint>
c010d37b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d37e:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c010d381:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c010d388:	e9 84 00 00 00       	jmp    c010d411 <vprintfmt+0x36a>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c010d38d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d390:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d394:	8d 45 14             	lea    0x14(%ebp),%eax
c010d397:	89 04 24             	mov    %eax,(%esp)
c010d39a:	e8 44 fc ff ff       	call   c010cfe3 <getuint>
c010d39f:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d3a2:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c010d3a5:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c010d3ac:	eb 63                	jmp    c010d411 <vprintfmt+0x36a>

        // pointer
        case 'p':
            putch('0', putdat);
c010d3ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d3b1:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d3b5:	c7 04 24 30 00 00 00 	movl   $0x30,(%esp)
c010d3bc:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3bf:	ff d0                	call   *%eax
            putch('x', putdat);
c010d3c1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d3c4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d3c8:	c7 04 24 78 00 00 00 	movl   $0x78,(%esp)
c010d3cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010d3d2:	ff d0                	call   *%eax
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c010d3d4:	8b 45 14             	mov    0x14(%ebp),%eax
c010d3d7:	8d 50 04             	lea    0x4(%eax),%edx
c010d3da:	89 55 14             	mov    %edx,0x14(%ebp)
c010d3dd:	8b 00                	mov    (%eax),%eax
c010d3df:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d3e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c010d3e9:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c010d3f0:	eb 1f                	jmp    c010d411 <vprintfmt+0x36a>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c010d3f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d3f5:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d3f9:	8d 45 14             	lea    0x14(%ebp),%eax
c010d3fc:	89 04 24             	mov    %eax,(%esp)
c010d3ff:	e8 df fb ff ff       	call   c010cfe3 <getuint>
c010d404:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d407:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c010d40a:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, putdat, num, base, width, padc);
c010d411:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c010d415:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d418:	89 54 24 18          	mov    %edx,0x18(%esp)
c010d41c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d41f:	89 54 24 14          	mov    %edx,0x14(%esp)
c010d423:	89 44 24 10          	mov    %eax,0x10(%esp)
c010d427:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d42a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d42d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d431:	89 54 24 0c          	mov    %edx,0xc(%esp)
c010d435:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d438:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d43c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d43f:	89 04 24             	mov    %eax,(%esp)
c010d442:	e8 97 fa ff ff       	call   c010cede <printnum>
            break;
c010d447:	eb 3c                	jmp    c010d485 <vprintfmt+0x3de>

        // escaped '%' character
        case '%':
            putch(ch, putdat);
c010d449:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d44c:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d450:	89 1c 24             	mov    %ebx,(%esp)
c010d453:	8b 45 08             	mov    0x8(%ebp),%eax
c010d456:	ff d0                	call   *%eax
            break;
c010d458:	eb 2b                	jmp    c010d485 <vprintfmt+0x3de>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat);
c010d45a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d45d:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d461:	c7 04 24 25 00 00 00 	movl   $0x25,(%esp)
c010d468:	8b 45 08             	mov    0x8(%ebp),%eax
c010d46b:	ff d0                	call   *%eax
            for (fmt --; fmt[-1] != '%'; fmt --)
c010d46d:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010d471:	eb 04                	jmp    c010d477 <vprintfmt+0x3d0>
c010d473:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010d477:	8b 45 10             	mov    0x10(%ebp),%eax
c010d47a:	83 e8 01             	sub    $0x1,%eax
c010d47d:	0f b6 00             	movzbl (%eax),%eax
c010d480:	3c 25                	cmp    $0x25,%al
c010d482:	75 ef                	jne    c010d473 <vprintfmt+0x3cc>
                /* do nothing */;
            break;
c010d484:	90                   	nop
        }
    }
c010d485:	90                   	nop
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c010d486:	e9 3e fc ff ff       	jmp    c010d0c9 <vprintfmt+0x22>
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c010d48b:	83 c4 40             	add    $0x40,%esp
c010d48e:	5b                   	pop    %ebx
c010d48f:	5e                   	pop    %esi
c010d490:	5d                   	pop    %ebp
c010d491:	c3                   	ret    

c010d492 <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c010d492:	55                   	push   %ebp
c010d493:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c010d495:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d498:	8b 40 08             	mov    0x8(%eax),%eax
c010d49b:	8d 50 01             	lea    0x1(%eax),%edx
c010d49e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d4a1:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c010d4a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d4a7:	8b 10                	mov    (%eax),%edx
c010d4a9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d4ac:	8b 40 04             	mov    0x4(%eax),%eax
c010d4af:	39 c2                	cmp    %eax,%edx
c010d4b1:	73 12                	jae    c010d4c5 <sprintputch+0x33>
        *b->buf ++ = ch;
c010d4b3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d4b6:	8b 00                	mov    (%eax),%eax
c010d4b8:	8d 48 01             	lea    0x1(%eax),%ecx
c010d4bb:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d4be:	89 0a                	mov    %ecx,(%edx)
c010d4c0:	8b 55 08             	mov    0x8(%ebp),%edx
c010d4c3:	88 10                	mov    %dl,(%eax)
    }
}
c010d4c5:	5d                   	pop    %ebp
c010d4c6:	c3                   	ret    

c010d4c7 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c010d4c7:	55                   	push   %ebp
c010d4c8:	89 e5                	mov    %esp,%ebp
c010d4ca:	83 ec 28             	sub    $0x28,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c010d4cd:	8d 45 14             	lea    0x14(%ebp),%eax
c010d4d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c010d4d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d4d6:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d4da:	8b 45 10             	mov    0x10(%ebp),%eax
c010d4dd:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d4e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d4e4:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d4e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010d4eb:	89 04 24             	mov    %eax,(%esp)
c010d4ee:	e8 08 00 00 00       	call   c010d4fb <vsnprintf>
c010d4f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c010d4f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d4f9:	c9                   	leave  
c010d4fa:	c3                   	ret    

c010d4fb <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c010d4fb:	55                   	push   %ebp
c010d4fc:	89 e5                	mov    %esp,%ebp
c010d4fe:	83 ec 28             	sub    $0x28,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c010d501:	8b 45 08             	mov    0x8(%ebp),%eax
c010d504:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d507:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d50a:	8d 50 ff             	lea    -0x1(%eax),%edx
c010d50d:	8b 45 08             	mov    0x8(%ebp),%eax
c010d510:	01 d0                	add    %edx,%eax
c010d512:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d515:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c010d51c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d520:	74 0a                	je     c010d52c <vsnprintf+0x31>
c010d522:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d525:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d528:	39 c2                	cmp    %eax,%edx
c010d52a:	76 07                	jbe    c010d533 <vsnprintf+0x38>
        return -E_INVAL;
c010d52c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010d531:	eb 2a                	jmp    c010d55d <vsnprintf+0x62>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, &b, fmt, ap);
c010d533:	8b 45 14             	mov    0x14(%ebp),%eax
c010d536:	89 44 24 0c          	mov    %eax,0xc(%esp)
c010d53a:	8b 45 10             	mov    0x10(%ebp),%eax
c010d53d:	89 44 24 08          	mov    %eax,0x8(%esp)
c010d541:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010d544:	89 44 24 04          	mov    %eax,0x4(%esp)
c010d548:	c7 04 24 92 d4 10 c0 	movl   $0xc010d492,(%esp)
c010d54f:	e8 53 fb ff ff       	call   c010d0a7 <vprintfmt>
    // null terminate the buffer
    *b.buf = '\0';
c010d554:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d557:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c010d55a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d55d:	c9                   	leave  
c010d55e:	c3                   	ret    

c010d55f <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c010d55f:	55                   	push   %ebp
c010d560:	89 e5                	mov    %esp,%ebp
c010d562:	57                   	push   %edi
c010d563:	56                   	push   %esi
c010d564:	53                   	push   %ebx
c010d565:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c010d568:	a1 c0 1e 13 c0       	mov    0xc0131ec0,%eax
c010d56d:	8b 15 c4 1e 13 c0    	mov    0xc0131ec4,%edx
c010d573:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c010d579:	6b f0 05             	imul   $0x5,%eax,%esi
c010d57c:	01 f7                	add    %esi,%edi
c010d57e:	be 6d e6 ec de       	mov    $0xdeece66d,%esi
c010d583:	f7 e6                	mul    %esi
c010d585:	8d 34 17             	lea    (%edi,%edx,1),%esi
c010d588:	89 f2                	mov    %esi,%edx
c010d58a:	83 c0 0b             	add    $0xb,%eax
c010d58d:	83 d2 00             	adc    $0x0,%edx
c010d590:	89 c7                	mov    %eax,%edi
c010d592:	83 e7 ff             	and    $0xffffffff,%edi
c010d595:	89 f9                	mov    %edi,%ecx
c010d597:	0f b7 da             	movzwl %dx,%ebx
c010d59a:	89 0d c0 1e 13 c0    	mov    %ecx,0xc0131ec0
c010d5a0:	89 1d c4 1e 13 c0    	mov    %ebx,0xc0131ec4
    unsigned long long result = (next >> 12);
c010d5a6:	a1 c0 1e 13 c0       	mov    0xc0131ec0,%eax
c010d5ab:	8b 15 c4 1e 13 c0    	mov    0xc0131ec4,%edx
c010d5b1:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c010d5b5:	c1 ea 0c             	shr    $0xc,%edx
c010d5b8:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d5bb:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c010d5be:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c010d5c5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d5c8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d5cb:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010d5ce:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010d5d1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d5d4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d5d7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010d5db:	74 1c                	je     c010d5f9 <rand+0x9a>
c010d5dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d5e0:	ba 00 00 00 00       	mov    $0x0,%edx
c010d5e5:	f7 75 dc             	divl   -0x24(%ebp)
c010d5e8:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010d5eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d5ee:	ba 00 00 00 00       	mov    $0x0,%edx
c010d5f3:	f7 75 dc             	divl   -0x24(%ebp)
c010d5f6:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d5f9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d5fc:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d5ff:	f7 75 dc             	divl   -0x24(%ebp)
c010d602:	89 45 d8             	mov    %eax,-0x28(%ebp)
c010d605:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010d608:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d60b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d60e:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d611:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010d614:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c010d617:	83 c4 24             	add    $0x24,%esp
c010d61a:	5b                   	pop    %ebx
c010d61b:	5e                   	pop    %esi
c010d61c:	5f                   	pop    %edi
c010d61d:	5d                   	pop    %ebp
c010d61e:	c3                   	ret    

c010d61f <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c010d61f:	55                   	push   %ebp
c010d620:	89 e5                	mov    %esp,%ebp
    next = seed;
c010d622:	8b 45 08             	mov    0x8(%ebp),%eax
c010d625:	ba 00 00 00 00       	mov    $0x0,%edx
c010d62a:	a3 c0 1e 13 c0       	mov    %eax,0xc0131ec0
c010d62f:	89 15 c4 1e 13 c0    	mov    %edx,0xc0131ec4
}
c010d635:	5d                   	pop    %ebp
c010d636:	c3                   	ret    

c010d637 <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c010d637:	55                   	push   %ebp
c010d638:	89 e5                	mov    %esp,%ebp
c010d63a:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010d63d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c010d644:	eb 04                	jmp    c010d64a <strlen+0x13>
        cnt ++;
c010d646:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c010d64a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d64d:	8d 50 01             	lea    0x1(%eax),%edx
c010d650:	89 55 08             	mov    %edx,0x8(%ebp)
c010d653:	0f b6 00             	movzbl (%eax),%eax
c010d656:	84 c0                	test   %al,%al
c010d658:	75 ec                	jne    c010d646 <strlen+0xf>
        cnt ++;
    }
    return cnt;
c010d65a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010d65d:	c9                   	leave  
c010d65e:	c3                   	ret    

c010d65f <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c010d65f:	55                   	push   %ebp
c010d660:	89 e5                	mov    %esp,%ebp
c010d662:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c010d665:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c010d66c:	eb 04                	jmp    c010d672 <strnlen+0x13>
        cnt ++;
c010d66e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c010d672:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d675:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010d678:	73 10                	jae    c010d68a <strnlen+0x2b>
c010d67a:	8b 45 08             	mov    0x8(%ebp),%eax
c010d67d:	8d 50 01             	lea    0x1(%eax),%edx
c010d680:	89 55 08             	mov    %edx,0x8(%ebp)
c010d683:	0f b6 00             	movzbl (%eax),%eax
c010d686:	84 c0                	test   %al,%al
c010d688:	75 e4                	jne    c010d66e <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c010d68a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c010d68d:	c9                   	leave  
c010d68e:	c3                   	ret    

c010d68f <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c010d68f:	55                   	push   %ebp
c010d690:	89 e5                	mov    %esp,%ebp
c010d692:	57                   	push   %edi
c010d693:	56                   	push   %esi
c010d694:	83 ec 20             	sub    $0x20,%esp
c010d697:	8b 45 08             	mov    0x8(%ebp),%eax
c010d69a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d69d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d6a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c010d6a3:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010d6a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d6a9:	89 d1                	mov    %edx,%ecx
c010d6ab:	89 c2                	mov    %eax,%edx
c010d6ad:	89 ce                	mov    %ecx,%esi
c010d6af:	89 d7                	mov    %edx,%edi
c010d6b1:	ac                   	lods   %ds:(%esi),%al
c010d6b2:	aa                   	stos   %al,%es:(%edi)
c010d6b3:	84 c0                	test   %al,%al
c010d6b5:	75 fa                	jne    c010d6b1 <strcpy+0x22>
c010d6b7:	89 fa                	mov    %edi,%edx
c010d6b9:	89 f1                	mov    %esi,%ecx
c010d6bb:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010d6be:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010d6c1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c010d6c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c010d6c7:	83 c4 20             	add    $0x20,%esp
c010d6ca:	5e                   	pop    %esi
c010d6cb:	5f                   	pop    %edi
c010d6cc:	5d                   	pop    %ebp
c010d6cd:	c3                   	ret    

c010d6ce <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c010d6ce:	55                   	push   %ebp
c010d6cf:	89 e5                	mov    %esp,%ebp
c010d6d1:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c010d6d4:	8b 45 08             	mov    0x8(%ebp),%eax
c010d6d7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c010d6da:	eb 21                	jmp    c010d6fd <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c010d6dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d6df:	0f b6 10             	movzbl (%eax),%edx
c010d6e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d6e5:	88 10                	mov    %dl,(%eax)
c010d6e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010d6ea:	0f b6 00             	movzbl (%eax),%eax
c010d6ed:	84 c0                	test   %al,%al
c010d6ef:	74 04                	je     c010d6f5 <strncpy+0x27>
            src ++;
c010d6f1:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c010d6f5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010d6f9:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c010d6fd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d701:	75 d9                	jne    c010d6dc <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c010d703:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010d706:	c9                   	leave  
c010d707:	c3                   	ret    

c010d708 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c010d708:	55                   	push   %ebp
c010d709:	89 e5                	mov    %esp,%ebp
c010d70b:	57                   	push   %edi
c010d70c:	56                   	push   %esi
c010d70d:	83 ec 20             	sub    $0x20,%esp
c010d710:	8b 45 08             	mov    0x8(%ebp),%eax
c010d713:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d716:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d719:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c010d71c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d71f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d722:	89 d1                	mov    %edx,%ecx
c010d724:	89 c2                	mov    %eax,%edx
c010d726:	89 ce                	mov    %ecx,%esi
c010d728:	89 d7                	mov    %edx,%edi
c010d72a:	ac                   	lods   %ds:(%esi),%al
c010d72b:	ae                   	scas   %es:(%edi),%al
c010d72c:	75 08                	jne    c010d736 <strcmp+0x2e>
c010d72e:	84 c0                	test   %al,%al
c010d730:	75 f8                	jne    c010d72a <strcmp+0x22>
c010d732:	31 c0                	xor    %eax,%eax
c010d734:	eb 04                	jmp    c010d73a <strcmp+0x32>
c010d736:	19 c0                	sbb    %eax,%eax
c010d738:	0c 01                	or     $0x1,%al
c010d73a:	89 fa                	mov    %edi,%edx
c010d73c:	89 f1                	mov    %esi,%ecx
c010d73e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d741:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010d744:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c010d747:	8b 45 ec             	mov    -0x14(%ebp),%eax
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c010d74a:	83 c4 20             	add    $0x20,%esp
c010d74d:	5e                   	pop    %esi
c010d74e:	5f                   	pop    %edi
c010d74f:	5d                   	pop    %ebp
c010d750:	c3                   	ret    

c010d751 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c010d751:	55                   	push   %ebp
c010d752:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010d754:	eb 0c                	jmp    c010d762 <strncmp+0x11>
        n --, s1 ++, s2 ++;
c010d756:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c010d75a:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d75e:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c010d762:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d766:	74 1a                	je     c010d782 <strncmp+0x31>
c010d768:	8b 45 08             	mov    0x8(%ebp),%eax
c010d76b:	0f b6 00             	movzbl (%eax),%eax
c010d76e:	84 c0                	test   %al,%al
c010d770:	74 10                	je     c010d782 <strncmp+0x31>
c010d772:	8b 45 08             	mov    0x8(%ebp),%eax
c010d775:	0f b6 10             	movzbl (%eax),%edx
c010d778:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d77b:	0f b6 00             	movzbl (%eax),%eax
c010d77e:	38 c2                	cmp    %al,%dl
c010d780:	74 d4                	je     c010d756 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c010d782:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d786:	74 18                	je     c010d7a0 <strncmp+0x4f>
c010d788:	8b 45 08             	mov    0x8(%ebp),%eax
c010d78b:	0f b6 00             	movzbl (%eax),%eax
c010d78e:	0f b6 d0             	movzbl %al,%edx
c010d791:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d794:	0f b6 00             	movzbl (%eax),%eax
c010d797:	0f b6 c0             	movzbl %al,%eax
c010d79a:	29 c2                	sub    %eax,%edx
c010d79c:	89 d0                	mov    %edx,%eax
c010d79e:	eb 05                	jmp    c010d7a5 <strncmp+0x54>
c010d7a0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d7a5:	5d                   	pop    %ebp
c010d7a6:	c3                   	ret    

c010d7a7 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c010d7a7:	55                   	push   %ebp
c010d7a8:	89 e5                	mov    %esp,%ebp
c010d7aa:	83 ec 04             	sub    $0x4,%esp
c010d7ad:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d7b0:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010d7b3:	eb 14                	jmp    c010d7c9 <strchr+0x22>
        if (*s == c) {
c010d7b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010d7b8:	0f b6 00             	movzbl (%eax),%eax
c010d7bb:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010d7be:	75 05                	jne    c010d7c5 <strchr+0x1e>
            return (char *)s;
c010d7c0:	8b 45 08             	mov    0x8(%ebp),%eax
c010d7c3:	eb 13                	jmp    c010d7d8 <strchr+0x31>
        }
        s ++;
c010d7c5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c010d7c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010d7cc:	0f b6 00             	movzbl (%eax),%eax
c010d7cf:	84 c0                	test   %al,%al
c010d7d1:	75 e2                	jne    c010d7b5 <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c010d7d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d7d8:	c9                   	leave  
c010d7d9:	c3                   	ret    

c010d7da <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c010d7da:	55                   	push   %ebp
c010d7db:	89 e5                	mov    %esp,%ebp
c010d7dd:	83 ec 04             	sub    $0x4,%esp
c010d7e0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d7e3:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c010d7e6:	eb 11                	jmp    c010d7f9 <strfind+0x1f>
        if (*s == c) {
c010d7e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010d7eb:	0f b6 00             	movzbl (%eax),%eax
c010d7ee:	3a 45 fc             	cmp    -0x4(%ebp),%al
c010d7f1:	75 02                	jne    c010d7f5 <strfind+0x1b>
            break;
c010d7f3:	eb 0e                	jmp    c010d803 <strfind+0x29>
        }
        s ++;
c010d7f5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c010d7f9:	8b 45 08             	mov    0x8(%ebp),%eax
c010d7fc:	0f b6 00             	movzbl (%eax),%eax
c010d7ff:	84 c0                	test   %al,%al
c010d801:	75 e5                	jne    c010d7e8 <strfind+0xe>
        if (*s == c) {
            break;
        }
        s ++;
    }
    return (char *)s;
c010d803:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010d806:	c9                   	leave  
c010d807:	c3                   	ret    

c010d808 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c010d808:	55                   	push   %ebp
c010d809:	89 e5                	mov    %esp,%ebp
c010d80b:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c010d80e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c010d815:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010d81c:	eb 04                	jmp    c010d822 <strtol+0x1a>
        s ++;
c010d81e:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c010d822:	8b 45 08             	mov    0x8(%ebp),%eax
c010d825:	0f b6 00             	movzbl (%eax),%eax
c010d828:	3c 20                	cmp    $0x20,%al
c010d82a:	74 f2                	je     c010d81e <strtol+0x16>
c010d82c:	8b 45 08             	mov    0x8(%ebp),%eax
c010d82f:	0f b6 00             	movzbl (%eax),%eax
c010d832:	3c 09                	cmp    $0x9,%al
c010d834:	74 e8                	je     c010d81e <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c010d836:	8b 45 08             	mov    0x8(%ebp),%eax
c010d839:	0f b6 00             	movzbl (%eax),%eax
c010d83c:	3c 2b                	cmp    $0x2b,%al
c010d83e:	75 06                	jne    c010d846 <strtol+0x3e>
        s ++;
c010d840:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d844:	eb 15                	jmp    c010d85b <strtol+0x53>
    }
    else if (*s == '-') {
c010d846:	8b 45 08             	mov    0x8(%ebp),%eax
c010d849:	0f b6 00             	movzbl (%eax),%eax
c010d84c:	3c 2d                	cmp    $0x2d,%al
c010d84e:	75 0b                	jne    c010d85b <strtol+0x53>
        s ++, neg = 1;
c010d850:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d854:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c010d85b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d85f:	74 06                	je     c010d867 <strtol+0x5f>
c010d861:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c010d865:	75 24                	jne    c010d88b <strtol+0x83>
c010d867:	8b 45 08             	mov    0x8(%ebp),%eax
c010d86a:	0f b6 00             	movzbl (%eax),%eax
c010d86d:	3c 30                	cmp    $0x30,%al
c010d86f:	75 1a                	jne    c010d88b <strtol+0x83>
c010d871:	8b 45 08             	mov    0x8(%ebp),%eax
c010d874:	83 c0 01             	add    $0x1,%eax
c010d877:	0f b6 00             	movzbl (%eax),%eax
c010d87a:	3c 78                	cmp    $0x78,%al
c010d87c:	75 0d                	jne    c010d88b <strtol+0x83>
        s += 2, base = 16;
c010d87e:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c010d882:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c010d889:	eb 2a                	jmp    c010d8b5 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c010d88b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d88f:	75 17                	jne    c010d8a8 <strtol+0xa0>
c010d891:	8b 45 08             	mov    0x8(%ebp),%eax
c010d894:	0f b6 00             	movzbl (%eax),%eax
c010d897:	3c 30                	cmp    $0x30,%al
c010d899:	75 0d                	jne    c010d8a8 <strtol+0xa0>
        s ++, base = 8;
c010d89b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d89f:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c010d8a6:	eb 0d                	jmp    c010d8b5 <strtol+0xad>
    }
    else if (base == 0) {
c010d8a8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010d8ac:	75 07                	jne    c010d8b5 <strtol+0xad>
        base = 10;
c010d8ae:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c010d8b5:	8b 45 08             	mov    0x8(%ebp),%eax
c010d8b8:	0f b6 00             	movzbl (%eax),%eax
c010d8bb:	3c 2f                	cmp    $0x2f,%al
c010d8bd:	7e 1b                	jle    c010d8da <strtol+0xd2>
c010d8bf:	8b 45 08             	mov    0x8(%ebp),%eax
c010d8c2:	0f b6 00             	movzbl (%eax),%eax
c010d8c5:	3c 39                	cmp    $0x39,%al
c010d8c7:	7f 11                	jg     c010d8da <strtol+0xd2>
            dig = *s - '0';
c010d8c9:	8b 45 08             	mov    0x8(%ebp),%eax
c010d8cc:	0f b6 00             	movzbl (%eax),%eax
c010d8cf:	0f be c0             	movsbl %al,%eax
c010d8d2:	83 e8 30             	sub    $0x30,%eax
c010d8d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d8d8:	eb 48                	jmp    c010d922 <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c010d8da:	8b 45 08             	mov    0x8(%ebp),%eax
c010d8dd:	0f b6 00             	movzbl (%eax),%eax
c010d8e0:	3c 60                	cmp    $0x60,%al
c010d8e2:	7e 1b                	jle    c010d8ff <strtol+0xf7>
c010d8e4:	8b 45 08             	mov    0x8(%ebp),%eax
c010d8e7:	0f b6 00             	movzbl (%eax),%eax
c010d8ea:	3c 7a                	cmp    $0x7a,%al
c010d8ec:	7f 11                	jg     c010d8ff <strtol+0xf7>
            dig = *s - 'a' + 10;
c010d8ee:	8b 45 08             	mov    0x8(%ebp),%eax
c010d8f1:	0f b6 00             	movzbl (%eax),%eax
c010d8f4:	0f be c0             	movsbl %al,%eax
c010d8f7:	83 e8 57             	sub    $0x57,%eax
c010d8fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d8fd:	eb 23                	jmp    c010d922 <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c010d8ff:	8b 45 08             	mov    0x8(%ebp),%eax
c010d902:	0f b6 00             	movzbl (%eax),%eax
c010d905:	3c 40                	cmp    $0x40,%al
c010d907:	7e 3d                	jle    c010d946 <strtol+0x13e>
c010d909:	8b 45 08             	mov    0x8(%ebp),%eax
c010d90c:	0f b6 00             	movzbl (%eax),%eax
c010d90f:	3c 5a                	cmp    $0x5a,%al
c010d911:	7f 33                	jg     c010d946 <strtol+0x13e>
            dig = *s - 'A' + 10;
c010d913:	8b 45 08             	mov    0x8(%ebp),%eax
c010d916:	0f b6 00             	movzbl (%eax),%eax
c010d919:	0f be c0             	movsbl %al,%eax
c010d91c:	83 e8 37             	sub    $0x37,%eax
c010d91f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c010d922:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d925:	3b 45 10             	cmp    0x10(%ebp),%eax
c010d928:	7c 02                	jl     c010d92c <strtol+0x124>
            break;
c010d92a:	eb 1a                	jmp    c010d946 <strtol+0x13e>
        }
        s ++, val = (val * base) + dig;
c010d92c:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010d930:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d933:	0f af 45 10          	imul   0x10(%ebp),%eax
c010d937:	89 c2                	mov    %eax,%edx
c010d939:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d93c:	01 d0                	add    %edx,%eax
c010d93e:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c010d941:	e9 6f ff ff ff       	jmp    c010d8b5 <strtol+0xad>

    if (endptr) {
c010d946:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d94a:	74 08                	je     c010d954 <strtol+0x14c>
        *endptr = (char *) s;
c010d94c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d94f:	8b 55 08             	mov    0x8(%ebp),%edx
c010d952:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c010d954:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010d958:	74 07                	je     c010d961 <strtol+0x159>
c010d95a:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010d95d:	f7 d8                	neg    %eax
c010d95f:	eb 03                	jmp    c010d964 <strtol+0x15c>
c010d961:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c010d964:	c9                   	leave  
c010d965:	c3                   	ret    

c010d966 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c010d966:	55                   	push   %ebp
c010d967:	89 e5                	mov    %esp,%ebp
c010d969:	57                   	push   %edi
c010d96a:	83 ec 24             	sub    $0x24,%esp
c010d96d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d970:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c010d973:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c010d977:	8b 55 08             	mov    0x8(%ebp),%edx
c010d97a:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010d97d:	88 45 f7             	mov    %al,-0x9(%ebp)
c010d980:	8b 45 10             	mov    0x10(%ebp),%eax
c010d983:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c010d986:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c010d989:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c010d98d:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010d990:	89 d7                	mov    %edx,%edi
c010d992:	f3 aa                	rep stos %al,%es:(%edi)
c010d994:	89 fa                	mov    %edi,%edx
c010d996:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c010d999:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c010d99c:	8b 45 f8             	mov    -0x8(%ebp),%eax
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c010d99f:	83 c4 24             	add    $0x24,%esp
c010d9a2:	5f                   	pop    %edi
c010d9a3:	5d                   	pop    %ebp
c010d9a4:	c3                   	ret    

c010d9a5 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c010d9a5:	55                   	push   %ebp
c010d9a6:	89 e5                	mov    %esp,%ebp
c010d9a8:	57                   	push   %edi
c010d9a9:	56                   	push   %esi
c010d9aa:	53                   	push   %ebx
c010d9ab:	83 ec 30             	sub    $0x30,%esp
c010d9ae:	8b 45 08             	mov    0x8(%ebp),%eax
c010d9b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d9b4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d9b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d9ba:	8b 45 10             	mov    0x10(%ebp),%eax
c010d9bd:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c010d9c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d9c3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010d9c6:	73 42                	jae    c010da0a <memmove+0x65>
c010d9c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d9cb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010d9ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d9d1:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d9d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d9d7:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010d9da:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d9dd:	c1 e8 02             	shr    $0x2,%eax
c010d9e0:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010d9e2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010d9e5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d9e8:	89 d7                	mov    %edx,%edi
c010d9ea:	89 c6                	mov    %eax,%esi
c010d9ec:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010d9ee:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c010d9f1:	83 e1 03             	and    $0x3,%ecx
c010d9f4:	74 02                	je     c010d9f8 <memmove+0x53>
c010d9f6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010d9f8:	89 f0                	mov    %esi,%eax
c010d9fa:	89 fa                	mov    %edi,%edx
c010d9fc:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c010d9ff:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010da02:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010da05:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010da08:	eb 36                	jmp    c010da40 <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c010da0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010da0d:	8d 50 ff             	lea    -0x1(%eax),%edx
c010da10:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010da13:	01 c2                	add    %eax,%edx
c010da15:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010da18:	8d 48 ff             	lea    -0x1(%eax),%ecx
c010da1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010da1e:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c010da21:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010da24:	89 c1                	mov    %eax,%ecx
c010da26:	89 d8                	mov    %ebx,%eax
c010da28:	89 d6                	mov    %edx,%esi
c010da2a:	89 c7                	mov    %eax,%edi
c010da2c:	fd                   	std    
c010da2d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010da2f:	fc                   	cld    
c010da30:	89 f8                	mov    %edi,%eax
c010da32:	89 f2                	mov    %esi,%edx
c010da34:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c010da37:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010da3a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c010da3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c010da40:	83 c4 30             	add    $0x30,%esp
c010da43:	5b                   	pop    %ebx
c010da44:	5e                   	pop    %esi
c010da45:	5f                   	pop    %edi
c010da46:	5d                   	pop    %ebp
c010da47:	c3                   	ret    

c010da48 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c010da48:	55                   	push   %ebp
c010da49:	89 e5                	mov    %esp,%ebp
c010da4b:	57                   	push   %edi
c010da4c:	56                   	push   %esi
c010da4d:	83 ec 20             	sub    $0x20,%esp
c010da50:	8b 45 08             	mov    0x8(%ebp),%eax
c010da53:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010da56:	8b 45 0c             	mov    0xc(%ebp),%eax
c010da59:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010da5c:	8b 45 10             	mov    0x10(%ebp),%eax
c010da5f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c010da62:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010da65:	c1 e8 02             	shr    $0x2,%eax
c010da68:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c010da6a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010da6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010da70:	89 d7                	mov    %edx,%edi
c010da72:	89 c6                	mov    %eax,%esi
c010da74:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c010da76:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c010da79:	83 e1 03             	and    $0x3,%ecx
c010da7c:	74 02                	je     c010da80 <memcpy+0x38>
c010da7e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c010da80:	89 f0                	mov    %esi,%eax
c010da82:	89 fa                	mov    %edi,%edx
c010da84:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c010da87:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010da8a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c010da8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c010da90:	83 c4 20             	add    $0x20,%esp
c010da93:	5e                   	pop    %esi
c010da94:	5f                   	pop    %edi
c010da95:	5d                   	pop    %ebp
c010da96:	c3                   	ret    

c010da97 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c010da97:	55                   	push   %ebp
c010da98:	89 e5                	mov    %esp,%ebp
c010da9a:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c010da9d:	8b 45 08             	mov    0x8(%ebp),%eax
c010daa0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c010daa3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010daa6:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c010daa9:	eb 30                	jmp    c010dadb <memcmp+0x44>
        if (*s1 != *s2) {
c010daab:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010daae:	0f b6 10             	movzbl (%eax),%edx
c010dab1:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010dab4:	0f b6 00             	movzbl (%eax),%eax
c010dab7:	38 c2                	cmp    %al,%dl
c010dab9:	74 18                	je     c010dad3 <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c010dabb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010dabe:	0f b6 00             	movzbl (%eax),%eax
c010dac1:	0f b6 d0             	movzbl %al,%edx
c010dac4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010dac7:	0f b6 00             	movzbl (%eax),%eax
c010daca:	0f b6 c0             	movzbl %al,%eax
c010dacd:	29 c2                	sub    %eax,%edx
c010dacf:	89 d0                	mov    %edx,%eax
c010dad1:	eb 1a                	jmp    c010daed <memcmp+0x56>
        }
        s1 ++, s2 ++;
c010dad3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c010dad7:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c010dadb:	8b 45 10             	mov    0x10(%ebp),%eax
c010dade:	8d 50 ff             	lea    -0x1(%eax),%edx
c010dae1:	89 55 10             	mov    %edx,0x10(%ebp)
c010dae4:	85 c0                	test   %eax,%eax
c010dae6:	75 c3                	jne    c010daab <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c010dae8:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010daed:	c9                   	leave  
c010daee:	c3                   	ret    
