FUNCTION _Hanoi_New : 
BASIC BLOCK 0 : 
  Def     = [ _T6 _T7 _T8 _T9 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
    _T6 = 8 [ _T6 ]
    parm _T6 [ ]
    _T7 =  call _Alloc [ _T7 ]
    _T8 = 0 [ _T7 _T8 ]
    *(_T7 + 4) = _T8 [ _T7 ]
    _T9 = VTBL <_Hanoi> [ _T7 _T9 ]
    *(_T7 + 0) = _T9 [ _T7 ]
END BY RETURN, result = _T7

FUNCTION _Main_New : 
BASIC BLOCK 0 : 
  Def     = [ _T10 _T11 _T12 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
    _T10 = 4 [ _T10 ]
    parm _T10 [ ]
    _T11 =  call _Alloc [ _T11 ]
    _T12 = VTBL <_Main> [ _T11 _T12 ]
    *(_T11 + 0) = _T12 [ _T11 ]
END BY RETURN, result = _T11

FUNCTION _Hanoi.init : 
BASIC BLOCK 0 : 
  Def     = [ _T13 _T14 ]
  liveUse = [ _T0 ]
  liveIn  = [ _T0 ]
  liveOut = [ _T0 ]
    _T13 = *(_T0 + 4) [ _T0 ]
    _T14 = 0 [ _T0 _T14 ]
    *(_T0 + 4) = _T14 [ _T0 ]
END BY RETURN, void result

FUNCTION _Hanoi.move : 
BASIC BLOCK 0 : 
  Def     = [ _T16 _T17 ]
  liveUse = [ _T2 ]
  liveIn  = [ _T1 _T2 _T3 _T4 _T5 ]
  liveOut = [ _T1 _T2 _T3 _T4 _T5 ]
    _T16 = 0 [ _T16 _T1 _T2 _T3 _T4 _T5 ]
    _T17 = (_T2 == _T16) [ _T1 _T17 _T2 _T3 _T4 _T5 ]
END BY BEQZ, if _T17 = 
    0 : goto 2; 1 : goto 1
BASIC BLOCK 1 : 
  Def     = [ ]
  liveUse = [ ]
  liveIn  = [ _T1 _T2 _T3 _T4 _T5 ]
  liveOut = [ _T1 _T2 _T3 _T4 _T5 ]
END BY RETURN, void result
BASIC BLOCK 2 : 
  Def     = [ _T15 _T18 _T19 _T20 _T21 _T22 _T23 _T24 _T25 _T26 _T27 _T28 _T29 _T30 _T31 _T32 _T33 _T34 ]
  liveUse = [ _T1 _T2 _T3 _T4 _T5 ]
  liveIn  = [ _T1 _T2 _T3 _T4 _T5 ]
  liveOut = [ _T1 _T2 _T3 _T4 _T5 ]
    _T18 = 1 [ _T1 _T2 _T18 _T3 _T4 _T5 ]
    _T19 = (_T2 - _T18) [ _T1 _T2 _T3 _T19 _T4 _T5 ]
    parm _T1 [ _T1 _T2 _T3 _T19 _T4 _T5 ]
    parm _T19 [ _T1 _T2 _T3 _T4 _T5 ]
    parm _T3 [ _T1 _T2 _T3 _T4 _T5 ]
    parm _T5 [ _T1 _T2 _T3 _T4 _T5 ]
    parm _T4 [ _T1 _T2 _T3 _T4 _T5 ]
    _T20 = *(_T1 + 0) [ _T1 _T2 _T3 _T4 _T20 _T5 ]
    _T21 = *(_T20 + 12) [ _T1 _T2 _T3 _T4 _T5 _T21 ]
    call _T21 [ _T1 _T2 _T3 _T4 _T5 ]
    _T22 = *(_T1 + 4) [ _T1 _T2 _T3 _T4 _T5 _T22 ]
    _T15 = _T22 [ _T1 _T2 _T3 _T4 _T5 _T15 ]
    _T23 = "#" [ _T1 _T2 _T3 _T4 _T5 _T23 _T15 ]
    parm _T23 [ _T1 _T2 _T3 _T4 _T5 _T15 ]
    call _PrintString [ _T1 _T2 _T3 _T4 _T5 _T15 ]
    parm _T15 [ _T1 _T2 _T3 _T4 _T5 _T15 ]
    call _PrintInt [ _T1 _T2 _T3 _T4 _T5 _T15 ]
    _T24 = ": move " [ _T1 _T2 _T3 _T4 _T5 _T24 _T15 ]
    parm _T24 [ _T1 _T2 _T3 _T4 _T5 _T15 ]
    call _PrintString [ _T1 _T2 _T3 _T4 _T5 _T15 ]
    parm _T2 [ _T1 _T2 _T3 _T4 _T5 _T15 ]
    call _PrintInt [ _T1 _T2 _T3 _T4 _T5 _T15 ]
    _T25 = " from " [ _T1 _T2 _T3 _T4 _T5 _T25 _T15 ]
    parm _T25 [ _T1 _T2 _T3 _T4 _T5 _T15 ]
    call _PrintString [ _T1 _T2 _T3 _T4 _T5 _T15 ]
    parm _T3 [ _T1 _T2 _T3 _T4 _T5 _T15 ]
    call _PrintString [ _T1 _T2 _T3 _T4 _T5 _T15 ]
    _T26 = " to " [ _T1 _T2 _T3 _T4 _T5 _T26 _T15 ]
    parm _T26 [ _T1 _T2 _T3 _T4 _T5 _T15 ]
    call _PrintString [ _T1 _T2 _T3 _T4 _T5 _T15 ]
    parm _T4 [ _T1 _T2 _T3 _T4 _T5 _T15 ]
    call _PrintString [ _T1 _T2 _T3 _T4 _T5 _T15 ]
    _T27 = "\n" [ _T1 _T2 _T3 _T4 _T5 _T27 _T15 ]
    parm _T27 [ _T1 _T2 _T3 _T4 _T5 _T15 ]
    call _PrintString [ _T1 _T2 _T3 _T4 _T5 _T15 ]
    _T28 = *(_T1 + 4) [ _T1 _T2 _T3 _T4 _T5 _T15 ]
    _T29 = 1 [ _T1 _T2 _T3 _T4 _T5 _T29 _T15 ]
    _T30 = (_T15 + _T29) [ _T1 _T2 _T3 _T4 _T5 _T30 ]
    *(_T1 + 4) = _T30 [ _T1 _T2 _T3 _T4 _T5 ]
    _T31 = 1 [ _T1 _T2 _T3 _T4 _T5 _T31 ]
    _T32 = (_T2 - _T31) [ _T32 _T1 _T2 _T3 _T4 _T5 ]
    parm _T1 [ _T32 _T1 _T2 _T3 _T4 _T5 ]
    parm _T32 [ _T1 _T2 _T3 _T4 _T5 ]
    parm _T5 [ _T1 _T2 _T3 _T4 _T5 ]
    parm _T4 [ _T1 _T2 _T3 _T4 _T5 ]
    parm _T3 [ _T1 _T2 _T3 _T4 _T5 ]
    _T33 = *(_T1 + 0) [ _T1 _T33 _T2 _T3 _T4 _T5 ]
    _T34 = *(_T33 + 12) [ _T1 _T2 _T34 _T3 _T4 _T5 ]
    call _T34 [ _T1 _T2 _T3 _T4 _T5 ]
END BY RETURN, void result

FUNCTION main : 
BASIC BLOCK 0 : 
  Def     = [ _T35 _T36 _T37 _T38 _T39 _T40 _T41 _T42 _T43 _T44 _T45 _T46 _T47 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
    _T36 = 5 [ _T36 ]
    _T35 = _T36 [ _T35 ]
    _T37 = "number of disks is " [ _T35 _T37 ]
    parm _T37 [ _T35 ]
    call _PrintString [ _T35 ]
    parm _T35 [ _T35 ]
    call _PrintInt [ _T35 ]
    _T38 = "\n" [ _T35 _T38 ]
    parm _T38 [ _T35 ]
    call _PrintString [ _T35 ]
    _T40 =  call _Hanoi_New [ _T35 _T40 ]
    _T39 = _T40 [ _T35 _T39 ]
    parm _T39 [ _T35 _T39 ]
    _T41 = *(_T39 + 0) [ _T35 _T39 _T41 ]
    _T42 = *(_T41 + 8) [ _T35 _T39 _T42 ]
    call _T42 [ _T35 _T39 ]
    _T43 = "A" [ _T35 _T39 _T43 ]
    _T44 = "C" [ _T35 _T39 _T43 _T44 ]
    _T45 = "B" [ _T35 _T39 _T43 _T44 _T45 ]
    parm _T39 [ _T35 _T39 _T43 _T44 _T45 ]
    parm _T35 [ _T39 _T43 _T44 _T45 ]
    parm _T43 [ _T39 _T44 _T45 ]
    parm _T44 [ _T39 _T45 ]
    parm _T45 [ _T39 ]
    _T46 = *(_T39 + 0) [ _T46 ]
    _T47 = *(_T46 + 12) [ _T47 ]
    call _T47 [ ]
END BY RETURN, void result

