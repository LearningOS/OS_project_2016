FUNCTION _Main_New : 
BASIC BLOCK 0 : 
  Def     = [ _T2 _T3 _T4 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
    _T2 = 4 [ _T2 ]
    parm _T2 [ ]
    _T3 =  call _Alloc [ _T3 ]
    _T4 = VTBL <_Main> [ _T3 _T4 ]
    *(_T3 + 0) = _T4 [ _T3 ]
END BY RETURN, result = _T3

FUNCTION _Fibonacci_New : 
BASIC BLOCK 0 : 
  Def     = [ _T5 _T6 _T7 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ ]
    _T5 = 4 [ _T5 ]
    parm _T5 [ ]
    _T6 =  call _Alloc [ _T6 ]
    _T7 = VTBL <_Fibonacci> [ _T6 _T7 ]
    *(_T6 + 0) = _T7 [ _T6 ]
END BY RETURN, result = _T6

FUNCTION main : 
BASIC BLOCK 0 : 
  Def     = [ _T8 _T9 _T10 _T11 ]
  liveUse = [ ]
  liveIn  = [ ]
  liveOut = [ _T8 _T9 ]
    _T10 =  call _Fibonacci_New [ _T10 ]
    _T9 = _T10 [ _T9 ]
    _T11 = 0 [ _T9 _T11 ]
    _T8 = _T11 [ _T8 _T9 ]
END BY BRANCH, goto 1
BASIC BLOCK 1 : 
  Def     = [ _T12 _T13 ]
  liveUse = [ _T8 ]
  liveIn  = [ _T8 _T9 ]
  liveOut = [ _T8 _T9 ]
    _T12 = 10 [ _T8 _T9 _T12 ]
    _T13 = (_T8 < _T12) [ _T8 _T9 _T13 ]
END BY BEQZ, if _T13 = 
    0 : goto 3; 1 : goto 2
BASIC BLOCK 2 : 
  Def     = [ _T14 _T15 _T16 _T17 _T18 _T19 ]
  liveUse = [ _T8 _T9 ]
  liveIn  = [ _T8 _T9 ]
  liveOut = [ _T8 _T9 ]
    parm _T9 [ _T8 _T9 ]
    parm _T8 [ _T8 _T9 ]
    _T14 = *(_T9 + 0) [ _T8 _T9 _T14 ]
    _T15 = *(_T14 + 8) [ _T8 _T9 _T15 ]
    _T16 =  call _T15 [ _T16 _T8 _T9 ]
    parm _T16 [ _T8 _T9 ]
    call _PrintInt [ _T8 _T9 ]
    _T17 = "\n" [ _T17 _T8 _T9 ]
    parm _T17 [ _T8 _T9 ]
    call _PrintString [ _T8 _T9 ]
    _T18 = 1 [ _T18 _T8 _T9 ]
    _T19 = (_T8 + _T18) [ _T19 _T9 ]
    _T8 = _T19 [ _T8 _T9 ]
END BY BRANCH, goto 1
BASIC BLOCK 3 : 
  Def     = [ _T8 _T20 _T21 _T22 _T23 _T24 ]
  liveUse = [ _T9 ]
  liveIn  = [ _T9 ]
  liveOut = [ ]
    _T20 =  call _ReadInteger [ _T20 _T9 ]
    _T8 = _T20 [ _T8 _T9 ]
    parm _T9 [ _T8 _T9 ]
    parm _T8 [ _T9 ]
    _T21 = *(_T9 + 0) [ _T21 ]
    _T22 = *(_T21 + 8) [ _T22 ]
    _T23 =  call _T22 [ _T23 ]
    parm _T23 [ ]
    call _PrintInt [ ]
    _T24 = "\n" [ _T24 ]
    parm _T24 [ ]
    call _PrintString [ ]
END BY RETURN, void result

FUNCTION _Fibonacci.get : 
BASIC BLOCK 0 : 
  Def     = [ _T25 _T26 ]
  liveUse = [ _T1 ]
  liveIn  = [ _T0 _T1 ]
  liveOut = [ _T0 _T1 ]
    _T25 = 2 [ _T0 _T1 _T25 ]
    _T26 = (_T1 < _T25) [ _T0 _T1 _T26 ]
END BY BEQZ, if _T26 = 
    0 : goto 2; 1 : goto 1
BASIC BLOCK 1 : 
  Def     = [ _T27 ]
  liveUse = [ ]
  liveIn  = [ _T0 _T1 ]
  liveOut = [ _T0 _T1 ]
    _T27 = 1 [ _T0 _T1 _T27 ]
END BY RETURN, result = _T27
BASIC BLOCK 2 : 
  Def     = [ _T28 _T29 _T30 _T31 _T32 _T33 _T34 _T35 _T36 _T37 _T38 ]
  liveUse = [ _T0 _T1 ]
  liveIn  = [ _T0 _T1 ]
  liveOut = [ _T0 _T1 ]
    _T28 = 1 [ _T0 _T1 _T28 ]
    _T29 = (_T1 - _T28) [ _T0 _T1 _T29 ]
    parm _T0 [ _T0 _T1 _T29 ]
    parm _T29 [ _T0 _T1 ]
    _T30 = *(_T0 + 0) [ _T0 _T1 _T30 ]
    _T31 = *(_T30 + 8) [ _T0 _T1 _T31 ]
    _T32 =  call _T31 [ _T0 _T32 _T1 ]
    _T33 = 2 [ _T0 _T32 _T1 _T33 ]
    _T34 = (_T1 - _T33) [ _T0 _T32 _T1 _T34 ]
    parm _T0 [ _T0 _T32 _T1 _T34 ]
    parm _T34 [ _T0 _T32 _T1 ]
    _T35 = *(_T0 + 0) [ _T0 _T32 _T1 _T35 ]
    _T36 = *(_T35 + 8) [ _T0 _T32 _T1 _T36 ]
    _T37 =  call _T36 [ _T0 _T32 _T1 _T37 ]
    _T38 = (_T32 + _T37) [ _T0 _T1 _T38 ]
END BY RETURN, result = _T38

